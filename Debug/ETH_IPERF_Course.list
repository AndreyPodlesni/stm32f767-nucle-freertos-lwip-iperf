
ETH_IPERF_Course.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001894c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039b4  08018b4c  08018b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c500  0801c500  0001e090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c500  0801c500  0001d500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c508  0801c508  0001e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c508  0801c508  0001d508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c50c  0801c50c  0001d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0801c510  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001df44  20000090  0801c5a0  0001e090  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  2001dfd4  0801c5a0  0001efd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001e090  2**0
                  CONTENTS, READONLY
 12 .ethernet_descriptors 000005a0  20020fd8  20020fd8  0001efd8  2**2
                  ALLOC
 13 .Rx_PoolSection 0000c000  20021580  20021580  0001efd8  2**5
                  ALLOC
 14 .lwip_heap    00000000  20050000  20050000  0001e0be  2**0
                  CONTENTS
 15 .debug_info   0003722e  00000000  00000000  0001e0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000898f  00000000  00000000  000552ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000027d8  00000000  00000000  0005dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f62  00000000  00000000  00060458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011cf5  00000000  00000000  000623ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003e12a  00000000  00000000  000740af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012450d  00000000  00000000  000b21d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001d66e6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ad5c  00000000  00000000  001d672c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004c  00000000  00000000  001e1488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	08018b34 	.word	0x08018b34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	08018b34 	.word	0x08018b34

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800062a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	200000b0 	.word	0x200000b0
 800063c:	20000150 	.word	0x20000150

08000640 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 512);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_FREERTOS_Init+0x30>)
 8000648:	1d3c      	adds	r4, r7, #4
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f006 fe08 	bl	8007272 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a03      	ldr	r2, [pc, #12]	@ (8000674 <MX_FREERTOS_Init+0x34>)
 8000666:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bdb0      	pop	{r4, r5, r7, pc}
 8000670:	08018b58 	.word	0x08018b58
 8000674:	200000ac 	.word	0x200000ac

08000678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000680:	f005 ffe8 	bl	8006654 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  lwiperf_start_tcp_server_default(NULL, NULL);
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fe20 	bl	80012cc <lwiperf_start_tcp_server_default>
  /* Infinite loop */
  for(;;)
  {

	 // printf("Hello\n\r");
    osDelay(1);
 800068c:	2001      	movs	r0, #1
 800068e:	f006 fe48 	bl	8007322 <osDelay>
 8000692:	e7fb      	b.n	800068c <StartDefaultTask+0x14>

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	@ 0x30
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a46      	ldr	r2, [pc, #280]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b44      	ldr	r3, [pc, #272]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a40      	ldr	r2, [pc, #256]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b3e      	ldr	r3, [pc, #248]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a3a      	ldr	r2, [pc, #232]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b35      	ldr	r3, [pc, #212]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a34      	ldr	r2, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x134>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b32      	ldr	r3, [pc, #200]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	4b2f      	ldr	r3, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0x134>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a2e      	ldr	r2, [pc, #184]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a28      	ldr	r2, [pc, #160]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <MX_GPIO_Init+0x134>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000740:	4822      	ldr	r0, [pc, #136]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000742:	f003 f989 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2140      	movs	r1, #64	@ 0x40
 800074a:	4821      	ldr	r0, [pc, #132]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 800074c:	f003 f984 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000756:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	481b      	ldr	r0, [pc, #108]	@ (80007d4 <MX_GPIO_Init+0x140>)
 8000768:	f002 ffca 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800076c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4811      	ldr	r0, [pc, #68]	@ (80007cc <MX_GPIO_Init+0x138>)
 8000786:	f002 ffbb 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800078a:	2340      	movs	r3, #64	@ 0x40
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 80007a2:	f002 ffad 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_GPIO_Init+0x13c>)
 80007ba:	f002 ffa1 	bl	8003700 <HAL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3730      	adds	r7, #48	@ 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40021800 	.word	0x40021800
 80007d4:	40020800 	.word	0x40020800

080007d8 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <lwiperf_list_add+0x24>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <lwiperf_list_add+0x24>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000550 	.word	0x20000550

08000800 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <lwiperf_list_remove+0x78>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	e029      	b.n	8000868 <lwiperf_list_remove+0x68>
    if (iter == item) {
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	d120      	bne.n	800085e <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <lwiperf_list_remove+0x78>)
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e003      	b.n	8000834 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	e00c      	b.n	8000856 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d105      	bne.n	8000850 <lwiperf_list_remove+0x50>
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <lwiperf_list_remove+0x7c>)
 8000846:	22d0      	movs	r2, #208	@ 0xd0
 8000848:	490d      	ldr	r1, [pc, #52]	@ (8000880 <lwiperf_list_remove+0x80>)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <lwiperf_list_remove+0x84>)
 800084c:	f017 fa0c 	bl	8017c68 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ef      	bne.n	800083c <lwiperf_list_remove+0x3c>
      }
      break;
 800085c:	e008      	b.n	8000870 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1d2      	bne.n	8000814 <lwiperf_list_remove+0x14>
    }
  }
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000550 	.word	0x20000550
 800087c:	08018b74 	.word	0x08018b74
 8000880:	08018b8c 	.word	0x08018b8c
 8000884:	08018b9c 	.word	0x08018b9c

08000888 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <lwiperf_list_find+0x38>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e008      	b.n	80008aa <lwiperf_list_find+0x22>
    if (iter == item) {
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	d101      	bne.n	80008a4 <lwiperf_list_find+0x1c>
      return item;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	e006      	b.n	80008b2 <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1f3      	bne.n	8000898 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000550 	.word	0x20000550

080008c4 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	b08d      	sub	sp, #52	@ 0x34
 80008c8:	af06      	add	r7, sp, #24
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d038      	beq.n	8000948 <lwip_tcp_conn_report+0x84>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d034      	beq.n	8000948 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 80008de:	f006 fa31 	bl	8006d44 <sys_now>
 80008e2:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e006      	b.n	8000908 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	699c      	ldr	r4, [r3, #24]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	469e      	mov	lr, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 800091a:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	3304      	adds	r3, #4
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000928:	8b12      	ldrh	r2, [r2, #24]
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800092e:	78fe      	ldrb	r6, [r7, #3]
 8000930:	6978      	ldr	r0, [r7, #20]
 8000932:	9004      	str	r0, [sp, #16]
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	9003      	str	r0, [sp, #12]
 8000938:	9102      	str	r1, [sp, #8]
 800093a:	9201      	str	r2, [sp, #4]
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	4663      	mov	r3, ip
 8000940:	4672      	mov	r2, lr
 8000942:	4631      	mov	r1, r6
 8000944:	4628      	mov	r0, r5
 8000946:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8000948:	bf00      	nop
 800094a:	371c      	adds	r7, #28
 800094c:	46bd      	mov	sp, r7
 800094e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000950 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff4e 	bl	8000800 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	4619      	mov	r1, r3
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ffab 	bl	80008c4 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d02f      	beq.n	80009d6 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f00d fb13 	bl	800dfa8 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00d fb9c 	bl	800e0c8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f00d fb3a 	bl	800e010 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f00d fb12 	bl	800dfcc <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00d fb50 	bl	800e054 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f00c f84d 	bl	800ca58 <tcp_close>
 80009be:	4603      	mov	r3, r0
 80009c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d017      	beq.n	80009fa <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	691b      	ldr	r3, [r3, #16]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00c f92c 	bl	800cc2c <tcp_abort>
 80009d4:	e011      	b.n	80009fa <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4618      	mov	r0, r3
 80009dc:	f00c f83c 	bl	800ca58 <tcp_close>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 80009e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d006      	beq.n	80009fa <lwiperf_tcp_close+0xaa>
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <lwiperf_tcp_close+0xb8>)
 80009ee:	f240 120d 	movw	r2, #269	@ 0x10d
 80009f2:	4906      	ldr	r1, [pc, #24]	@ (8000a0c <lwiperf_tcp_close+0xbc>)
 80009f4:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <lwiperf_tcp_close+0xc0>)
 80009f6:	f017 f937 	bl	8017c68 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f009 ff9a 	bl	800a934 <mem_free>
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08018b74 	.word	0x08018b74
 8000a0c:	08018bc4 	.word	0x08018bc4
 8000a10:	08018b9c 	.word	0x08018b9c

08000a14 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	@ 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d007      	beq.n	8000a32 <lwiperf_tcp_client_send_more+0x1e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	791b      	ldrb	r3, [r3, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <lwiperf_tcp_client_send_more+0x1e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	795b      	ldrb	r3, [r3, #5]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <lwiperf_tcp_client_send_more+0x2c>
 8000a32:	4b61      	ldr	r3, [pc, #388]	@ (8000bb8 <lwiperf_tcp_client_send_more+0x1a4>)
 8000a34:	f240 121d 	movw	r2, #285	@ 0x11d
 8000a38:	4960      	ldr	r1, [pc, #384]	@ (8000bbc <lwiperf_tcp_client_send_more+0x1a8>)
 8000a3a:	4861      	ldr	r0, [pc, #388]	@ (8000bc0 <lwiperf_tcp_client_send_more+0x1ac>)
 8000a3c:	f017 f914 	bl	8017c68 <iprintf>

  do {
    send_more = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d01f      	beq.n	8000a90 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8000a50:	f006 f978 	bl	8006d44 <sys_now>
 8000a54:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a64:	4618      	mov	r0, r3
 8000a66:	f009 fde9 	bl	800a63c <lwip_htonl>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d316      	bcc.n	8000ab2 <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000a84:	2101      	movs	r1, #1
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ff62 	bl	8000950 <lwiperf_tcp_close>
        return ERR_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e08f      	b.n	8000bb0 <lwiperf_tcp_client_send_more+0x19c>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a94:	4618      	mov	r0, r3
 8000a96:	f009 fdd1 	bl	800a63c <lwip_htonl>
 8000a9a:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d305      	bcc.n	8000ab2 <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff51 	bl	8000950 <lwiperf_tcp_close>
        return ERR_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e07e      	b.n	8000bb0 <lwiperf_tcp_client_send_more+0x19c>
      }
    }

    if (conn->bytes_transferred < 24) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab6:	2b17      	cmp	r3, #23
 8000ab8:	d810      	bhi.n	8000adc <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac4:	4413      	add	r3, r2
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f1c3 0318 	rsb	r3, r3, #24
 8000ad2:	853b      	strh	r3, [r7, #40]	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000ada:	e034      	b.n	8000b46 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ae2:	d813      	bhi.n	8000b0c <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	3b18      	subs	r3, #24
 8000af0:	4413      	add	r3, r2
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 8000afe:	853b      	strh	r3, [r7, #40]	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8000b00:	2303      	movs	r3, #3
 8000b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      send_more = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b0a:	e01c      	b.n	8000b46 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b10:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <lwiperf_tcp_client_send_more+0x1b0>)
 8000b12:	fba3 2301 	umull	r2, r3, r3, r1
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	1aca      	subs	r2, r1, r3
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <lwiperf_tcp_client_send_more+0x1b4>)
 8000b24:	4413      	add	r3, r2
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = TCP_MSS;
 8000b28:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000b2c:	853b      	strh	r3, [r7, #40]	@ 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b32:	2b30      	cmp	r3, #48	@ 0x30
 8000b34:	d102      	bne.n	8000b3c <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8000b36:	f240 539c 	movw	r3, #1436	@ 0x59c
 8000b3a:	853b      	strh	r3, [r7, #40]	@ 0x28
      }
      apiflags = 0; /* no copying needed */
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      send_more = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    txlen = txlen_max;
 8000b46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b48:	857b      	strh	r3, [r7, #42]	@ 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6918      	ldr	r0, [r3, #16]
 8000b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000b52:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b56:	f010 f965 	bl	8010e24 <tcp_write>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8000b5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b66:	d102      	bne.n	8000b6e <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8000b68:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000b6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b76:	d104      	bne.n	8000b82 <lwiperf_tcp_client_send_more+0x16e>
 8000b78:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b7a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d8e3      	bhi.n	8000b4a <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8000b82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <lwiperf_tcp_client_send_more+0x184>
      conn->bytes_transferred += txlen;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b90:	441a      	add	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b96:	e001      	b.n	8000b9c <lwiperf_tcp_client_send_more+0x188>
    } else {
      send_more = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  } while (send_more);
 8000b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f47f af4e 	bne.w	8000a40 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f010 ff25 	bl	80119f8 <tcp_output>
  return ERR_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	@ 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	08018b74 	.word	0x08018b74
 8000bbc:	08018bcc 	.word	0x08018bcc
 8000bc0:	08018b9c 	.word	0x08018b9c
 8000bc4:	cccccccd 	.word	0xcccccccd
 8000bc8:	0801bc7c 	.word	0x0801bc7c

08000bcc <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d006      	beq.n	8000bf6 <lwiperf_tcp_client_sent+0x2a>
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <lwiperf_tcp_client_sent+0x44>)
 8000bea:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8000bee:	4909      	ldr	r1, [pc, #36]	@ (8000c14 <lwiperf_tcp_client_sent+0x48>)
 8000bf0:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <lwiperf_tcp_client_sent+0x4c>)
 8000bf2:	f017 f839 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff08 	bl	8000a14 <lwiperf_tcp_client_send_more>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08018b74 	.word	0x08018b74
 8000c14:	08018bdc 	.word	0x08018bdc
 8000c18:	08018b9c 	.word	0x08018b9c

08000c1c <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d006      	beq.n	8000c46 <lwiperf_tcp_client_connected+0x2a>
 8000c38:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <lwiperf_tcp_client_connected+0x60>)
 8000c3a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8000c3e:	4910      	ldr	r1, [pc, #64]	@ (8000c80 <lwiperf_tcp_client_connected+0x64>)
 8000c40:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <lwiperf_tcp_client_connected+0x68>)
 8000c42:	f017 f811 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000c4e:	2105      	movs	r1, #5
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff fe7d 	bl	8000950 <lwiperf_tcp_close>
    return ERR_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e00c      	b.n	8000c74 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8000c62:	f006 f86f 	bl	8006d44 <sys_now>
 8000c66:	4602      	mov	r2, r0
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f7ff fed1 	bl	8000a14 <lwiperf_tcp_client_send_more>
 8000c72:	4603      	mov	r3, r0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	08018b74 	.word	0x08018b74
 8000c80:	08018bdc 	.word	0x08018bdc
 8000c84:	08018b9c 	.word	0x08018b9c

08000c88 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	460b      	mov	r3, r1
 8000c96:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <lwiperf_tx_start_impl+0x24>
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc8 <lwiperf_tx_start_impl+0x140>)
 8000ca0:	f240 128b 	movw	r2, #395	@ 0x18b
 8000ca4:	4949      	ldr	r1, [pc, #292]	@ (8000dcc <lwiperf_tx_start_impl+0x144>)
 8000ca6:	484a      	ldr	r0, [pc, #296]	@ (8000dd0 <lwiperf_tx_start_impl+0x148>)
 8000ca8:	f016 ffde 	bl	8017c68 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d106      	bne.n	8000cc0 <lwiperf_tx_start_impl+0x38>
 8000cb2:	4b45      	ldr	r3, [pc, #276]	@ (8000dc8 <lwiperf_tx_start_impl+0x140>)
 8000cb4:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8000cb8:	4944      	ldr	r1, [pc, #272]	@ (8000dcc <lwiperf_tx_start_impl+0x144>)
 8000cba:	4845      	ldr	r0, [pc, #276]	@ (8000dd0 <lwiperf_tx_start_impl+0x148>)
 8000cbc:	f016 ffd4 	bl	8017c68 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d106      	bne.n	8000cd4 <lwiperf_tx_start_impl+0x4c>
 8000cc6:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <lwiperf_tx_start_impl+0x140>)
 8000cc8:	f240 128d 	movw	r2, #397	@ 0x18d
 8000ccc:	4941      	ldr	r1, [pc, #260]	@ (8000dd4 <lwiperf_tx_start_impl+0x14c>)
 8000cce:	4840      	ldr	r0, [pc, #256]	@ (8000dd0 <lwiperf_tx_start_impl+0x148>)
 8000cd0:	f016 ffca 	bl	8017c68 <iprintf>
  *new_conn = NULL;
 8000cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000cda:	2048      	movs	r0, #72	@ 0x48
 8000cdc:	f009 ffba 	bl	800ac54 <mem_malloc>
 8000ce0:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	e067      	b.n	8000dbe <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f00d f94c 	bl	800df8c <tcp_new_ip_type>
 8000cf4:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8000cfc:	69f8      	ldr	r0, [r7, #28]
 8000cfe:	f009 fe19 	bl	800a934 <mem_free>
    return ERR_MEM;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e05a      	b.n	8000dbe <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000d08:	2248      	movs	r2, #72	@ 0x48
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	69f8      	ldr	r0, [r7, #28]
 8000d0e:	f017 f810 	bl	8017d32 <memset>
  client_conn->base.tcp = 1;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2201      	movs	r2, #1
 8000d16:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d1c:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000d24:	f006 f80e 	bl	8006d44 <sys_now>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d38:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  client_conn->bytes_transferred = 0;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	3328      	adds	r3, #40	@ 0x28
 8000d4c:	2218      	movs	r2, #24
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f017 f8c2 	bl	8017eda <memcpy>
  client_conn->have_settings_buf = 1;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  tcp_arg(newpcb, client_conn);
 8000d5e:	69f9      	ldr	r1, [r7, #28]
 8000d60:	69b8      	ldr	r0, [r7, #24]
 8000d62:	f00d f921 	bl	800dfa8 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000d66:	491c      	ldr	r1, [pc, #112]	@ (8000dd8 <lwiperf_tx_start_impl+0x150>)
 8000d68:	69b8      	ldr	r0, [r7, #24]
 8000d6a:	f00d f951 	bl	800e010 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000d6e:	2202      	movs	r2, #2
 8000d70:	491a      	ldr	r1, [pc, #104]	@ (8000ddc <lwiperf_tx_start_impl+0x154>)
 8000d72:	69b8      	ldr	r0, [r7, #24]
 8000d74:	f00d f9a8 	bl	800e0c8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000d78:	4919      	ldr	r1, [pc, #100]	@ (8000de0 <lwiperf_tx_start_impl+0x158>)
 8000d7a:	69b8      	ldr	r0, [r7, #24]
 8000d7c:	f00d f96a 	bl	800e054 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000d86:	897a      	ldrh	r2, [r7, #10]
 8000d88:	f107 0110 	add.w	r1, r7, #16
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <lwiperf_tx_start_impl+0x15c>)
 8000d8e:	69b8      	ldr	r0, [r7, #24]
 8000d90:	f00c f9be 	bl	800d110 <tcp_connect>
 8000d94:	4603      	mov	r3, r0
 8000d96:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8000d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000da0:	2102      	movs	r1, #2
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f7ff fdd4 	bl	8000950 <lwiperf_tcp_close>
    return err;
 8000da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dac:	e007      	b.n	8000dbe <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd11 	bl	80007d8 <lwiperf_list_add>
  *new_conn = client_conn;
 8000db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08018b74 	.word	0x08018b74
 8000dcc:	08018bec 	.word	0x08018bec
 8000dd0:	08018b9c 	.word	0x08018b9c
 8000dd4:	08018c00 	.word	0x08018c00
 8000dd8:	08000bcd 	.word	0x08000bcd
 8000ddc:	080010bd 	.word	0x080010bd
 8000de0:	0800109d 	.word	0x0800109d
 8000de4:	08000c1d 	.word	0x08000c1d

08000de8 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f009 fc1f 	bl	800a63c <lwip_htonl>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	1d18      	adds	r0, r3, #4
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699e      	ldr	r6, [r3, #24]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6892      	ldr	r2, [r2, #8]
 8000e1a:	89fc      	ldrh	r4, [r7, #14]
 8000e1c:	f107 0108 	add.w	r1, r7, #8
 8000e20:	9102      	str	r1, [sp, #8]
 8000e22:	9201      	str	r2, [sp, #4]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	4633      	mov	r3, r6
 8000e28:	462a      	mov	r2, r5
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f7ff ff2c 	bl	8000c88 <lwiperf_tx_start_impl>
 8000e30:	4603      	mov	r3, r0
 8000e32:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8000e34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10c      	bne.n	8000e56 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <lwiperf_tx_start_passive+0x68>
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <lwiperf_tx_start_passive+0x7c>)
 8000e44:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000e48:	4907      	ldr	r1, [pc, #28]	@ (8000e68 <lwiperf_tx_start_passive+0x80>)
 8000e4a:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <lwiperf_tx_start_passive+0x84>)
 8000e4c:	f016 ff0c 	bl	8017c68 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  return ret;
 8000e56:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08018b74 	.word	0x08018b74
 8000e68:	08018c00 	.word	0x08018c00
 8000e6c:	08018b9c 	.word	0x08018b9c

08000e70 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d006      	beq.n	8000e9a <lwiperf_tcp_recv+0x2a>
 8000e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001088 <lwiperf_tcp_recv+0x218>)
 8000e8e:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000e92:	497e      	ldr	r1, [pc, #504]	@ (800108c <lwiperf_tcp_recv+0x21c>)
 8000e94:	487e      	ldr	r0, [pc, #504]	@ (8001090 <lwiperf_tcp_recv+0x220>)
 8000e96:	f016 fee7 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8000e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000ea2:	2105      	movs	r1, #5
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff fd53 	bl	8000950 <lwiperf_tcp_close>
    return ERR_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e0e8      	b.n	8001080 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d114      	bne.n	8000ede <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d008      	beq.n	8000ed2 <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ff8b 	bl	8000de8 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff fd3b 	bl	8000950 <lwiperf_tcp_close>
    return ERR_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e0d0      	b.n	8001080 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	891b      	ldrh	r3, [r3, #8]
 8000ee2:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <lwiperf_tcp_recv+0x96>
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	3b18      	subs	r3, #24
 8000efc:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 8090 	bne.w	8001026 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	891b      	ldrh	r3, [r3, #8]
 8000f0a:	2b17      	cmp	r3, #23
 8000f0c:	d808      	bhi.n	8000f20 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000f0e:	2103      	movs	r1, #3
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff fd1d 	bl	8000950 <lwiperf_tcp_close>
      pbuf_free(p);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f00b f82c 	bl	800bf74 <pbuf_free>
      return ERR_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e0af      	b.n	8001080 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d135      	bne.n	8000f96 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000f30:	2300      	movs	r3, #0
 8000f32:	2218      	movs	r2, #24
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f00b fa23 	bl	800c380 <pbuf_copy_partial>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b18      	cmp	r3, #24
 8000f3e:	d008      	beq.n	8000f52 <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000f40:	2102      	movs	r1, #2
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff fd04 	bl	8000950 <lwiperf_tcp_close>
        pbuf_free(p);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f00b f813 	bl	800bf74 <pbuf_free>
        return ERR_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e096      	b.n	8001080 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d031      	beq.n	8000fca <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d02b      	beq.n	8000fca <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff38 	bl	8000de8 <lwiperf_tx_start_passive>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 8000f7c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d022      	beq.n	8000fca <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000f84:	2104      	movs	r1, #4
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff fce2 	bl	8000950 <lwiperf_tcp_close>
            pbuf_free(p);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f00a fff1 	bl	800bf74 <pbuf_free>
            return ERR_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e074      	b.n	8001080 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d013      	beq.n	8000fca <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000fa8:	2318      	movs	r3, #24
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f00b faee 	bl	800c58e <pbuf_memcmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000fb8:	2103      	movs	r1, #3
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff fcc8 	bl	8000950 <lwiperf_tcp_close>
          pbuf_free(p);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f00a ffd7 	bl	800bf74 <pbuf_free>
          return ERR_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e05a      	b.n	8001080 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	f103 0218 	add.w	r2, r3, #24
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	2b18      	cmp	r3, #24
 8000fdc:	d80f      	bhi.n	8000ffe <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8000fde:	f005 feb1 	bl	8006d44 <sys_now>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	4619      	mov	r1, r3
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f00b fff6 	bl	800cfe0 <tcp_recved>
      pbuf_free(p);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f00a ffbd 	bl	800bf74 <pbuf_free>
      return ERR_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e040      	b.n	8001080 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2204      	movs	r2, #4
 8001002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 8001006:	2118      	movs	r1, #24
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f00a ff2d 	bl	800be68 <pbuf_remove_header>
 800100e:	4603      	mov	r3, r0
 8001010:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8001012:	7c3b      	ldrb	r3, [r7, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <lwiperf_tcp_recv+0x1b6>
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <lwiperf_tcp_recv+0x218>)
 800101a:	f240 2211 	movw	r2, #529	@ 0x211
 800101e:	491d      	ldr	r1, [pc, #116]	@ (8001094 <lwiperf_tcp_recv+0x224>)
 8001020:	481b      	ldr	r0, [pc, #108]	@ (8001090 <lwiperf_tcp_recv+0x220>)
 8001022:	f016 fe21 	bl	8017c68 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e008      	b.n	8001042 <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	895b      	ldrh	r3, [r3, #10]
 8001034:	461a      	mov	r2, r3
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4413      	add	r3, r2
 800103a:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f3      	bne.n	8001030 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	891b      	ldrh	r3, [r3, #8]
 800104c:	461a      	mov	r2, r3
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	4293      	cmp	r3, r2
 8001052:	d006      	beq.n	8001062 <lwiperf_tcp_recv+0x1f2>
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <lwiperf_tcp_recv+0x218>)
 8001056:	f240 222b 	movw	r2, #555	@ 0x22b
 800105a:	490f      	ldr	r1, [pc, #60]	@ (8001098 <lwiperf_tcp_recv+0x228>)
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <lwiperf_tcp_recv+0x220>)
 800105e:	f016 fe03 	bl	8017c68 <iprintf>
  conn->bytes_transferred += packet_idx;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	441a      	add	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 800106e:	8a7b      	ldrh	r3, [r7, #18]
 8001070:	4619      	mov	r1, r3
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f00b ffb4 	bl	800cfe0 <tcp_recved>
  pbuf_free(p);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f00a ff7b 	bl	800bf74 <pbuf_free>
  return ERR_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08018b74 	.word	0x08018b74
 800108c:	08018c14 	.word	0x08018c14
 8001090:	08018b9c 	.word	0x08018b9c
 8001094:	08018c24 	.word	0x08018c24
 8001098:	08018c40 	.word	0x08018c40

0800109c <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80010ac:	2105      	movs	r1, #5
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff fc4e 	bl	8000950 <lwiperf_tcp_close>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d006      	beq.n	80010e2 <lwiperf_tcp_poll+0x26>
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <lwiperf_tcp_poll+0x64>)
 80010d6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80010da:	4912      	ldr	r1, [pc, #72]	@ (8001124 <lwiperf_tcp_poll+0x68>)
 80010dc:	4812      	ldr	r0, [pc, #72]	@ (8001128 <lwiperf_tcp_poll+0x6c>)
 80010de:	f016 fdc3 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	d905      	bls.n	8001108 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80010fc:	2102      	movs	r1, #2
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fc26 	bl	8000950 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8001104:	2300      	movs	r3, #0
 8001106:	e007      	b.n	8001118 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	795b      	ldrb	r3, [r3, #5]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fc7f 	bl	8000a14 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08018b74 	.word	0x08018b74
 8001124:	08018c14 	.word	0x08018c14
 8001128:	08018b9c 	.word	0x08018b9c

0800112c <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	4613      	mov	r3, r2
 8001138:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <lwiperf_tcp_accept+0x22>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <lwiperf_tcp_accept+0x22>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 800114e:	f06f 0305 	mvn.w	r3, #5
 8001152:	e0a3      	b.n	800129c <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	795b      	ldrb	r3, [r3, #5]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <lwiperf_tcp_accept+0x42>
 8001160:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <lwiperf_tcp_accept+0x178>)
 8001162:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001166:	4950      	ldr	r1, [pc, #320]	@ (80012a8 <lwiperf_tcp_accept+0x17c>)
 8001168:	4850      	ldr	r0, [pc, #320]	@ (80012ac <lwiperf_tcp_accept+0x180>)
 800116a:	f016 fd7d 	bl	8017c68 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <lwiperf_tcp_accept+0x58>
 8001176:	4b4b      	ldr	r3, [pc, #300]	@ (80012a4 <lwiperf_tcp_accept+0x178>)
 8001178:	f240 2259 	movw	r2, #601	@ 0x259
 800117c:	494c      	ldr	r1, [pc, #304]	@ (80012b0 <lwiperf_tcp_accept+0x184>)
 800117e:	484b      	ldr	r0, [pc, #300]	@ (80012ac <lwiperf_tcp_accept+0x180>)
 8001180:	f016 fd72 	bl	8017c68 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <lwiperf_tcp_accept+0x6e>
 800118c:	4b45      	ldr	r3, [pc, #276]	@ (80012a4 <lwiperf_tcp_accept+0x178>)
 800118e:	f240 225a 	movw	r2, #602	@ 0x25a
 8001192:	4948      	ldr	r1, [pc, #288]	@ (80012b4 <lwiperf_tcp_accept+0x188>)
 8001194:	4845      	ldr	r0, [pc, #276]	@ (80012ac <lwiperf_tcp_accept+0x180>)
 8001196:	f016 fd67 	bl	8017c68 <iprintf>
  if (s->specific_remote) {
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <lwiperf_tcp_accept+0x8e>
 80011ac:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <lwiperf_tcp_accept+0x178>)
 80011ae:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 80011b2:	4941      	ldr	r1, [pc, #260]	@ (80012b8 <lwiperf_tcp_accept+0x18c>)
 80011b4:	483d      	ldr	r0, [pc, #244]	@ (80012ac <lwiperf_tcp_accept+0x180>)
 80011b6:	f016 fd57 	bl	8017c68 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d00d      	beq.n	80011e2 <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 80011c6:	f06f 0305 	mvn.w	r3, #5
 80011ca:	e067      	b.n	800129c <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <lwiperf_tcp_accept+0xb6>
 80011d4:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <lwiperf_tcp_accept+0x178>)
 80011d6:	f240 2262 	movw	r2, #610	@ 0x262
 80011da:	4938      	ldr	r1, [pc, #224]	@ (80012bc <lwiperf_tcp_accept+0x190>)
 80011dc:	4833      	ldr	r0, [pc, #204]	@ (80012ac <lwiperf_tcp_accept+0x180>)
 80011de:	f016 fd43 	bl	8017c68 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80011e2:	2048      	movs	r0, #72	@ 0x48
 80011e4:	f009 fd36 	bl	800ac54 <mem_malloc>
 80011e8:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	e052      	b.n	800129c <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 80011f6:	2248      	movs	r2, #72	@ 0x48
 80011f8:	2100      	movs	r1, #0
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f016 fd99 	bl	8017d32 <memset>
  conn->base.tcp = 1;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2201      	movs	r2, #1
 8001204:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8001218:	f005 fd94 	bl	8006d44 <sys_now>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	69da      	ldr	r2, [r3, #28]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 8001232:	6939      	ldr	r1, [r7, #16]
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f00c feb7 	bl	800dfa8 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800123a:	4921      	ldr	r1, [pc, #132]	@ (80012c0 <lwiperf_tcp_accept+0x194>)
 800123c:	68b8      	ldr	r0, [r7, #8]
 800123e:	f00c fec5 	bl	800dfcc <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001242:	2202      	movs	r2, #2
 8001244:	491f      	ldr	r1, [pc, #124]	@ (80012c4 <lwiperf_tcp_accept+0x198>)
 8001246:	68b8      	ldr	r0, [r7, #8]
 8001248:	f00c ff3e 	bl	800e0c8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	491d      	ldr	r1, [pc, #116]	@ (80012c8 <lwiperf_tcp_accept+0x19c>)
 8001252:	4618      	mov	r0, r3
 8001254:	f00c fefe 	bl	800e054 <tcp_err>

  if (s->specific_remote) {
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800125e:	2b00      	cmp	r3, #0
 8001260:	d017      	beq.n	8001292 <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <lwiperf_tcp_accept+0x158>
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fb05 	bl	8000888 <lwiperf_list_find>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d106      	bne.n	8001292 <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800128a:	2102      	movs	r1, #2
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff fb5f 	bl	8000950 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9f 	bl	80007d8 <lwiperf_list_add>
  return ERR_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08018b74 	.word	0x08018b74
 80012a8:	08018c50 	.word	0x08018c50
 80012ac:	08018b9c 	.word	0x08018b9c
 80012b0:	08018c60 	.word	0x08018c60
 80012b4:	08018c74 	.word	0x08018c74
 80012b8:	08018c88 	.word	0x08018c88
 80012bc:	08018cb0 	.word	0x08018cb0
 80012c0:	08000e71 	.word	0x08000e71
 80012c4:	080010bd 	.word	0x080010bd
 80012c8:	0800109d 	.word	0x0800109d

080012cc <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	f241 3189 	movw	r1, #5001	@ 0x1389
 80012de:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <lwiperf_start_tcp_server_default+0x24>)
 80012e0:	f000 f808 	bl	80012f4 <lwiperf_start_tcp_server>
 80012e4:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0801c400 	.word	0x0801c400

080012f4 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	460b      	mov	r3, r1
 8001302:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8001308:	8979      	ldrh	r1, [r7, #10]
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2300      	movs	r3, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f80d 	bl	8001338 <lwiperf_start_tcp_server_impl>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 8001322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <lwiperf_start_tcp_server+0x3a>
    return state;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	e000      	b.n	8001330 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	460b      	mov	r3, r1
 8001346:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <lwiperf_start_tcp_server_impl+0x24>
 800134e:	4b3a      	ldr	r3, [pc, #232]	@ (8001438 <lwiperf_start_tcp_server_impl+0x100>)
 8001350:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8001354:	4939      	ldr	r1, [pc, #228]	@ (800143c <lwiperf_start_tcp_server_impl+0x104>)
 8001356:	483a      	ldr	r0, [pc, #232]	@ (8001440 <lwiperf_start_tcp_server_impl+0x108>)
 8001358:	f016 fc86 	bl	8017c68 <iprintf>

  if (local_addr == NULL) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 8001362:	f06f 030f 	mvn.w	r3, #15
 8001366:	e063      	b.n	8001430 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001368:	2048      	movs	r0, #72	@ 0x48
 800136a:	f009 fc73 	bl	800ac54 <mem_malloc>
 800136e:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e059      	b.n	8001430 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 800137c:	2248      	movs	r2, #72	@ 0x48
 800137e:	2100      	movs	r1, #0
 8001380:	69f8      	ldr	r0, [r7, #28]
 8001382:	f016 fcd6 	bl	8017d32 <memset>
  s->base.tcp = 1;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	2201      	movs	r2, #1
 800138a:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2201      	movs	r2, #1
 8001390:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001396:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 80013a4:	202e      	movs	r0, #46	@ 0x2e
 80013a6:	f00c fdf1 	bl	800df8c <tcp_new_ip_type>
 80013aa:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e03b      	b.n	8001430 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 80013b8:	897b      	ldrh	r3, [r7, #10]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68f9      	ldr	r1, [r7, #12]
 80013be:	69b8      	ldr	r0, [r7, #24]
 80013c0:	f00b fc40 	bl	800cc44 <tcp_bind>
 80013c4:	4603      	mov	r3, r0
 80013c6:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80013c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 80013d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013d4:	e02c      	b.n	8001430 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 80013d6:	2101      	movs	r1, #1
 80013d8:	69b8      	ldr	r0, [r7, #24]
 80013da:	f00b fceb 	bl	800cdb4 <tcp_listen_with_backlog>
 80013de:	4602      	mov	r2, r0
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 80013f2:	69b8      	ldr	r0, [r7, #24]
 80013f4:	f00b fb30 	bl	800ca58 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 80013f8:	69f8      	ldr	r0, [r7, #28]
 80013fa:	f009 fa9b 	bl	800a934 <mem_free>
    return ERR_MEM;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e015      	b.n	8001430 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	69f9      	ldr	r1, [r7, #28]
 800140e:	4618      	mov	r0, r3
 8001410:	f00c fdca 	bl	800dfa8 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	490a      	ldr	r1, [pc, #40]	@ (8001444 <lwiperf_start_tcp_server_impl+0x10c>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00c fe3c 	bl	800e098 <tcp_accept>

  lwiperf_list_add(&s->base);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f9d8 	bl	80007d8 <lwiperf_list_add>
  *state = s;
 8001428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	08018b74 	.word	0x08018b74
 800143c:	08018cd8 	.word	0x08018cd8
 8001440:	08018b9c 	.word	0x08018b9c
 8001444:	0800112d 	.word	0x0800112d

08001448 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800144c:	f3bf 8f4f 	dsb	sy
}
 8001450:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001452:	f3bf 8f6f 	isb	sy
}
 8001456:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <SCB_EnableICache+0x48>)
 800145a:	2200      	movs	r2, #0
 800145c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001460:	f3bf 8f4f 	dsb	sy
}
 8001464:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001466:	f3bf 8f6f 	isb	sy
}
 800146a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <SCB_EnableICache+0x48>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <SCB_EnableICache+0x48>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001476:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001478:	f3bf 8f4f 	dsb	sy
}
 800147c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800147e:	f3bf 8f6f 	isb	sy
}
 8001482:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001498:	f000 f882 	bl	80015a0 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800149c:	f7ff ffd4 	bl	8001448 <SCB_EnableICache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fcf2 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f80c 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f7ff f8f4 	bl	8000694 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014ac:	f000 fa84 	bl	80019b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014b0:	f000 fb12 	bl	8001ad8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014b4:	f7ff f8c4 	bl	8000640 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014b8:	f005 fec4 	bl	8007244 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <main+0x28>

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	@ 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2234      	movs	r2, #52	@ 0x34
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f016 fc2f 	bl	8017d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014e4:	f002 fc0c 	bl	8003d00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <SystemClock_Config+0xd8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001598 <SystemClock_Config+0xd8>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <SystemClock_Config+0xd8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	4b26      	ldr	r3, [pc, #152]	@ (800159c <SystemClock_Config+0xdc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a25      	ldr	r2, [pc, #148]	@ (800159c <SystemClock_Config+0xdc>)
 8001506:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <SystemClock_Config+0xdc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800151c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001526:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800152a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001530:	23d8      	movs	r3, #216	@ 0xd8
 8001532:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001538:	2309      	movs	r3, #9
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fc3b 	bl	8003dc0 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001550:	f000 f866 	bl	8001620 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001554:	f002 fbe4 	bl	8003d20 <HAL_PWREx_EnableOverDrive>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800155e:	f000 f85f 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001566:	2302      	movs	r3, #2
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001578:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2107      	movs	r1, #7
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fecb 	bl	800431c <HAL_RCC_ClockConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800158c:	f000 f848 	bl	8001620 <Error_Handler>
  }
}
 8001590:	bf00      	nop
 8001592:	3750      	adds	r7, #80	@ 0x50
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80015b2:	f000 fdb7 	bl	8002124 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015b6:	2301      	movs	r3, #1
 80015b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MPU_Config+0x58>)
 80015c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80015c2:	230e      	movs	r3, #14
 80015c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80015ce:	2303      	movs	r3, #3
 80015d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015e2:	463b      	mov	r3, r7
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fdd5 	bl	8002194 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015ea:	2004      	movs	r0, #4
 80015ec:	f000 fdb2 	bl	8002154 <HAL_MPU_Enable>

}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20020000 	.word	0x20020000

080015fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800160e:	f000 fc57 	bl	8001ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40000c00 	.word	0x40000c00

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <Error_Handler+0x8>

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_MspInit+0x4c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	210f      	movs	r1, #15
 8001666:	f06f 0001 	mvn.w	r0, #1
 800166a:	f000 fd31 	bl	80020d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	@ 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800168c:	4b33      	ldr	r3, [pc, #204]	@ (800175c <HAL_InitTick+0xe0>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	4a32      	ldr	r2, [pc, #200]	@ (800175c <HAL_InitTick+0xe0>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6413      	str	r3, [r2, #64]	@ 0x40
 8001698:	4b30      	ldr	r3, [pc, #192]	@ (800175c <HAL_InitTick+0xe0>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a4:	f107 0210 	add.w	r2, r7, #16
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 f85a 	bl	8004768 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016be:	f003 f82b 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80016c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80016c4:	e004      	b.n	80016d0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016c6:	f003 f827 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80016ca:	4603      	mov	r3, r0
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d2:	4a23      	ldr	r2, [pc, #140]	@ (8001760 <HAL_InitTick+0xe4>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	3b01      	subs	r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <HAL_InitTick+0xe8>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <HAL_InitTick+0xec>)
 80016e2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <HAL_InitTick+0xe8>)
 80016e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016ea:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80016ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001764 <HAL_InitTick+0xe8>)
 80016ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_InitTick+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_InitTick+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_InitTick+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001704:	4817      	ldr	r0, [pc, #92]	@ (8001764 <HAL_InitTick+0xe8>)
 8001706:	f003 fc89 	bl	800501c <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001710:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11b      	bne.n	8001750 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001718:	4812      	ldr	r0, [pc, #72]	@ (8001764 <HAL_InitTick+0xe8>)
 800171a:	f003 fce1 	bl	80050e0 <HAL_TIM_Base_Start_IT>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001724:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001728:	2b00      	cmp	r3, #0
 800172a:	d111      	bne.n	8001750 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800172c:	2032      	movs	r0, #50	@ 0x32
 800172e:	f000 fceb 	bl	8002108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d808      	bhi.n	800174a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	2032      	movs	r0, #50	@ 0x32
 800173e:	f000 fcc7 	bl	80020d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_InitTick+0xf0>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e002      	b.n	8001750 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001754:	4618      	mov	r0, r3
 8001756:	3738      	adds	r7, #56	@ 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	431bde83 	.word	0x431bde83
 8001764:	20000554 	.word	0x20000554
 8001768:	40000c00 	.word	0x40000c00
 800176c:	20000004 	.word	0x20000004

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("Hard fault activated\n\r");
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <HardFault_Handler+0x10>)
 800177e:	f016 fa73 	bl	8017c68 <iprintf>
  {
 8001782:	bf00      	nop
 8001784:	e7fa      	b.n	800177c <HardFault_Handler+0x4>
 8001786:	bf00      	nop
 8001788:	08018ce8 	.word	0x08018ce8

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <TIM5_IRQHandler+0x10>)
 80017ba:	f003 fd09 	bl	80051d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000554 	.word	0x20000554

080017c8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <ETH_IRQHandler+0x10>)
 80017ce:	f001 f8af 	bl	8002930 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000cf6c 	.word	0x2000cf6c

080017dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_kill>:

int _kill(int pid, int sig)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <_kill+0x20>)
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	2001dfc4 	.word	0x2001dfc4

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe5 	bl	80017ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <_exit+0x12>

08001826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e00a      	b.n	800184e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001838:	f3af 8000 	nop.w
 800183c:	4601      	mov	r1, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf0      	blt.n	8001838 <_read+0x12>
  }

  return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e009      	b.n	8001886 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f88a 	bl	8001994 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf1      	blt.n	8001872 <_write+0x12>
  }
  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_close>:

int _close(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c0:	605a      	str	r2, [r3, #4]
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_isatty>:

int _isatty(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d205      	bcs.n	800193c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <_sbrk+0x6c>)
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20050000 	.word	0x20050000
 8001960:	00001000 	.word	0x00001000
 8001964:	200005a0 	.word	0x200005a0
 8001968:	2001dfd8 	.word	0x2001dfd8
 800196c:	2001dfc4 	.word	0x2001dfc4

08001970 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__io_putchar>:
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,10);
 800199c:	1d39      	adds	r1, r7, #4
 800199e:	230a      	movs	r3, #10
 80019a0:	2201      	movs	r2, #1
 80019a2:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <__io_putchar+0x20>)
 80019a4:	f003 fe56 	bl	8005654 <HAL_UART_Transmit>
	return ch;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200005a4 	.word	0x200005a4

080019b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019be:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <MX_USART3_UART_Init+0x5c>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_USART3_UART_Init+0x58>)
 80019fc:	f003 fddc 	bl	80055b8 <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a06:	f7ff fe0b 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200005a4 	.word	0x200005a4
 8001a14:	40004800 	.word	0x40004800

08001a18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2290      	movs	r2, #144	@ 0x90
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f016 f97a 	bl	8017d32 <memset>
  if(uartHandle->Instance==USART3)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <HAL_UART_MspInit+0xb4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d13c      	bne.n	8001ac2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 feb8 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a62:	f7ff fddd 	bl	8001620 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_UART_MspInit+0xb8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_UART_MspInit+0xbc>)
 8001abe:	f001 fe1f 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	37b8      	adds	r7, #184	@ 0xb8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40004800 	.word	0x40004800
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020c00 	.word	0x40020c00

08001ad8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ade:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ae6:	2206      	movs	r2, #6
 8001ae8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b1c:	f001 ffb5 	bl	8003a8a <HAL_PCD_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b26:	f7ff fd7b 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000062c 	.word	0x2000062c

08001b34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ae      	sub	sp, #184	@ 0xb8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2290      	movs	r2, #144	@ 0x90
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f016 f8ec 	bl	8017d32 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b62:	d159      	bne.n	8001c18 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fe29 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b80:	f7ff fd4e 	bl	8001620 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a25      	ldr	r2, [pc, #148]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4818      	ldr	r0, [pc, #96]	@ (8001c24 <HAL_PCD_MspInit+0xf0>)
 8001bc4:	f001 fd9c 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4810      	ldr	r0, [pc, #64]	@ (8001c24 <HAL_PCD_MspInit+0xf0>)
 8001be4:	f001 fd8c 	bl	8003700 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001be8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	4a0c      	ldr	r2, [pc, #48]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <HAL_PCD_MspInit+0xec>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c18:	bf00      	nop
 8001c1a:	37b8      	adds	r7, #184	@ 0xb8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2c:	f7ff fea0 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c32:	490d      	ldr	r1, [pc, #52]	@ (8001c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c34:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c48:	4c0a      	ldr	r4, [pc, #40]	@ (8001c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f016 f919 	bl	8017e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7ff fc1b 	bl	8001494 <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c6c:	0801c510 	.word	0x0801c510
  ldr r2, =_sbss
 8001c70:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c74:	2001dfd4 	.word	0x2001dfd4

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>

08001c7a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <LAN8742_RegisterBusIO+0x28>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <LAN8742_RegisterBusIO+0x28>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <LAN8742_RegisterBusIO+0x28>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e014      	b.n	8001cd2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d139      	bne.n	8001d6e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e01c      	b.n	8001d4e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f107 020c 	add.w	r2, r7, #12
 8001d1c:	2112      	movs	r1, #18
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	4798      	blx	r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da03      	bge.n	8001d30 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001d28:	f06f 0304 	mvn.w	r3, #4
 8001d2c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001d2e:	e00b      	b.n	8001d48 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d105      	bne.n	8001d48 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
         break;
 8001d46:	e005      	b.n	8001d54 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b1f      	cmp	r3, #31
 8001d52:	d9df      	bls.n	8001d14 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b1f      	cmp	r3, #31
 8001d5a:	d902      	bls.n	8001d62 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d5c:	f06f 0302 	mvn.w	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 }
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6810      	ldr	r0, [r2, #0]
 8001d8c:	f107 020c 	add.w	r2, r7, #12
 8001d90:	2101      	movs	r1, #1
 8001d92:	4798      	blx	r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da02      	bge.n	8001da0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d9a:	f06f 0304 	mvn.w	r3, #4
 8001d9e:	e06e      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6810      	ldr	r0, [r2, #0]
 8001da8:	f107 020c 	add.w	r2, r7, #12
 8001dac:	2101      	movs	r1, #1
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da02      	bge.n	8001dbc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001db6:	f06f 0304 	mvn.w	r3, #4
 8001dba:	e060      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e059      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6810      	ldr	r0, [r2, #0]
 8001dd2:	f107 020c 	add.w	r2, r7, #12
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4798      	blx	r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da02      	bge.n	8001de6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001de0:	f06f 0304 	mvn.w	r3, #4
 8001de4:	e04b      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11b      	bne.n	8001e28 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <LAN8742_GetLinkState+0x90>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e04:	2302      	movs	r3, #2
 8001e06:	e03a      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e033      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e20:	2304      	movs	r3, #4
 8001e22:	e02c      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e24:	2305      	movs	r3, #5
 8001e26:	e02a      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6810      	ldr	r0, [r2, #0]
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	211f      	movs	r1, #31
 8001e36:	4798      	blx	r3
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da02      	bge.n	8001e44 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e3e:	f06f 0304 	mvn.w	r3, #4
 8001e42:	e01c      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e015      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 031c 	and.w	r3, r3, #28
 8001e58:	2b18      	cmp	r3, #24
 8001e5a:	d101      	bne.n	8001e60 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e00e      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 031c 	and.w	r3, r3, #28
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d101      	bne.n	8001e6e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e007      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 031c 	and.w	r3, r3, #28
 8001e74:	2b14      	cmp	r3, #20
 8001e76:	d101      	bne.n	8001e7c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e000      	b.n	8001e7e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e7c:	2305      	movs	r3, #5
    }
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_Init+0x34>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <HAL_Init+0x34>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_Init+0x34>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	@ (8001ebc <HAL_Init+0x34>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 f908 	bl	80020ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	200f      	movs	r0, #15
 8001eac:	f7ff fbe6 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff fbbc 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000b0c 	.word	0x20000b0c

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000b0c 	.word	0x20000b0c

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008

08001f48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001f4c:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_GetREVID+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0c1b      	lsrs	r3, r3, #16
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e0042000 	.word	0xe0042000

08001f60 <__NVIC_SetPriorityGrouping>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00
 8001fa4:	05fa0000 	.word	0x05fa0000

08001fa8 <__NVIC_GetPriorityGrouping>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	@ (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	@ (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	@ (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	@ 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff4c 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e2:	f7ff ff61 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 80020e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7ff ffb1 	bl	8002054 <NVIC_EncodePriority>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff80 	bl	8002000 <__NVIC_SetPriority>
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff54 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002128:	f3bf 8f5f 	dmb	sy
}
 800212c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_MPU_Disable+0x28>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	4a06      	ldr	r2, [pc, #24]	@ (800214c <HAL_MPU_Disable+0x28>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002138:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_MPU_Disable+0x2c>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	e000ed90 	.word	0xe000ed90

08002154 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <HAL_MPU_Enable+0x38>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_MPU_Enable+0x3c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	4a09      	ldr	r2, [pc, #36]	@ (8002190 <HAL_MPU_Enable+0x3c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002172:	f3bf 8f4f 	dsb	sy
}
 8002176:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002178:	f3bf 8f6f 	isb	sy
}
 800217c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed90 	.word	0xe000ed90
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	785a      	ldrb	r2, [r3, #1]
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80021b0:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7b1b      	ldrb	r3, [r3, #12]
 80021bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7adb      	ldrb	r3, [r3, #11]
 80021c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7a9b      	ldrb	r3, [r3, #10]
 80021ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b5b      	ldrb	r3, [r3, #13]
 80021d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7b9b      	ldrb	r3, [r3, #14]
 80021da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7bdb      	ldrb	r3, [r3, #15]
 80021e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7a5b      	ldrb	r3, [r3, #9]
 80021ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7a1b      	ldrb	r3, [r3, #8]
 80021f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002200:	6113      	str	r3, [r2, #16]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed90 	.word	0xe000ed90

08002214 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e086      	b.n	8002334 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 fd8b 	bl	8006d54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	4b3f      	ldr	r3, [pc, #252]	@ (800233c <HAL_ETH_Init+0x128>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	4a3e      	ldr	r2, [pc, #248]	@ (800233c <HAL_ETH_Init+0x128>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002248:	6453      	str	r3, [r2, #68]	@ 0x44
 800224a:	4b3c      	ldr	r3, [pc, #240]	@ (800233c <HAL_ETH_Init+0x128>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002256:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_ETH_Init+0x12c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a39      	ldr	r2, [pc, #228]	@ (8002340 <HAL_ETH_Init+0x12c>)
 800225c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002260:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002262:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_ETH_Init+0x12c>)
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4935      	ldr	r1, [pc, #212]	@ (8002340 <HAL_ETH_Init+0x12c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002270:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_ETH_Init+0x12c>)
 8002272:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800228a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800228c:	f7ff fe2c 	bl	8001ee8 <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002292:	e011      	b.n	80022b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002294:	f7ff fe28 	bl	8001ee8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022a2:	d909      	bls.n	80022b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	22e0      	movs	r2, #224	@ 0xe0
 80022b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e03d      	b.n	8002334 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e4      	bne.n	8002294 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 ff5c 	bl	8003188 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f001 f807 	bl	80032e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 f85d 	bl	8003396 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 ffc5 	bl	8003274 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80022f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <HAL_ETH_Init+0x130>)
 8002308:	430b      	orrs	r3, r1
 800230a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800231e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2210      	movs	r2, #16
 800232e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	40013800 	.word	0x40013800
 8002344:	00020060 	.word	0x00020060

08002348 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002356:	2b10      	cmp	r3, #16
 8002358:	d15f      	bne.n	800241a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9f6 	bl	8002760 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff fdbf 	bl	8001f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800239c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023a0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023b8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fd80 	bl	8002ec0 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0208 	orr.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff fd91 	bl	8001f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0204 	orr.w	r2, r2, #4
 80023f4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <HAL_ETH_Start_IT+0xdc>)
 8002406:	430b      	orrs	r3, r1
 8002408:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800240c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2240      	movs	r2, #64	@ 0x40
 8002412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
  }
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	0001a0c1 	.word	0x0001a0c1

08002428 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002436:	2b40      	cmp	r3, #64	@ 0x40
 8002438:	d16e      	bne.n	8002518 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800244a:	69d9      	ldr	r1, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <HAL_ETH_Stop_IT+0xfc>)
 8002452:	400b      	ands	r3, r1
 8002454:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002458:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800246c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002470:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	f023 0302 	bic.w	r3, r3, #2
 8002484:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002488:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0204 	bic.w	r2, r2, #4
 8002498:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7ff fd2c 	bl	8001f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fd05 	bl	8002ec0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0208 	bic.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7ff fd16 	bl	8001f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e00e      	b.n	8002500 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	3212      	adds	r2, #18
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d9ed      	bls.n	80024e2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2210      	movs	r2, #16
 8002510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	fffe5f3e 	.word	0xfffe5f3e

08002528 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e045      	b.n	80025d8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002552:	2b40      	cmp	r3, #64	@ 0x40
 8002554:	d13f      	bne.n	80025d6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800255e:	2201      	movs	r2, #1
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 ff86 	bl	8003474 <ETH_Prepare_Tx_Descriptors>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002574:	f043 0202 	orr.w	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e02a      	b.n	80025d8 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002582:	f3bf 8f4f 	dsb	sy
}
 8002586:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	2b03      	cmp	r3, #3
 8002598:	d904      	bls.n	80025a4 <HAL_ETH_Transmit_IT+0x7c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	1f1a      	subs	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025be:	461a      	mov	r2, r3
 80025c0:	2304      	movs	r3, #4
 80025c2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	461a      	mov	r2, r3
 80025ce:	2300      	movs	r3, #0
 80025d0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0a4      	b.n	8002756 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002612:	2b40      	cmp	r3, #64	@ 0x40
 8002614:	d001      	beq.n	800261a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e09d      	b.n	8002756 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	3212      	adds	r2, #18
 8002626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002630:	f1c3 0304 	rsb	r3, r3, #4
 8002634:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002636:	e066      	b.n	8002706 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <HAL_ETH_ReadData+0x88>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03c      	beq.n	80026e2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800268a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80026a0:	2301      	movs	r3, #1
 80026a2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f004 fd13 	bl	80070ec <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	441a      	add	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2200      	movs	r2, #0
 80026e0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d902      	bls.n	80026f4 <HAL_ETH_ReadData+0x114>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b04      	subs	r3, #4
 80026f2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	3212      	adds	r2, #18
 80026fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3301      	adds	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800270a:	2b00      	cmp	r3, #0
 800270c:	db06      	blt.n	800271c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	429a      	cmp	r2, r3
 8002714:	d202      	bcs.n	800271c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d08d      	beq.n	8002638 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	441a      	add	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f815 	bl	8002760 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800276c:	2301      	movs	r3, #1
 800276e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002774:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	3212      	adds	r2, #18
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002786:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002788:	e042      	b.n	8002810 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d112      	bne.n	80027b8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fc78 	bl	800708c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	74fb      	strb	r3, [r7, #19]
 80027a6:	e007      	b.n	80027b8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	461a      	mov	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	461a      	mov	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	4b26      	ldr	r3, [pc, #152]	@ (8002864 <ETH_UpdateDescriptor+0x104>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6053      	str	r3, [r2, #4]
 80027d2:	e005      	b.n	80027e0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d902      	bls.n	80027fe <ETH_UpdateDescriptor+0x9e>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	3b04      	subs	r3, #4
 80027fc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	3212      	adds	r2, #18
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	617b      	str	r3, [r7, #20]
      desccount--;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3b01      	subs	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <ETH_UpdateDescriptor+0xbc>
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1b6      	bne.n	800278a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	429a      	cmp	r2, r3
 8002824:	d01a      	beq.n	800285c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3303      	adds	r3, #3
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002830:	f3bf 8f5f 	dmb	sy
}
 8002834:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6919      	ldr	r1, [r3, #16]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	18ca      	adds	r2, r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	80004000 	.word	0x80004000

08002868 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3318      	adds	r3, #24
 8002874:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002886:	e047      	b.n	8002918 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002888:	2301      	movs	r3, #1
 800288a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3b01      	subs	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3304      	adds	r3, #4
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	3301      	adds	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d902      	bls.n	80028b4 <HAL_ETH_ReleaseTxPacket+0x4c>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	3b04      	subs	r3, #4
 80028b2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db1f      	blt.n	8002914 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	3304      	adds	r3, #4
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fc45 	bl	8007170 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3304      	adds	r3, #4
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3301      	adds	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d902      	bls.n	8002906 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3b04      	subs	r3, #4
 8002904:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002912:	e001      	b.n	8002918 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_ETH_ReleaseTxPacket+0xbc>
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1b1      	bne.n	8002888 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002958:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_ETH_IRQHandler+0x158>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <HAL_ETH_IRQHandler+0x56>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297a:	461a      	mov	r2, r3
 800297c:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_ETH_IRQHandler+0x15c>)
 800297e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f003 fefb 	bl	800677c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00f      	beq.n	80029b0 <HAL_ETH_IRQHandler+0x80>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a2:	461a      	mov	r2, r3
 80029a4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80029a8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f003 fef6 	bl	800679c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d042      	beq.n	8002a40 <HAL_ETH_IRQHandler+0x110>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03d      	beq.n	8002a40 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01a      	beq.n	8002a14 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_ETH_IRQHandler+0x160>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a08:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	22e0      	movs	r2, #224	@ 0xe0
 8002a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002a12:	e012      	b.n	8002a3a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002a22:	4013      	ands	r3, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a32:	461a      	mov	r2, r3
 8002a34:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002a38:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f003 febe 	bl	80067bc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f81a 	bl	8002a94 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_ETH_IRQHandler+0x158>)
 8002a74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a78:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f814 	bl	8002aa8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40013c00 	.word	0x40013c00
 8002a8c:	00010040 	.word	0x00010040
 8002a90:	007e2000 	.word	0x007e2000

08002a94 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 031c 	and.w	r3, r3, #28
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	02db      	lsls	r3, r3, #11
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0302 	bic.w	r3, r3, #2
 8002afa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002b0c:	f7ff f9ec 	bl	8001ee8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b12:	e00d      	b.n	8002b30 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002b14:	f7ff f9e8 	bl	8001ee8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b22:	d301      	bcc.n	8002b28 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e010      	b.n	8002b4a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ec      	bne.n	8002b14 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 031c 	and.w	r3, r3, #28
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	02db      	lsls	r3, r3, #11
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	019b      	lsls	r3, r3, #6
 8002b80:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bac:	f7ff f99c 	bl	8001ee8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bb2:	e00d      	b.n	8002bd0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002bb4:	f7ff f998 	bl	8001ee8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc2:	d301      	bcc.n	8002bc8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e009      	b.n	8002bdc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ec      	bne.n	8002bb4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0e6      	b.n	8002dc6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00b      	b.n	8002dfe <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d105      	bne.n	8002dfc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f88a 	bl	8002f0c <ETH_SetMACConfig>

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 031c 	bic.w	r3, r3, #28
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e20:	f001 fc6e 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8002e24:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_ETH_SetMDIOClockRange+0x74>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d804      	bhi.n	8002e38 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e019      	b.n	8002e6c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d204      	bcs.n	8002e4a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f043 030c 	orr.w	r3, r3, #12
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e010      	b.n	8002e6c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d90c      	bls.n	8002e6c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d804      	bhi.n	8002e64 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e003      	b.n	8002e6c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f043 0310 	orr.w	r3, r3, #16
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	611a      	str	r2, [r3, #16]
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	02160ebf 	.word	0x02160ebf
 8002e80:	03938700 	.word	0x03938700
 8002e84:	05f5e0ff 	.word	0x05f5e0ff
 8002e88:	08f0d17f 	.word	0x08f0d17f

08002e8c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ede:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ee2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f7ff f805 	bl	8001f00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f00:	6193      	str	r3, [r2, #24]
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4b53      	ldr	r3, [pc, #332]	@ (8003070 <ETH_SetMACConfig+0x164>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	7b9b      	ldrb	r3, [r3, #14]
 8002f2a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	7c12      	ldrb	r2, [r2, #16]
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	d102      	bne.n	8002f3a <ETH_SetMACConfig+0x2e>
 8002f34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f38:	e000      	b.n	8002f3c <ETH_SetMACConfig+0x30>
 8002f3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	7c52      	ldrb	r2, [r2, #17]
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	d102      	bne.n	8002f4c <ETH_SetMACConfig+0x40>
 8002f46:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f4a:	e000      	b.n	8002f4e <ETH_SetMACConfig+0x42>
 8002f4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	7fdb      	ldrb	r3, [r3, #31]
 8002f5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	7f92      	ldrb	r2, [r2, #30]
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d102      	bne.n	8002f72 <ETH_SetMACConfig+0x66>
 8002f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f70:	e000      	b.n	8002f74 <ETH_SetMACConfig+0x68>
 8002f72:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
 8002f7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	791b      	ldrb	r3, [r3, #4]
 8002f88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d102      	bne.n	8002f9c <ETH_SetMACConfig+0x90>
 8002f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f9a:	e000      	b.n	8002f9e <ETH_SetMACConfig+0x92>
 8002f9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	7bdb      	ldrb	r3, [r3, #15]
 8002fa4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002fa6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fb4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f7fe ff96 	bl	8001f00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002fea:	4013      	ands	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002ffa:	2a00      	cmp	r2, #0
 8002ffc:	d101      	bne.n	8003002 <ETH_SetMACConfig+0xf6>
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	e000      	b.n	8003004 <ETH_SetMACConfig+0xf8>
 8003002:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003004:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800300a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003012:	2a01      	cmp	r2, #1
 8003014:	d101      	bne.n	800301a <ETH_SetMACConfig+0x10e>
 8003016:	2208      	movs	r2, #8
 8003018:	e000      	b.n	800301c <ETH_SetMACConfig+0x110>
 800301a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800301c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003024:	2a01      	cmp	r2, #1
 8003026:	d101      	bne.n	800302c <ETH_SetMACConfig+0x120>
 8003028:	2204      	movs	r2, #4
 800302a:	e000      	b.n	800302e <ETH_SetMACConfig+0x122>
 800302c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800302e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003036:	2a01      	cmp	r2, #1
 8003038:	d101      	bne.n	800303e <ETH_SetMACConfig+0x132>
 800303a:	2202      	movs	r2, #2
 800303c:	e000      	b.n	8003040 <ETH_SetMACConfig+0x134>
 800303e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003040:	4313      	orrs	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003058:	2001      	movs	r0, #1
 800305a:	f7fe ff51 	bl	8001f00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	fd20810f 	.word	0xfd20810f

08003074 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4b3d      	ldr	r3, [pc, #244]	@ (8003184 <ETH_SetDMAConfig+0x110>)
 800308e:	4013      	ands	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	7b1b      	ldrb	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <ETH_SetDMAConfig+0x2c>
 800309a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800309e:	e000      	b.n	80030a2 <ETH_SetDMAConfig+0x2e>
 80030a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	7b5b      	ldrb	r3, [r3, #13]
 80030a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	7f52      	ldrb	r2, [r2, #29]
 80030ae:	2a00      	cmp	r2, #0
 80030b0:	d102      	bne.n	80030b8 <ETH_SetDMAConfig+0x44>
 80030b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030b6:	e000      	b.n	80030ba <ETH_SetDMAConfig+0x46>
 80030b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	7b9b      	ldrb	r3, [r3, #14]
 80030c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	7f1b      	ldrb	r3, [r3, #28]
 80030ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	7f9b      	ldrb	r3, [r3, #30]
 80030d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030e8:	4313      	orrs	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f8:	461a      	mov	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800310a:	2001      	movs	r0, #1
 800310c:	f7fe fef8 	bl	8001f00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003118:	461a      	mov	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003128:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800312e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003134:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800313c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800313e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003146:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800314c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800315a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003168:	2001      	movs	r0, #1
 800316a:	f7fe fec9 	bl	8001f00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6013      	str	r3, [r2, #0]
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	f8de3f23 	.word	0xf8de3f23

08003188 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b0a6      	sub	sp, #152	@ 0x98
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800319c:	2300      	movs	r3, #0
 800319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031ca:	2300      	movs	r3, #0
 80031cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003202:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fe7f 	bl	8002f0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003212:	2301      	movs	r3, #1
 8003214:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800321c:	2301      	movs	r3, #1
 800321e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003230:	2300      	movs	r3, #0
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800323e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003242:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003244:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003248:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800324a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800324e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff05 	bl	8003074 <ETH_SetDMAConfig>
}
 800326a:	bf00      	nop
 800326c:	3798      	adds	r7, #152	@ 0x98
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3305      	adds	r3, #5
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	3204      	adds	r2, #4
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <ETH_MACAddressConfig+0x68>)
 8003296:	4413      	add	r3, r2
 8003298:	461a      	mov	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3303      	adds	r3, #3
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	061a      	lsls	r2, r3, #24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3302      	adds	r3, #2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3301      	adds	r3, #1
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	4313      	orrs	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <ETH_MACAddressConfig+0x6c>)
 80032c6:	4413      	add	r3, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6013      	str	r3, [r2, #0]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40028040 	.word	0x40028040
 80032e0:	40028044 	.word	0x40028044

080032e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e03e      	b.n	8003370 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	3206      	adds	r2, #6
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d80c      	bhi.n	8003354 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e004      	b.n	800335e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d9bd      	bls.n	80032f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003388:	611a      	str	r2, [r3, #16]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e048      	b.n	8003436 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6919      	ldr	r1, [r3, #16]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	3212      	adds	r2, #18
 8003402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d80c      	bhi.n	8003426 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	461a      	mov	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	e004      	b.n	8003430 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d9b3      	bls.n	80033a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003466:	60da      	str	r2, [r3, #12]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003474:	b480      	push	{r7}
 8003476:	b091      	sub	sp, #68	@ 0x44
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3318      	adds	r3, #24
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800349a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034b6:	d007      	beq.n	80034c8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	3304      	adds	r3, #4
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	e111      	b.n	80036f0 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80034cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ce:	3301      	adds	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	4b86      	ldr	r3, [pc, #536]	@ (80036fc <ETH_Prepare_Tx_Descriptors+0x288>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e6:	6852      	ldr	r2, [r2, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	431a      	orrs	r2, r3
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	431a      	orrs	r2, r3
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800354e:	e082      	b.n	8003656 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e005      	b.n	800357c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800357c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357e:	3301      	adds	r3, #1
 8003580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003584:	2b03      	cmp	r3, #3
 8003586:	d902      	bls.n	800358e <ETH_Prepare_Tx_Descriptors+0x11a>
 8003588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358a:	3b04      	subs	r3, #4
 800358c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003596:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035a4:	d007      	beq.n	80035b6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80035a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035aa:	3304      	adds	r3, #4
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d029      	beq.n	800360a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035c8:	e019      	b.n	80035fe <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80035ca:	f3bf 8f5f 	dmb	sy
}
 80035ce:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80035dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035de:	3301      	adds	r3, #1
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d902      	bls.n	80035ee <ETH_Prepare_Tx_Descriptors+0x17a>
 80035e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ea:	3b04      	subs	r3, #4
 80035ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80035f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fa:	3301      	adds	r3, #1
 80035fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	429a      	cmp	r2, r3
 8003604:	d3e1      	bcc.n	80035ca <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003606:	2302      	movs	r3, #2
 8003608:	e072      	b.n	80036f0 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003618:	3301      	adds	r3, #1
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4b32      	ldr	r3, [pc, #200]	@ (80036fc <ETH_Prepare_Tx_Descriptors+0x288>)
 8003632:	4013      	ands	r3, r2
 8003634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003636:	6852      	ldr	r2, [r2, #4]
 8003638:	431a      	orrs	r2, r3
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	3301      	adds	r3, #1
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003644:	f3bf 8f5f 	dmb	sy
}
 8003648:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f47f af78 	bne.w	8003550 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800366e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e005      	b.n	8003680 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	6a3a      	ldr	r2, [r7, #32]
 8003690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003694:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003696:	f3bf 8f5f 	dmb	sy
}
 800369a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b0:	3304      	adds	r3, #4
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036bc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	613b      	str	r3, [r7, #16]
  return(result);
 80036c4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	2301      	movs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	4413      	add	r3, r2
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3744      	adds	r7, #68	@ 0x44
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	ffffe000 	.word	0xffffe000

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e175      	b.n	8003a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	f040 8164 	bne.w	8003a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d005      	beq.n	8003756 <HAL_GPIO_Init+0x56>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d130      	bne.n	80037b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378c:	2201      	movs	r2, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0201 	and.w	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d017      	beq.n	80037f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d123      	bne.n	8003848 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80be 	beq.w	8003a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	4a65      	ldr	r2, [pc, #404]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
 8003896:	4b63      	ldr	r3, [pc, #396]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038a2:	4a61      	ldr	r2, [pc, #388]	@ (8003a28 <HAL_GPIO_Init+0x328>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a58      	ldr	r2, [pc, #352]	@ (8003a2c <HAL_GPIO_Init+0x32c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d037      	beq.n	800393e <HAL_GPIO_Init+0x23e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a57      	ldr	r2, [pc, #348]	@ (8003a30 <HAL_GPIO_Init+0x330>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_GPIO_Init+0x23a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a56      	ldr	r2, [pc, #344]	@ (8003a34 <HAL_GPIO_Init+0x334>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <HAL_GPIO_Init+0x236>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a55      	ldr	r2, [pc, #340]	@ (8003a38 <HAL_GPIO_Init+0x338>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d025      	beq.n	8003932 <HAL_GPIO_Init+0x232>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a54      	ldr	r2, [pc, #336]	@ (8003a3c <HAL_GPIO_Init+0x33c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <HAL_GPIO_Init+0x22e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a53      	ldr	r2, [pc, #332]	@ (8003a40 <HAL_GPIO_Init+0x340>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_GPIO_Init+0x22a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a52      	ldr	r2, [pc, #328]	@ (8003a44 <HAL_GPIO_Init+0x344>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x226>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a51      	ldr	r2, [pc, #324]	@ (8003a48 <HAL_GPIO_Init+0x348>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x222>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a50      	ldr	r2, [pc, #320]	@ (8003a4c <HAL_GPIO_Init+0x34c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x21e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4f      	ldr	r2, [pc, #316]	@ (8003a50 <HAL_GPIO_Init+0x350>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x21a>
 8003916:	2309      	movs	r3, #9
 8003918:	e012      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800391a:	230a      	movs	r3, #10
 800391c:	e010      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800391e:	2308      	movs	r3, #8
 8003920:	e00e      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003922:	2307      	movs	r3, #7
 8003924:	e00c      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003926:	2306      	movs	r3, #6
 8003928:	e00a      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800392a:	2305      	movs	r3, #5
 800392c:	e008      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800392e:	2304      	movs	r3, #4
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003932:	2303      	movs	r3, #3
 8003934:	e004      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003936:	2302      	movs	r3, #2
 8003938:	e002      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800393e:	2300      	movs	r3, #0
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f002 0203 	and.w	r2, r2, #3
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	4093      	lsls	r3, r2
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003950:	4935      	ldr	r1, [pc, #212]	@ (8003a28 <HAL_GPIO_Init+0x328>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	3302      	adds	r3, #2
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800395e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003982:	4a34      	ldr	r2, [pc, #208]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003988:	4b32      	ldr	r3, [pc, #200]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039ac:	4a29      	ldr	r2, [pc, #164]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039b2:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a00:	4a14      	ldr	r2, [pc, #80]	@ (8003a54 <HAL_GPIO_Init+0x354>)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	f67f ae86 	bls.w	8003720 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3724      	adds	r7, #36	@ 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40021c00 	.word	0x40021c00
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40022400 	.word	0x40022400
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af02      	add	r7, sp, #8
 8003a90:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e108      	b.n	8003cae <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe f83c 	bl	8001b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2203      	movs	r2, #3
 8003ac0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aca:	d102      	bne.n	8003ad2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fb20 	bl	800611c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7c1a      	ldrb	r2, [r3, #16]
 8003ae4:	f88d 2000 	strb.w	r2, [sp]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aec:	f002 fabc 	bl	8006068 <USB_CoreInit>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0d5      	b.n	8003cae <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f002 fb18 	bl	800613e <USB_SetCurrentMode>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0c6      	b.n	8003cae <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e04a      	b.n	8003bbc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3315      	adds	r3, #21
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3314      	adds	r3, #20
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	b298      	uxth	r0, r3
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	332e      	adds	r3, #46	@ 0x2e
 8003b62:	4602      	mov	r2, r0
 8003b64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3318      	adds	r3, #24
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	331c      	adds	r3, #28
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ba2:	7bfa      	ldrb	r2, [r7, #15]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3324      	adds	r3, #36	@ 0x24
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	791b      	ldrb	r3, [r3, #4]
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3af      	bcc.n	8003b26 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	e044      	b.n	8003c56 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	3301      	adds	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	791b      	ldrb	r3, [r3, #4]
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d3b5      	bcc.n	8003bcc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7c1a      	ldrb	r2, [r3, #16]
 8003c68:	f88d 2000 	strb.w	r2, [sp]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c70:	f002 fab2 	bl	80061d8 <USB_DevInit>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e013      	b.n	8003cae <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7b1b      	ldrb	r3, [r3, #12]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f80b 	bl	8003cb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 fc6d 	bl	8006586 <USB_DevDisconnect>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ce6:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <HAL_PCDEx_ActivateLPM+0x44>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	10000003 	.word	0x10000003

08003d00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d36:	4b20      	ldr	r3, [pc, #128]	@ (8003db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4e:	f7fe f8cb 	bl	8001ee8 <HAL_GetTick>
 8003d52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d54:	e009      	b.n	8003d6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d56:	f7fe f8c7 	bl	8001ee8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d64:	d901      	bls.n	8003d6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e022      	b.n	8003db0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d76:	d1ee      	bne.n	8003d56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d78:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7fe f8b0 	bl	8001ee8 <HAL_GetTick>
 8003d88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d8a:	e009      	b.n	8003da0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d8c:	f7fe f8ac 	bl	8001ee8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d9a:	d901      	bls.n	8003da0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e007      	b.n	8003db0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003da0:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dac:	d1ee      	bne.n	8003d8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40007000 	.word	0x40007000

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e29b      	b.n	800430e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8087 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de4:	4b96      	ldr	r3, [pc, #600]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d00c      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df0:	4b93      	ldr	r3, [pc, #588]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d112      	bne.n	8003e22 <HAL_RCC_OscConfig+0x62>
 8003dfc:	4b90      	ldr	r3, [pc, #576]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e08:	d10b      	bne.n	8003e22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d06c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x130>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d168      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e275      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2a:	d106      	bne.n	8003e3a <HAL_RCC_OscConfig+0x7a>
 8003e2c:	4b84      	ldr	r3, [pc, #528]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a83      	ldr	r2, [pc, #524]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	e02e      	b.n	8003e98 <HAL_RCC_OscConfig+0xd8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x9c>
 8003e42:	4b7f      	ldr	r3, [pc, #508]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7e      	ldr	r2, [pc, #504]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a7b      	ldr	r2, [pc, #492]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e01d      	b.n	8003e98 <HAL_RCC_OscConfig+0xd8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a75      	ldr	r2, [pc, #468]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b73      	ldr	r3, [pc, #460]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a72      	ldr	r2, [pc, #456]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0xd8>
 8003e80:	4b6f      	ldr	r3, [pc, #444]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6e      	ldr	r2, [pc, #440]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a6b      	ldr	r2, [pc, #428]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f822 	bl	8001ee8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe f81e 	bl	8001ee8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e229      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b61      	ldr	r3, [pc, #388]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe f80e 	bl	8001ee8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fe f80a 	bl	8001ee8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	@ 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e215      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	4b57      	ldr	r3, [pc, #348]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x110>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d069      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003efe:	4b50      	ldr	r3, [pc, #320]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d11c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x190>
 8003f16:	4b4a      	ldr	r3, [pc, #296]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d116      	bne.n	8003f50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f22:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_RCC_OscConfig+0x17a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e1e9      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3a:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	493d      	ldr	r1, [pc, #244]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	e040      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b39      	ldr	r3, [pc, #228]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a38      	ldr	r2, [pc, #224]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd ffc0 	bl	8001ee8 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd ffbc 	bl	8001ee8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1c7      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7e:	4b30      	ldr	r3, [pc, #192]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4929      	ldr	r1, [pc, #164]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
 8003f9e:	e018      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd ff9c 	bl	8001ee8 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fd ff98 	bl	8001ee8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e1a3      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d038      	beq.n	8004050 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d019      	beq.n	800401a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe6:	4b16      	ldr	r3, [pc, #88]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fea:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fd ff79 	bl	8001ee8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffa:	f7fd ff75 	bl	8001ee8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e180      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x23a>
 8004018:	e01a      	b.n	8004050 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401a:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 800401c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401e:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <HAL_RCC_OscConfig+0x280>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd ff5f 	bl	8001ee8 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fd ff5b 	bl	8001ee8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d903      	bls.n	8004044 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e166      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
 8004040:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	4b92      	ldr	r3, [pc, #584]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ee      	bne.n	800402e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a4 	beq.w	80041a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800405e:	4b8c      	ldr	r3, [pc, #560]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4b89      	ldr	r3, [pc, #548]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	4a88      	ldr	r2, [pc, #544]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004074:	6413      	str	r3, [r2, #64]	@ 0x40
 8004076:	4b86      	ldr	r3, [pc, #536]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004086:	4b83      	ldr	r3, [pc, #524]	@ (8004294 <HAL_RCC_OscConfig+0x4d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d118      	bne.n	80040c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004092:	4b80      	ldr	r3, [pc, #512]	@ (8004294 <HAL_RCC_OscConfig+0x4d4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7f      	ldr	r2, [pc, #508]	@ (8004294 <HAL_RCC_OscConfig+0x4d4>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800409c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409e:	f7fd ff23 	bl	8001ee8 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a6:	f7fd ff1f 	bl	8001ee8 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b64      	cmp	r3, #100	@ 0x64
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e12a      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b8:	4b76      	ldr	r3, [pc, #472]	@ (8004294 <HAL_RCC_OscConfig+0x4d4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x31a>
 80040cc:	4b70      	ldr	r3, [pc, #448]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a6f      	ldr	r2, [pc, #444]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d8:	e02d      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x33c>
 80040e2:	4b6b      	ldr	r3, [pc, #428]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ee:	4b68      	ldr	r3, [pc, #416]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	4a67      	ldr	r2, [pc, #412]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040fa:	e01c      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d10c      	bne.n	800411e <HAL_RCC_OscConfig+0x35e>
 8004104:	4b62      	ldr	r3, [pc, #392]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004108:	4a61      	ldr	r2, [pc, #388]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800410a:	f043 0304 	orr.w	r3, r3, #4
 800410e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004110:	4b5f      	ldr	r3, [pc, #380]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004114:	4a5e      	ldr	r2, [pc, #376]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6713      	str	r3, [r2, #112]	@ 0x70
 800411c:	e00b      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
 800411e:	4b5c      	ldr	r3, [pc, #368]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	4a5b      	ldr	r2, [pc, #364]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70
 800412a:	4b59      	ldr	r3, [pc, #356]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	4a58      	ldr	r2, [pc, #352]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d015      	beq.n	800416a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd fed3 	bl	8001ee8 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fd fecf 	bl	8001ee8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0d8      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ee      	beq.n	8004146 <HAL_RCC_OscConfig+0x386>
 8004168:	e014      	b.n	8004194 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fd febd 	bl	8001ee8 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fd feb9 	bl	8001ee8 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0c2      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004188:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ee      	bne.n	8004172 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d105      	bne.n	80041a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419a:	4b3d      	ldr	r3, [pc, #244]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	4a3c      	ldr	r2, [pc, #240]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80041a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80ae 	beq.w	800430c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041b0:	4b37      	ldr	r3, [pc, #220]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d06d      	beq.n	8004298 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d14b      	bne.n	800425c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b32      	ldr	r3, [pc, #200]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a31      	ldr	r2, [pc, #196]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fe8a 	bl	8001ee8 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd fe86 	bl	8001ee8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e091      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	071b      	lsls	r3, r3, #28
 8004222:	491b      	ldr	r1, [pc, #108]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004228:	4b19      	ldr	r3, [pc, #100]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a18      	ldr	r2, [pc, #96]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800422e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fe58 	bl	8001ee8 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423c:	f7fd fe54 	bl	8001ee8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e05f      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x47c>
 800425a:	e057      	b.n	800430c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0b      	ldr	r2, [pc, #44]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fe3e 	bl	8001ee8 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd fe3a 	bl	8001ee8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e045      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCC_OscConfig+0x4d0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x4b0>
 800428e:	e03d      	b.n	800430c <HAL_RCC_OscConfig+0x54c>
 8004290:	40023800 	.word	0x40023800
 8004294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004298:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <HAL_RCC_OscConfig+0x558>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d030      	beq.n	8004308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d129      	bne.n	8004308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d122      	bne.n	8004308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d119      	bne.n	8004308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	3b01      	subs	r3, #1
 80042e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d10f      	bne.n	8004308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0d0      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b6a      	ldr	r3, [pc, #424]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b67      	ldr	r3, [pc, #412]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	4965      	ldr	r1, [pc, #404]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b63      	ldr	r3, [pc, #396]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0b8      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800437c:	4b59      	ldr	r3, [pc, #356]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a58      	ldr	r2, [pc, #352]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004382:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004394:	4b53      	ldr	r3, [pc, #332]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a52      	ldr	r2, [pc, #328]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800439e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a0:	4b50      	ldr	r3, [pc, #320]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	494d      	ldr	r1, [pc, #308]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d040      	beq.n	8004440 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d115      	bne.n	80043fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e073      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b3d      	ldr	r3, [pc, #244]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06b      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4936      	ldr	r1, [pc, #216]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fd fd6a 	bl	8001ee8 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fd fd66 	bl	8001ee8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e053      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b2d      	ldr	r3, [pc, #180]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d210      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4922      	ldr	r1, [pc, #136]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b20      	ldr	r3, [pc, #128]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e032      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4916      	ldr	r1, [pc, #88]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800449a:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	490e      	ldr	r1, [pc, #56]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ae:	f000 f821 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	490a      	ldr	r1, [pc, #40]	@ (80044e8 <HAL_RCC_ClockConfig+0x1cc>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	4a09      	ldr	r2, [pc, #36]	@ (80044ec <HAL_RCC_ClockConfig+0x1d0>)
 80044c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_ClockConfig+0x1d4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd f8d4 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00
 80044e4:	40023800 	.word	0x40023800
 80044e8:	0801c2bc 	.word	0x0801c2bc
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000004 	.word	0x20000004

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b094      	sub	sp, #80	@ 0x50
 80044fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004500:	2300      	movs	r3, #0
 8004502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004504:	2300      	movs	r3, #0
 8004506:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800450c:	4b79      	ldr	r3, [pc, #484]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d00d      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x40>
 8004518:	2b08      	cmp	r3, #8
 800451a:	f200 80e1 	bhi.w	80046e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 8004522:	2b04      	cmp	r3, #4
 8004524:	d003      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x3a>
 8004526:	e0db      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b73      	ldr	r3, [pc, #460]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452c:	e0db      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452e:	4b73      	ldr	r3, [pc, #460]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004530:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004532:	e0d8      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4b6f      	ldr	r3, [pc, #444]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800453c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800453e:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b6a      	ldr	r3, [pc, #424]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004554:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	633b      	str	r3, [r7, #48]	@ 0x30
 800455e:	2300      	movs	r3, #0
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
 8004562:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	f04f 0000 	mov.w	r0, #0
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	0159      	lsls	r1, r3, #5
 8004574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004578:	0150      	lsls	r0, r2, #5
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4621      	mov	r1, r4
 8004580:	1a51      	subs	r1, r2, r1
 8004582:	6139      	str	r1, [r7, #16]
 8004584:	4629      	mov	r1, r5
 8004586:	eb63 0301 	sbc.w	r3, r3, r1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004598:	4659      	mov	r1, fp
 800459a:	018b      	lsls	r3, r1, #6
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045a2:	4651      	mov	r1, sl
 80045a4:	018a      	lsls	r2, r1, #6
 80045a6:	4651      	mov	r1, sl
 80045a8:	ebb2 0801 	subs.w	r8, r2, r1
 80045ac:	4659      	mov	r1, fp
 80045ae:	eb63 0901 	sbc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	462b      	mov	r3, r5
 80045d4:	eb49 0303 	adc.w	r3, r9, r3
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045e6:	4629      	mov	r1, r5
 80045e8:	024b      	lsls	r3, r1, #9
 80045ea:	4621      	mov	r1, r4
 80045ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045f0:	4621      	mov	r1, r4
 80045f2:	024a      	lsls	r2, r1, #9
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045fa:	2200      	movs	r2, #0
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004604:	f7fb fe6c 	bl	80002e0 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4613      	mov	r3, r2
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004610:	e058      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004612:	4b38      	ldr	r3, [pc, #224]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	2200      	movs	r2, #0
 800461a:	4618      	mov	r0, r3
 800461c:	4611      	mov	r1, r2
 800461e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
 8004628:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	f04f 0000 	mov.w	r0, #0
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	0159      	lsls	r1, r3, #5
 800463a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800463e:	0150      	lsls	r0, r2, #5
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4641      	mov	r1, r8
 8004646:	ebb2 0a01 	subs.w	sl, r2, r1
 800464a:	4649      	mov	r1, r9
 800464c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800465c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004660:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004664:	ebb2 040a 	subs.w	r4, r2, sl
 8004668:	eb63 050b 	sbc.w	r5, r3, fp
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	00eb      	lsls	r3, r5, #3
 8004676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467a:	00e2      	lsls	r2, r4, #3
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4643      	mov	r3, r8
 8004682:	18e3      	adds	r3, r4, r3
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	464b      	mov	r3, r9
 8004688:	eb45 0303 	adc.w	r3, r5, r3
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800469a:	4629      	mov	r1, r5
 800469c:	028b      	lsls	r3, r1, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046a4:	4621      	mov	r1, r4
 80046a6:	028a      	lsls	r2, r1, #10
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ae:	2200      	movs	r2, #0
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	61fa      	str	r2, [r7, #28]
 80046b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b8:	f7fb fe12 	bl	80002e0 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	3301      	adds	r3, #1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046de:	e002      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3750      	adds	r7, #80	@ 0x50
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	007a1200 	.word	0x007a1200

08004700 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800471c:	f7ff fff0 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0a9b      	lsrs	r3, r3, #10
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	@ (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	0801c2cc 	.word	0x0801c2cc

08004740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004744:	f7ff ffdc 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0b5b      	lsrs	r3, r3, #13
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	@ (8004764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	0801c2cc 	.word	0x0801c2cc

08004768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	220f      	movs	r2, #15
 8004776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004778:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_RCC_GetClockConfig+0x5c>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0203 	and.w	r2, r3, #3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004784:	4b0f      	ldr	r3, [pc, #60]	@ (80047c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004790:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800479c:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <HAL_RCC_GetClockConfig+0x5c>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <HAL_RCC_GetClockConfig+0x60>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40023c00 	.word	0x40023c00

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047f4:	4b69      	ldr	r3, [pc, #420]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a68      	ldr	r2, [pc, #416]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047fe:	6093      	str	r3, [r2, #8]
 8004800:	4b66      	ldr	r3, [pc, #408]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004808:	4964      	ldr	r1, [pc, #400]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004826:	4b5d      	ldr	r3, [pc, #372]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800482c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	4959      	ldr	r1, [pc, #356]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004846:	2301      	movs	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d017      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004862:	4b4e      	ldr	r3, [pc, #312]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004868:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	494a      	ldr	r1, [pc, #296]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004880:	d101      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004882:	2301      	movs	r3, #1
 8004884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 808b 	beq.w	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	4a39      	ldr	r2, [pc, #228]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80048bc:	4b37      	ldr	r3, [pc, #220]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048c8:	4b35      	ldr	r3, [pc, #212]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a34      	ldr	r2, [pc, #208]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d4:	f7fd fb08 	bl	8001ee8 <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048dc:	f7fd fb04 	bl	8001ee8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	@ 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e38f      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048ee:	4b2c      	ldr	r3, [pc, #176]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048fa:	4b28      	ldr	r3, [pc, #160]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d035      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d02e      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004918:	4b20      	ldr	r3, [pc, #128]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004920:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004922:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800492e:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004932:	4a1a      	ldr	r2, [pc, #104]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004938:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800493a:	4a18      	ldr	r2, [pc, #96]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004940:	4b16      	ldr	r3, [pc, #88]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d114      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd facc 	bl	8001ee8 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	e00a      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004954:	f7fd fac8 	bl	8001ee8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e351      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496a:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ee      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004982:	d111      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004992:	400b      	ands	r3, r1
 8004994:	4901      	ldr	r1, [pc, #4]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
 800499a:	e00b      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800499c:	40023800 	.word	0x40023800
 80049a0:	40007000 	.word	0x40007000
 80049a4:	0ffffcff 	.word	0x0ffffcff
 80049a8:	4bac      	ldr	r3, [pc, #688]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4aab      	ldr	r2, [pc, #684]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80049b2:	6093      	str	r3, [r2, #8]
 80049b4:	4ba9      	ldr	r3, [pc, #676]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c0:	49a6      	ldr	r1, [pc, #664]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049d2:	4ba2      	ldr	r3, [pc, #648]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d8:	4aa0      	ldr	r2, [pc, #640]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049e2:	4b9e      	ldr	r3, [pc, #632]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	499b      	ldr	r1, [pc, #620]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a00:	4b96      	ldr	r3, [pc, #600]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a0e:	4993      	ldr	r1, [pc, #588]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a22:	4b8e      	ldr	r3, [pc, #568]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a30:	498a      	ldr	r1, [pc, #552]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a44:	4b85      	ldr	r3, [pc, #532]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a52:	4982      	ldr	r1, [pc, #520]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a66:	4b7d      	ldr	r3, [pc, #500]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a74:	4979      	ldr	r1, [pc, #484]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a88:	4b74      	ldr	r3, [pc, #464]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	4971      	ldr	r1, [pc, #452]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab0:	f023 020c 	bic.w	r2, r3, #12
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab8:	4968      	ldr	r1, [pc, #416]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004acc:	4b63      	ldr	r3, [pc, #396]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ada:	4960      	ldr	r1, [pc, #384]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aee:	4b5b      	ldr	r3, [pc, #364]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afc:	4957      	ldr	r1, [pc, #348]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b10:	4b52      	ldr	r3, [pc, #328]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	494f      	ldr	r1, [pc, #316]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b32:	4b4a      	ldr	r3, [pc, #296]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b40:	4946      	ldr	r1, [pc, #280]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b54:	4b41      	ldr	r3, [pc, #260]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b62:	493e      	ldr	r1, [pc, #248]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b76:	4b39      	ldr	r3, [pc, #228]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b84:	4935      	ldr	r1, [pc, #212]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b98:	4b30      	ldr	r3, [pc, #192]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba6:	492d      	ldr	r1, [pc, #180]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d011      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bba:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc8:	4924      	ldr	r1, [pc, #144]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd8:	d101      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfa:	4b18      	ldr	r3, [pc, #96]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c08:	4914      	ldr	r1, [pc, #80]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c2c:	490b      	ldr	r1, [pc, #44]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00f      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c40:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c50:	4902      	ldr	r1, [pc, #8]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c58:	e002      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	4986      	ldr	r1, [pc, #536]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c90:	4b81      	ldr	r3, [pc, #516]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c96:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca0:	497d      	ldr	r1, [pc, #500]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d006      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80d6 	beq.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cbc:	4b76      	ldr	r3, [pc, #472]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a75      	ldr	r2, [pc, #468]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc8:	f7fd f90e 	bl	8001ee8 <HAL_GetTick>
 8004ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cd0:	f7fd f90a 	bl	8001ee8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	@ 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e195      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d021      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11d      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d02:	4b65      	ldr	r3, [pc, #404]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d10:	4b61      	ldr	r3, [pc, #388]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	0e1b      	lsrs	r3, r3, #24
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	019a      	lsls	r2, r3, #6
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	061b      	lsls	r3, r3, #24
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	071b      	lsls	r3, r3, #28
 8004d36:	4958      	ldr	r1, [pc, #352]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d02e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d68:	d129      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d78:	4b47      	ldr	r3, [pc, #284]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7e:	0f1b      	lsrs	r3, r3, #28
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	493e      	ldr	r1, [pc, #248]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004da6:	4b3c      	ldr	r3, [pc, #240]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dac:	f023 021f 	bic.w	r2, r3, #31
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	3b01      	subs	r3, #1
 8004db6:	4938      	ldr	r1, [pc, #224]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01d      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dca:	4b33      	ldr	r3, [pc, #204]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dd0:	0e1b      	lsrs	r3, r3, #24
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dde:	0f1b      	lsrs	r3, r3, #28
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	019a      	lsls	r2, r3, #6
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	071b      	lsls	r3, r3, #28
 8004dfe:	4926      	ldr	r1, [pc, #152]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	019a      	lsls	r2, r3, #6
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	071b      	lsls	r3, r3, #28
 8004e2e:	491a      	ldr	r1, [pc, #104]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e36:	4b18      	ldr	r3, [pc, #96]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fd f851 	bl	8001ee8 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e4a:	f7fd f84d 	bl	8001ee8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b64      	cmp	r3, #100	@ 0x64
 8004e56:	d901      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0d8      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	f040 80ce 	bne.w	800500c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e70:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a08      	ldr	r2, [pc, #32]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f834 	bl	8001ee8 <HAL_GetTick>
 8004e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e82:	e00b      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e84:	f7fd f830 	bl	8001ee8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	@ 0x64
 8004e90:	d904      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e0bb      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea8:	d0ec      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02e      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d12a      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ed2:	4b51      	ldr	r3, [pc, #324]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	019a      	lsls	r2, r3, #6
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	4944      	ldr	r1, [pc, #272]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f0e:	4b42      	ldr	r3, [pc, #264]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	493d      	ldr	r1, [pc, #244]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d022      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3c:	d11d      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f3e:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	0e1b      	lsrs	r3, r3, #24
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f4c:	4b32      	ldr	r3, [pc, #200]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	0f1b      	lsrs	r3, r3, #28
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	019a      	lsls	r2, r3, #6
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	071b      	lsls	r3, r3, #28
 8004f72:	4929      	ldr	r1, [pc, #164]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d028      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f86:	4b24      	ldr	r3, [pc, #144]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	0e1b      	lsrs	r3, r3, #24
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f94:	4b20      	ldr	r3, [pc, #128]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	019a      	lsls	r2, r3, #6
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	431a      	orrs	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	071b      	lsls	r3, r3, #28
 8004fba:	4917      	ldr	r1, [pc, #92]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fc2:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	4911      	ldr	r1, [pc, #68]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe4:	f7fc ff80 	bl	8001ee8 <HAL_GetTick>
 8004fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fec:	f7fc ff7c 	bl	8001ee8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e007      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800500a:	d1ef      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800

0800501c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e049      	b.n	80050c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f841 	bl	80050ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 f9e8 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e054      	b.n	80051a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a26      	ldr	r2, [pc, #152]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005122:	d01d      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a22      	ldr	r2, [pc, #136]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a21      	ldr	r2, [pc, #132]	@ (80051b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1f      	ldr	r2, [pc, #124]	@ (80051bc <HAL_TIM_Base_Start_IT+0xdc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1c      	ldr	r2, [pc, #112]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x80>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1b      	ldr	r2, [pc, #108]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d115      	bne.n	800518c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	4b19      	ldr	r3, [pc, #100]	@ (80051cc <HAL_TIM_Base_Start_IT+0xec>)
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d015      	beq.n	800519e <HAL_TIM_Base_Start_IT+0xbe>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005178:	d011      	beq.n	800519e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	e008      	b.n	800519e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e000      	b.n	80051a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40001800 	.word	0x40001800
 80051cc:	00010007 	.word	0x00010007

080051d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d020      	beq.n	8005234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8e9 	bl	80053f2 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8db 	bl	80053de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8ec 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d020      	beq.n	8005280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01b      	beq.n	8005280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0204 	mvn.w	r2, #4
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8c3 	bl	80053f2 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8b5 	bl	80053de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8c6 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d020      	beq.n	80052cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0208 	mvn.w	r2, #8
 800529c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2204      	movs	r2, #4
 80052a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f89d 	bl	80053f2 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f88f 	bl	80053de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8a0 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d020      	beq.n	8005318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0210 	mvn.w	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2208      	movs	r2, #8
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f877 	bl	80053f2 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f869 	bl	80053de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f87a 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0201 	mvn.w	r2, #1
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc f960 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f913 	bl	8005590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f90b 	bl	80055a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f834 	bl	800541a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f06f 0220 	mvn.w	r2, #32
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8d3 	bl	800557c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a43      	ldr	r2, [pc, #268]	@ (8005550 <TIM_Base_SetConfig+0x120>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d013      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544e:	d00f      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a40      	ldr	r2, [pc, #256]	@ (8005554 <TIM_Base_SetConfig+0x124>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3f      	ldr	r2, [pc, #252]	@ (8005558 <TIM_Base_SetConfig+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3e      	ldr	r2, [pc, #248]	@ (800555c <TIM_Base_SetConfig+0x12c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3d      	ldr	r2, [pc, #244]	@ (8005560 <TIM_Base_SetConfig+0x130>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a32      	ldr	r2, [pc, #200]	@ (8005550 <TIM_Base_SetConfig+0x120>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d02b      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005490:	d027      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2f      	ldr	r2, [pc, #188]	@ (8005554 <TIM_Base_SetConfig+0x124>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d023      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2e      	ldr	r2, [pc, #184]	@ (8005558 <TIM_Base_SetConfig+0x128>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01f      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2d      	ldr	r2, [pc, #180]	@ (800555c <TIM_Base_SetConfig+0x12c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01b      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005560 <TIM_Base_SetConfig+0x130>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d017      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005564 <TIM_Base_SetConfig+0x134>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005568 <TIM_Base_SetConfig+0x138>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00f      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a29      	ldr	r2, [pc, #164]	@ (800556c <TIM_Base_SetConfig+0x13c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a28      	ldr	r2, [pc, #160]	@ (8005570 <TIM_Base_SetConfig+0x140>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a27      	ldr	r2, [pc, #156]	@ (8005574 <TIM_Base_SetConfig+0x144>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a26      	ldr	r2, [pc, #152]	@ (8005578 <TIM_Base_SetConfig+0x148>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a0e      	ldr	r2, [pc, #56]	@ (8005550 <TIM_Base_SetConfig+0x120>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0xf2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a10      	ldr	r2, [pc, #64]	@ (8005560 <TIM_Base_SetConfig+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d103      	bne.n	800552a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40010400 	.word	0x40010400
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800
 8005570:	40001800 	.word	0x40001800
 8005574:	40001c00 	.word	0x40001c00
 8005578:	40002000 	.word	0x40002000

0800557c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e040      	b.n	800564c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc fa1c 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	@ 0x24
 80055e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb16 	bl	8005c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8af 	bl	8005768 <UART_SetConfig>
 800560a:	4603      	mov	r3, r0
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e01b      	b.n	800564c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fb95 	bl	8005d74 <UART_CheckIdleState>
 800564a:	4603      	mov	r3, r0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	@ 0x28
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005668:	2b20      	cmp	r3, #32
 800566a:	d177      	bne.n	800575c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_UART_Transmit+0x24>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e070      	b.n	800575e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2221      	movs	r2, #33	@ 0x21
 8005688:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568a:	f7fc fc2d 	bl	8001ee8 <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x68>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056c4:	e02f      	b.n	8005726 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2180      	movs	r1, #128	@ 0x80
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fbf7 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e03b      	b.n	800575e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3302      	adds	r3, #2
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e007      	b.n	8005714 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1c9      	bne.n	80056c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2140      	movs	r1, #64	@ 0x40
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fbc1 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e005      	b.n	800575e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	e000      	b.n	800575e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4ba6      	ldr	r3, [pc, #664]	@ (8005a2c <UART_SetConfig+0x2c4>)
 8005794:	4013      	ands	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	430b      	orrs	r3, r1
 800579e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a94      	ldr	r2, [pc, #592]	@ (8005a30 <UART_SetConfig+0x2c8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d120      	bne.n	8005826 <UART_SetConfig+0xbe>
 80057e4:	4b93      	ldr	r3, [pc, #588]	@ (8005a34 <UART_SetConfig+0x2cc>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d816      	bhi.n	8005820 <UART_SetConfig+0xb8>
 80057f2:	a201      	add	r2, pc, #4	@ (adr r2, 80057f8 <UART_SetConfig+0x90>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	08005809 	.word	0x08005809
 80057fc:	08005815 	.word	0x08005815
 8005800:	0800580f 	.word	0x0800580f
 8005804:	0800581b 	.word	0x0800581b
 8005808:	2301      	movs	r3, #1
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e150      	b.n	8005ab0 <UART_SetConfig+0x348>
 800580e:	2302      	movs	r3, #2
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e14d      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005814:	2304      	movs	r3, #4
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e14a      	b.n	8005ab0 <UART_SetConfig+0x348>
 800581a:	2308      	movs	r3, #8
 800581c:	77fb      	strb	r3, [r7, #31]
 800581e:	e147      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005820:	2310      	movs	r3, #16
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e144      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a83      	ldr	r2, [pc, #524]	@ (8005a38 <UART_SetConfig+0x2d0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d132      	bne.n	8005896 <UART_SetConfig+0x12e>
 8005830:	4b80      	ldr	r3, [pc, #512]	@ (8005a34 <UART_SetConfig+0x2cc>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d828      	bhi.n	8005890 <UART_SetConfig+0x128>
 800583e:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0xdc>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005879 	.word	0x08005879
 8005848:	08005891 	.word	0x08005891
 800584c:	08005891 	.word	0x08005891
 8005850:	08005891 	.word	0x08005891
 8005854:	08005885 	.word	0x08005885
 8005858:	08005891 	.word	0x08005891
 800585c:	08005891 	.word	0x08005891
 8005860:	08005891 	.word	0x08005891
 8005864:	0800587f 	.word	0x0800587f
 8005868:	08005891 	.word	0x08005891
 800586c:	08005891 	.word	0x08005891
 8005870:	08005891 	.word	0x08005891
 8005874:	0800588b 	.word	0x0800588b
 8005878:	2300      	movs	r3, #0
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e118      	b.n	8005ab0 <UART_SetConfig+0x348>
 800587e:	2302      	movs	r3, #2
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e115      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005884:	2304      	movs	r3, #4
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e112      	b.n	8005ab0 <UART_SetConfig+0x348>
 800588a:	2308      	movs	r3, #8
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e10f      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005890:	2310      	movs	r3, #16
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e10c      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a68      	ldr	r2, [pc, #416]	@ (8005a3c <UART_SetConfig+0x2d4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d120      	bne.n	80058e2 <UART_SetConfig+0x17a>
 80058a0:	4b64      	ldr	r3, [pc, #400]	@ (8005a34 <UART_SetConfig+0x2cc>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058aa:	2b30      	cmp	r3, #48	@ 0x30
 80058ac:	d013      	beq.n	80058d6 <UART_SetConfig+0x16e>
 80058ae:	2b30      	cmp	r3, #48	@ 0x30
 80058b0:	d814      	bhi.n	80058dc <UART_SetConfig+0x174>
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d009      	beq.n	80058ca <UART_SetConfig+0x162>
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d810      	bhi.n	80058dc <UART_SetConfig+0x174>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <UART_SetConfig+0x15c>
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d006      	beq.n	80058d0 <UART_SetConfig+0x168>
 80058c2:	e00b      	b.n	80058dc <UART_SetConfig+0x174>
 80058c4:	2300      	movs	r3, #0
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e0f2      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058ca:	2302      	movs	r3, #2
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e0ef      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058d0:	2304      	movs	r3, #4
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e0ec      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058d6:	2308      	movs	r3, #8
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e0e9      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058dc:	2310      	movs	r3, #16
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e0e6      	b.n	8005ab0 <UART_SetConfig+0x348>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a56      	ldr	r2, [pc, #344]	@ (8005a40 <UART_SetConfig+0x2d8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d120      	bne.n	800592e <UART_SetConfig+0x1c6>
 80058ec:	4b51      	ldr	r3, [pc, #324]	@ (8005a34 <UART_SetConfig+0x2cc>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058f8:	d013      	beq.n	8005922 <UART_SetConfig+0x1ba>
 80058fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80058fc:	d814      	bhi.n	8005928 <UART_SetConfig+0x1c0>
 80058fe:	2b80      	cmp	r3, #128	@ 0x80
 8005900:	d009      	beq.n	8005916 <UART_SetConfig+0x1ae>
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d810      	bhi.n	8005928 <UART_SetConfig+0x1c0>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <UART_SetConfig+0x1a8>
 800590a:	2b40      	cmp	r3, #64	@ 0x40
 800590c:	d006      	beq.n	800591c <UART_SetConfig+0x1b4>
 800590e:	e00b      	b.n	8005928 <UART_SetConfig+0x1c0>
 8005910:	2300      	movs	r3, #0
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e0cc      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005916:	2302      	movs	r3, #2
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e0c9      	b.n	8005ab0 <UART_SetConfig+0x348>
 800591c:	2304      	movs	r3, #4
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e0c6      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005922:	2308      	movs	r3, #8
 8005924:	77fb      	strb	r3, [r7, #31]
 8005926:	e0c3      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005928:	2310      	movs	r3, #16
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e0c0      	b.n	8005ab0 <UART_SetConfig+0x348>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a44      	ldr	r2, [pc, #272]	@ (8005a44 <UART_SetConfig+0x2dc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d125      	bne.n	8005984 <UART_SetConfig+0x21c>
 8005938:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <UART_SetConfig+0x2cc>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005946:	d017      	beq.n	8005978 <UART_SetConfig+0x210>
 8005948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594c:	d817      	bhi.n	800597e <UART_SetConfig+0x216>
 800594e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005952:	d00b      	beq.n	800596c <UART_SetConfig+0x204>
 8005954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005958:	d811      	bhi.n	800597e <UART_SetConfig+0x216>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <UART_SetConfig+0x1fe>
 800595e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005962:	d006      	beq.n	8005972 <UART_SetConfig+0x20a>
 8005964:	e00b      	b.n	800597e <UART_SetConfig+0x216>
 8005966:	2300      	movs	r3, #0
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e0a1      	b.n	8005ab0 <UART_SetConfig+0x348>
 800596c:	2302      	movs	r3, #2
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e09e      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005972:	2304      	movs	r3, #4
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e09b      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005978:	2308      	movs	r3, #8
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e098      	b.n	8005ab0 <UART_SetConfig+0x348>
 800597e:	2310      	movs	r3, #16
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e095      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2f      	ldr	r2, [pc, #188]	@ (8005a48 <UART_SetConfig+0x2e0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d125      	bne.n	80059da <UART_SetConfig+0x272>
 800598e:	4b29      	ldr	r3, [pc, #164]	@ (8005a34 <UART_SetConfig+0x2cc>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005994:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800599c:	d017      	beq.n	80059ce <UART_SetConfig+0x266>
 800599e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059a2:	d817      	bhi.n	80059d4 <UART_SetConfig+0x26c>
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a8:	d00b      	beq.n	80059c2 <UART_SetConfig+0x25a>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ae:	d811      	bhi.n	80059d4 <UART_SetConfig+0x26c>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <UART_SetConfig+0x254>
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b8:	d006      	beq.n	80059c8 <UART_SetConfig+0x260>
 80059ba:	e00b      	b.n	80059d4 <UART_SetConfig+0x26c>
 80059bc:	2301      	movs	r3, #1
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e076      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059c2:	2302      	movs	r3, #2
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e073      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059c8:	2304      	movs	r3, #4
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e070      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059ce:	2308      	movs	r3, #8
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e06d      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059d4:	2310      	movs	r3, #16
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e06a      	b.n	8005ab0 <UART_SetConfig+0x348>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <UART_SetConfig+0x2e4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d138      	bne.n	8005a56 <UART_SetConfig+0x2ee>
 80059e4:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <UART_SetConfig+0x2cc>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80059ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059f2:	d017      	beq.n	8005a24 <UART_SetConfig+0x2bc>
 80059f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059f8:	d82a      	bhi.n	8005a50 <UART_SetConfig+0x2e8>
 80059fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059fe:	d00b      	beq.n	8005a18 <UART_SetConfig+0x2b0>
 8005a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a04:	d824      	bhi.n	8005a50 <UART_SetConfig+0x2e8>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <UART_SetConfig+0x2aa>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0e:	d006      	beq.n	8005a1e <UART_SetConfig+0x2b6>
 8005a10:	e01e      	b.n	8005a50 <UART_SetConfig+0x2e8>
 8005a12:	2300      	movs	r3, #0
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e04b      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e048      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e045      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a24:	2308      	movs	r3, #8
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e042      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a2a:	bf00      	nop
 8005a2c:	efff69f3 	.word	0xefff69f3
 8005a30:	40011000 	.word	0x40011000
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40004400 	.word	0x40004400
 8005a3c:	40004800 	.word	0x40004800
 8005a40:	40004c00 	.word	0x40004c00
 8005a44:	40005000 	.word	0x40005000
 8005a48:	40011400 	.word	0x40011400
 8005a4c:	40007800 	.word	0x40007800
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e02c      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a72      	ldr	r2, [pc, #456]	@ (8005c24 <UART_SetConfig+0x4bc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d125      	bne.n	8005aac <UART_SetConfig+0x344>
 8005a60:	4b71      	ldr	r3, [pc, #452]	@ (8005c28 <UART_SetConfig+0x4c0>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005a6a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005a6e:	d017      	beq.n	8005aa0 <UART_SetConfig+0x338>
 8005a70:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005a74:	d817      	bhi.n	8005aa6 <UART_SetConfig+0x33e>
 8005a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a7a:	d00b      	beq.n	8005a94 <UART_SetConfig+0x32c>
 8005a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a80:	d811      	bhi.n	8005aa6 <UART_SetConfig+0x33e>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <UART_SetConfig+0x326>
 8005a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a8a:	d006      	beq.n	8005a9a <UART_SetConfig+0x332>
 8005a8c:	e00b      	b.n	8005aa6 <UART_SetConfig+0x33e>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e00d      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a94:	2302      	movs	r3, #2
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e00a      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e007      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e004      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e001      	b.n	8005ab0 <UART_SetConfig+0x348>
 8005aac:	2310      	movs	r3, #16
 8005aae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	d15b      	bne.n	8005b72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005aba:	7ffb      	ldrb	r3, [r7, #31]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d828      	bhi.n	8005b12 <UART_SetConfig+0x3aa>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <UART_SetConfig+0x360>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005b03 	.word	0x08005b03
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b13 	.word	0x08005b13
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe fe14 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8005af0:	61b8      	str	r0, [r7, #24]
        break;
 8005af2:	e013      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7fe fe24 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8005af8:	61b8      	str	r0, [r7, #24]
        break;
 8005afa:	e00f      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b4b      	ldr	r3, [pc, #300]	@ (8005c2c <UART_SetConfig+0x4c4>)
 8005afe:	61bb      	str	r3, [r7, #24]
        break;
 8005b00:	e00c      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fe fcf7 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8005b06:	61b8      	str	r0, [r7, #24]
        break;
 8005b08:	e008      	b.n	8005b1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b0e:	61bb      	str	r3, [r7, #24]
        break;
 8005b10:	e004      	b.n	8005b1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	77bb      	strb	r3, [r7, #30]
        break;
 8005b1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d074      	beq.n	8005c0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	005a      	lsls	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	441a      	add	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d916      	bls.n	8005b6c <UART_SetConfig+0x404>
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b44:	d212      	bcs.n	8005b6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f023 030f 	bic.w	r3, r3, #15
 8005b4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	89fa      	ldrh	r2, [r7, #14]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	e04f      	b.n	8005c0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	77bb      	strb	r3, [r7, #30]
 8005b70:	e04c      	b.n	8005c0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b72:	7ffb      	ldrb	r3, [r7, #31]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d828      	bhi.n	8005bca <UART_SetConfig+0x462>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <UART_SetConfig+0x418>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	08005bcb 	.word	0x08005bcb
 8005b90:	08005bbb 	.word	0x08005bbb
 8005b94:	08005bcb 	.word	0x08005bcb
 8005b98:	08005bcb 	.word	0x08005bcb
 8005b9c:	08005bcb 	.word	0x08005bcb
 8005ba0:	08005bc3 	.word	0x08005bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba4:	f7fe fdb8 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8005ba8:	61b8      	str	r0, [r7, #24]
        break;
 8005baa:	e013      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bac:	f7fe fdc8 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8005bb0:	61b8      	str	r0, [r7, #24]
        break;
 8005bb2:	e00f      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c2c <UART_SetConfig+0x4c4>)
 8005bb6:	61bb      	str	r3, [r7, #24]
        break;
 8005bb8:	e00c      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bba:	f7fe fc9b 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8005bbe:	61b8      	str	r0, [r7, #24]
        break;
 8005bc0:	e008      	b.n	8005bd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bc6:	61bb      	str	r3, [r7, #24]
        break;
 8005bc8:	e004      	b.n	8005bd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d018      	beq.n	8005c0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	085a      	lsrs	r2, r3, #1
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	441a      	add	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b0f      	cmp	r3, #15
 8005bf2:	d909      	bls.n	8005c08 <UART_SetConfig+0x4a0>
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bfa:	d205      	bcs.n	8005c08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	e001      	b.n	8005c0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40007c00 	.word	0x40007c00
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	00f42400 	.word	0x00f42400

08005c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2e:	d10a      	bne.n	8005d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b098      	sub	sp, #96	@ 0x60
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d84:	f7fc f8b0 	bl	8001ee8 <HAL_GetTick>
 8005d88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d12e      	bne.n	8005df6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da0:	2200      	movs	r2, #0
 8005da2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f88c 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d021      	beq.n	8005df6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e6      	bne.n	8005db2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e062      	b.n	8005ebc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d149      	bne.n	8005e98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f856 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d03c      	beq.n	8005e98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e6      	bne.n	8005e1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e70:	61fa      	str	r2, [r7, #28]
 8005e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e5      	bne.n	8005e50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e011      	b.n	8005ebc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3758      	adds	r7, #88	@ 0x58
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed4:	e04f      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d04b      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fc f803 	bl	8001ee8 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e04e      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d037      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b80      	cmp	r3, #128	@ 0x80
 8005f0a:	d034      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b40      	cmp	r3, #64	@ 0x40
 8005f10:	d031      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d110      	bne.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f838 	bl	8005f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2208      	movs	r2, #8
 8005f32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e029      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d111      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f81e 	bl	8005f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e00f      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d0a0      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b095      	sub	sp, #84	@ 0x54
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e6      	bne.n	8005fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006010:	2b01      	cmp	r3, #1
 8006012:	d118      	bne.n	8006046 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	60bb      	str	r3, [r7, #8]
   return(result);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f023 0310 	bic.w	r3, r3, #16
 8006028:	647b      	str	r3, [r7, #68]	@ 0x44
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6979      	ldr	r1, [r7, #20]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	613b      	str	r3, [r7, #16]
   return(result);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800605a:	bf00      	nop
 800605c:	3754      	adds	r7, #84	@ 0x54
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006068:	b084      	sub	sp, #16
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	f107 001c 	add.w	r0, r7, #28
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800607a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800607e:	2b01      	cmp	r3, #1
 8006080:	d121      	bne.n	80060c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	4b21      	ldr	r3, [pc, #132]	@ (8006118 <USB_CoreInit+0xb0>)
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d105      	bne.n	80060ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa92 	bl	80065e4 <USB_CoreReset>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e010      	b.n	80060e8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa86 	bl	80065e4 <USB_CoreReset>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80060e8:	7fbb      	ldrb	r3, [r7, #30]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d10b      	bne.n	8006106 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f043 0206 	orr.w	r2, r3, #6
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006106:	7bfb      	ldrb	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006112:	b004      	add	sp, #16
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	ffbdffbf 	.word	0xffbdffbf

0800611c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 0201 	bic.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d115      	bne.n	800618c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800616c:	200a      	movs	r0, #10
 800616e:	f7fb fec7 	bl	8001f00 <HAL_Delay>
      ms += 10U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	330a      	adds	r3, #10
 8006176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fa25 	bl	80065c8 <USB_GetMode>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d01e      	beq.n	80061c2 <USB_SetCurrentMode+0x84>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2bc7      	cmp	r3, #199	@ 0xc7
 8006188:	d9f0      	bls.n	800616c <USB_SetCurrentMode+0x2e>
 800618a:	e01a      	b.n	80061c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d115      	bne.n	80061be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800619e:	200a      	movs	r0, #10
 80061a0:	f7fb feae 	bl	8001f00 <HAL_Delay>
      ms += 10U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	330a      	adds	r3, #10
 80061a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa0c 	bl	80065c8 <USB_GetMode>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <USB_SetCurrentMode+0x84>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80061ba:	d9f0      	bls.n	800619e <USB_SetCurrentMode+0x60>
 80061bc:	e001      	b.n	80061c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e005      	b.n	80061ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80061c6:	d101      	bne.n	80061cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d8:	b084      	sub	sp, #16
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	e009      	b.n	800620c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	3340      	adds	r3, #64	@ 0x40
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	2200      	movs	r2, #0
 8006204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3301      	adds	r3, #1
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b0e      	cmp	r3, #14
 8006210:	d9f2      	bls.n	80061f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006212:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006216:	2b00      	cmp	r3, #0
 8006218:	d11c      	bne.n	8006254 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006228:	f043 0302 	orr.w	r3, r3, #2
 800622c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e005      	b.n	8006260 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006258:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006266:	461a      	mov	r2, r3
 8006268:	2300      	movs	r3, #0
 800626a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800626c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10d      	bne.n	8006290 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800627c:	2100      	movs	r1, #0
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f968 	bl	8006554 <USB_SetDevSpeed>
 8006284:	e008      	b.n	8006298 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006286:	2101      	movs	r1, #1
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f963 	bl	8006554 <USB_SetDevSpeed>
 800628e:	e003      	b.n	8006298 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006290:	2103      	movs	r1, #3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f95e 	bl	8006554 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006298:	2110      	movs	r1, #16
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8fa 	bl	8006494 <USB_FlushTxFifo>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f924 	bl	80064f8 <USB_FlushRxFifo>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c0:	461a      	mov	r2, r3
 80062c2:	2300      	movs	r3, #0
 80062c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062cc:	461a      	mov	r2, r3
 80062ce:	2300      	movs	r3, #0
 80062d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	e043      	b.n	800636c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062fa:	d118      	bne.n	800632e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630e:	461a      	mov	r2, r3
 8006310:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e013      	b.n	8006340 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006324:	461a      	mov	r2, r3
 8006326:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	e008      	b.n	8006340 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633a:	461a      	mov	r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006364:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3301      	adds	r3, #1
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006370:	461a      	mov	r2, r3
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	4293      	cmp	r3, r2
 8006376:	d3b5      	bcc.n	80062e4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	e043      	b.n	8006406 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006394:	d118      	bne.n	80063c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e013      	b.n	80063da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063be:	461a      	mov	r2, r3
 80063c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e008      	b.n	80063da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f8:	461a      	mov	r2, r3
 80063fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	3301      	adds	r3, #1
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800640a:	461a      	mov	r2, r3
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4293      	cmp	r3, r2
 8006410:	d3b5      	bcc.n	800637e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006424:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006432:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006434:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006438:	2b00      	cmp	r3, #0
 800643a:	d105      	bne.n	8006448 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f043 0210 	orr.w	r2, r3, #16
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <USB_DevInit+0x2b4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006454:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f043 0208 	orr.w	r2, r3, #8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006468:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699a      	ldr	r2, [r3, #24]
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <USB_DevInit+0x2b8>)
 8006476:	4313      	orrs	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006488:	b004      	add	sp, #16
 800648a:	4770      	bx	lr
 800648c:	803c3800 	.word	0x803c3800
 8006490:	40000004 	.word	0x40000004

08006494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ae:	d901      	bls.n	80064b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e01b      	b.n	80064ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	daf2      	bge.n	80064a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	019b      	lsls	r3, r3, #6
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d8:	d901      	bls.n	80064de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e006      	b.n	80064ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d0f0      	beq.n	80064cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006510:	d901      	bls.n	8006516 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e018      	b.n	8006548 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	daf2      	bge.n	8006504 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2210      	movs	r2, #16
 8006526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006534:	d901      	bls.n	800653a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e006      	b.n	8006548 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b10      	cmp	r3, #16
 8006544:	d0f0      	beq.n	8006528 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006574:	4313      	orrs	r3, r2
 8006576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b4:	f043 0302 	orr.w	r3, r3, #2
 80065b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0301 	and.w	r3, r3, #1
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065fc:	d901      	bls.n	8006602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e022      	b.n	8006648 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	daf2      	bge.n	80065f0 <USB_CoreReset+0xc>

  count = 10U;
 800660a:	230a      	movs	r3, #10
 800660c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800660e:	e002      	b.n	8006616 <USB_CoreReset+0x32>
  {
    count--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3b01      	subs	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f9      	bne.n	8006610 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f043 0201 	orr.w	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006634:	d901      	bls.n	800663a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e006      	b.n	8006648 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b01      	cmp	r3, #1
 8006644:	d0f0      	beq.n	8006628 <USB_CoreReset+0x44>

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006654:	b5b0      	push	{r4, r5, r7, lr}
 8006656:	b08c      	sub	sp, #48	@ 0x30
 8006658:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800665a:	2100      	movs	r1, #0
 800665c:	2000      	movs	r0, #0
 800665e:	f003 ff8d 	bl	800a57c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006662:	4b1a      	ldr	r3, [pc, #104]	@ (80066cc <MX_LWIP_Init+0x78>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006668:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <MX_LWIP_Init+0x7c>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800666e:	4b19      	ldr	r3, [pc, #100]	@ (80066d4 <MX_LWIP_Init+0x80>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006674:	4b18      	ldr	r3, [pc, #96]	@ (80066d8 <MX_LWIP_Init+0x84>)
 8006676:	9302      	str	r3, [sp, #8]
 8006678:	4b18      	ldr	r3, [pc, #96]	@ (80066dc <MX_LWIP_Init+0x88>)
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <MX_LWIP_Init+0x80>)
 8006682:	4a13      	ldr	r2, [pc, #76]	@ (80066d0 <MX_LWIP_Init+0x7c>)
 8006684:	4911      	ldr	r1, [pc, #68]	@ (80066cc <MX_LWIP_Init+0x78>)
 8006686:	4816      	ldr	r0, [pc, #88]	@ (80066e0 <MX_LWIP_Init+0x8c>)
 8006688:	f004 fd26 	bl	800b0d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800668c:	4814      	ldr	r0, [pc, #80]	@ (80066e0 <MX_LWIP_Init+0x8c>)
 800668e:	f004 ff4b 	bl	800b528 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006692:	4813      	ldr	r0, [pc, #76]	@ (80066e0 <MX_LWIP_Init+0x8c>)
 8006694:	f004 ff58 	bl	800b548 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006698:	4912      	ldr	r1, [pc, #72]	@ (80066e4 <MX_LWIP_Init+0x90>)
 800669a:	4811      	ldr	r0, [pc, #68]	@ (80066e0 <MX_LWIP_Init+0x8c>)
 800669c:	f005 f890 	bl	800b7c0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80066a0:	4b11      	ldr	r3, [pc, #68]	@ (80066e8 <MX_LWIP_Init+0x94>)
 80066a2:	1d3c      	adds	r4, r7, #4
 80066a4:	461d      	mov	r5, r3
 80066a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80066b2:	1d3b      	adds	r3, r7, #4
 80066b4:	490a      	ldr	r1, [pc, #40]	@ (80066e0 <MX_LWIP_Init+0x8c>)
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fddb 	bl	8007272 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80066bc:	4808      	ldr	r0, [pc, #32]	@ (80066e0 <MX_LWIP_Init+0x8c>)
 80066be:	f00d fac5 	bl	8013c4c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80066c2:	bf00      	nop
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bdb0      	pop	{r4, r5, r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000b4c 	.word	0x20000b4c
 80066d0:	20000b50 	.word	0x20000b50
 80066d4:	20000b54 	.word	0x20000b54
 80066d8:	0800a4b9 	.word	0x0800a4b9
 80066dc:	08006ca9 	.word	0x08006ca9
 80066e0:	20000b10 	.word	0x20000b10
 80066e4:	080066ed 	.word	0x080066ed
 80066e8:	08018d08 	.word	0x08018d08

080066ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
	  printf("Cable Connected\n\r");
 8006704:	4805      	ldr	r0, [pc, #20]	@ (800671c <ethernet_link_status_updated+0x30>)
 8006706:	f011 faaf 	bl	8017c68 <iprintf>
  {
/* USER CODE BEGIN 6 */
	  printf("Cable Disconnected\n\r");
/* USER CODE END 6 */
  }
}
 800670a:	e002      	b.n	8006712 <ethernet_link_status_updated+0x26>
	  printf("Cable Disconnected\n\r");
 800670c:	4804      	ldr	r0, [pc, #16]	@ (8006720 <ethernet_link_status_updated+0x34>)
 800670e:	f011 faab 	bl	8017c68 <iprintf>
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	08018d24 	.word	0x08018d24
 8006720:	08018d38 	.word	0x08018d38

08006724 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006736:	2320      	movs	r3, #32
 8006738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800673a:	f3bf 8f4f 	dsb	sy
}
 800673e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006740:	e00b      	b.n	800675a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006742:	4a0d      	ldr	r2, [pc, #52]	@ (8006778 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dcf0      	bgt.n	8006742 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006760:	f3bf 8f4f 	dsb	sy
}
 8006764:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006766:	f3bf 8f6f 	isb	sy
}
 800676a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006784:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <HAL_ETH_RxCpltCallback+0x1c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fefb 	bl	8007584 <osSemaphoreRelease>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000cf64 	.word	0x2000cf64

0800679c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80067a4:	4b04      	ldr	r3, [pc, #16]	@ (80067b8 <HAL_ETH_TxCpltCallback+0x1c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 feeb 	bl	8007584 <osSemaphoreRelease>
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	2000cf68 	.word	0x2000cf68

080067bc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7fc fb6e 	bl	8002ea6 <HAL_ETH_GetDMAError>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d0:	2b80      	cmp	r3, #128	@ 0x80
 80067d2:	d104      	bne.n	80067de <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <HAL_ETH_ErrorCallback+0x2c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fed3 	bl	8007584 <osSemaphoreRelease>
  }
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2000cf64 	.word	0x2000cf64

080067ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	b0b4      	sub	sp, #208	@ 0xd0
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8006806:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800680a:	2264      	movs	r2, #100	@ 0x64
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f011 fa8f 	bl	8017d32 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006814:	4b9f      	ldr	r3, [pc, #636]	@ (8006a94 <low_level_init+0x2a8>)
 8006816:	4aa0      	ldr	r2, [pc, #640]	@ (8006a98 <low_level_init+0x2ac>)
 8006818:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8006820:	2380      	movs	r3, #128	@ 0x80
 8006822:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8006826:	23e1      	movs	r3, #225	@ 0xe1
 8006828:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8006838:	2300      	movs	r3, #0
 800683a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800683e:	4a95      	ldr	r2, [pc, #596]	@ (8006a94 <low_level_init+0x2a8>)
 8006840:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006844:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006846:	4b93      	ldr	r3, [pc, #588]	@ (8006a94 <low_level_init+0x2a8>)
 8006848:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800684c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800684e:	4b91      	ldr	r3, [pc, #580]	@ (8006a94 <low_level_init+0x2a8>)
 8006850:	4a92      	ldr	r2, [pc, #584]	@ (8006a9c <low_level_init+0x2b0>)
 8006852:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006854:	4b8f      	ldr	r3, [pc, #572]	@ (8006a94 <low_level_init+0x2a8>)
 8006856:	4a92      	ldr	r2, [pc, #584]	@ (8006aa0 <low_level_init+0x2b4>)
 8006858:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800685a:	4b8e      	ldr	r3, [pc, #568]	@ (8006a94 <low_level_init+0x2a8>)
 800685c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006860:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006862:	488c      	ldr	r0, [pc, #560]	@ (8006a94 <low_level_init+0x2a8>)
 8006864:	f7fb fcd6 	bl	8002214 <HAL_ETH_Init>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800686e:	2238      	movs	r2, #56	@ 0x38
 8006870:	2100      	movs	r1, #0
 8006872:	488c      	ldr	r0, [pc, #560]	@ (8006aa4 <low_level_init+0x2b8>)
 8006874:	f011 fa5d 	bl	8017d32 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006878:	4b8a      	ldr	r3, [pc, #552]	@ (8006aa4 <low_level_init+0x2b8>)
 800687a:	2221      	movs	r2, #33	@ 0x21
 800687c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800687e:	4b89      	ldr	r3, [pc, #548]	@ (8006aa4 <low_level_init+0x2b8>)
 8006880:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006884:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006886:	4b87      	ldr	r3, [pc, #540]	@ (8006aa4 <low_level_init+0x2b8>)
 8006888:	2200      	movs	r2, #0
 800688a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800688c:	4886      	ldr	r0, [pc, #536]	@ (8006aa8 <low_level_init+0x2bc>)
 800688e:	f004 fadd 	bl	800ae4c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2206      	movs	r2, #6
 8006896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800689a:	4b7e      	ldr	r3, [pc, #504]	@ (8006a94 <low_level_init+0x2a8>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80068a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006a94 <low_level_init+0x2a8>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	785a      	ldrb	r2, [r3, #1]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80068b2:	4b78      	ldr	r3, [pc, #480]	@ (8006a94 <low_level_init+0x2a8>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	789a      	ldrb	r2, [r3, #2]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80068be:	4b75      	ldr	r3, [pc, #468]	@ (8006a94 <low_level_init+0x2a8>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	78da      	ldrb	r2, [r3, #3]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80068ca:	4b72      	ldr	r3, [pc, #456]	@ (8006a94 <low_level_init+0x2a8>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	791a      	ldrb	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80068d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006a94 <low_level_init+0x2a8>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	795a      	ldrb	r2, [r3, #5]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80068e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068f0:	f043 030a 	orr.w	r3, r3, #10
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80068fc:	2300      	movs	r3, #0
 80068fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006900:	2300      	movs	r3, #0
 8006902:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006904:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006908:	2101      	movs	r1, #1
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fdba 	bl	8007484 <osSemaphoreCreate>
 8006910:	4603      	mov	r3, r0
 8006912:	4a66      	ldr	r2, [pc, #408]	@ (8006aac <low_level_init+0x2c0>)
 8006914:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006916:	2300      	movs	r3, #0
 8006918:	647b      	str	r3, [r7, #68]	@ 0x44
 800691a:	2300      	movs	r3, #0
 800691c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800691e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fdad 	bl	8007484 <osSemaphoreCreate>
 800692a:	4603      	mov	r3, r0
 800692c:	4a60      	ldr	r2, [pc, #384]	@ (8006ab0 <low_level_init+0x2c4>)
 800692e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006930:	4b5e      	ldr	r3, [pc, #376]	@ (8006aac <low_level_init+0x2c0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fdd6 	bl	80074e8 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800693c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ab0 <low_level_init+0x2c4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2100      	movs	r1, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fdd0 	bl	80074e8 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006948:	4b5a      	ldr	r3, [pc, #360]	@ (8006ab4 <low_level_init+0x2c8>)
 800694a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800694e:	461d      	mov	r5, r3
 8006950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800695c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fc85 	bl	8007272 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006968:	4953      	ldr	r1, [pc, #332]	@ (8006ab8 <low_level_init+0x2cc>)
 800696a:	4854      	ldr	r0, [pc, #336]	@ (8006abc <low_level_init+0x2d0>)
 800696c:	f7fb f985 	bl	8001c7a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006970:	4852      	ldr	r0, [pc, #328]	@ (8006abc <low_level_init+0x2d0>)
 8006972:	f7fb f9b4 	bl	8001cde <LAN8742_Init>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d006      	beq.n	800698a <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f004 fee5 	bl	800b74c <netif_set_link_down>
    netif_set_down(netif);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f004 fe5e 	bl	800b644 <netif_set_down>
 8006988:	e081      	b.n	8006a8e <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800698a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800698e:	2b00      	cmp	r3, #0
 8006990:	d165      	bne.n	8006a5e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006992:	484a      	ldr	r0, [pc, #296]	@ (8006abc <low_level_init+0x2d0>)
 8006994:	f7fb f9f0 	bl	8001d78 <LAN8742_GetLinkState>
 8006998:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800699c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	dc06      	bgt.n	80069b2 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f004 fed1 	bl	800b74c <netif_set_link_down>
      netif_set_down(netif);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f004 fe4a 	bl	800b644 <netif_set_down>
 80069b0:	e057      	b.n	8006a62 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 80069b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069b6:	3b02      	subs	r3, #2
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d82b      	bhi.n	8006a14 <low_level_init+0x228>
 80069bc:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <low_level_init+0x1d8>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	080069e7 	.word	0x080069e7
 80069cc:	080069f7 	.word	0x080069f7
 80069d0:	08006a07 	.word	0x08006a07
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80069d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80069dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80069e4:	e01f      	b.n	8006a26 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80069ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80069f4:	e017      	b.n	8006a26 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80069f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006a04:	e00f      	b.n	8006a26 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006a12:	e008      	b.n	8006a26 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8006a14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8006a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8006a24:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006a26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4819      	ldr	r0, [pc, #100]	@ (8006a94 <low_level_init+0x2a8>)
 8006a2e:	f7fc f8d9 	bl	8002be4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a36:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8006a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a3c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006a3e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006a42:	4619      	mov	r1, r3
 8006a44:	4813      	ldr	r0, [pc, #76]	@ (8006a94 <low_level_init+0x2a8>)
 8006a46:	f7fc f9c4 	bl	8002dd2 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8006a4a:	4812      	ldr	r0, [pc, #72]	@ (8006a94 <low_level_init+0x2a8>)
 8006a4c:	f7fb fc7c 	bl	8002348 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f004 fd79 	bl	800b548 <netif_set_up>
    netif_set_link_up(netif);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f004 fe38 	bl	800b6cc <netif_set_link_up>
 8006a5c:	e001      	b.n	8006a62 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8006a5e:	f7fa fddf 	bl	8001620 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8006a62:	f7fb fa71 	bl	8001f48 <HAL_GetREVID>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a6c:	d10f      	bne.n	8006a8e <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8006a6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <low_level_init+0x2d4>)
 8006a70:	f107 040c 	add.w	r4, r7, #12
 8006a74:	461d      	mov	r5, r3
 8006a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fbf2 	bl	8007272 <osThreadCreate>
  }
}
 8006a8e:	37d0      	adds	r7, #208	@ 0xd0
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bdb0      	pop	{r4, r5, r7, pc}
 8006a94:	2000cf6c 	.word	0x2000cf6c
 8006a98:	40028000 	.word	0x40028000
 8006a9c:	200214d8 	.word	0x200214d8
 8006aa0:	20020fd8 	.word	0x20020fd8
 8006aa4:	2000d01c 	.word	0x2000d01c
 8006aa8:	0801c2d4 	.word	0x0801c2d4
 8006aac:	2000cf64 	.word	0x2000cf64
 8006ab0:	2000cf68 	.word	0x2000cf68
 8006ab4:	08018d58 	.word	0x08018d58
 8006ab8:	2000000c 	.word	0x2000000c
 8006abc:	2000d054 	.word	0x2000d054
 8006ac0:	08018d84 	.word	0x08018d84

08006ac4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b092      	sub	sp, #72	@ 0x48
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006adc:	f107 030c 	add.w	r3, r7, #12
 8006ae0:	2230      	movs	r2, #48	@ 0x30
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f011 f924 	bl	8017d32 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006aea:	f107 030c 	add.w	r3, r7, #12
 8006aee:	2230      	movs	r2, #48	@ 0x30
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f011 f91d 	bl	8017d32 <memset>

  for(q = p; q != NULL; q = q->next)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8006afc:	e045      	b.n	8006b8a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d902      	bls.n	8006b0a <low_level_output+0x46>
      return ERR_IF;
 8006b04:	f06f 030b 	mvn.w	r3, #11
 8006b08:	e07f      	b.n	8006c0a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8006b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b10:	4613      	mov	r3, r2
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	3348      	adds	r3, #72	@ 0x48
 8006b1a:	443b      	add	r3, r7
 8006b1c:	3b3c      	subs	r3, #60	@ 0x3c
 8006b1e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b22:	895b      	ldrh	r3, [r3, #10]
 8006b24:	4619      	mov	r1, r3
 8006b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b28:	4613      	mov	r3, r2
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	3348      	adds	r3, #72	@ 0x48
 8006b32:	443b      	add	r3, r7
 8006b34:	3b38      	subs	r3, #56	@ 0x38
 8006b36:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d011      	beq.n	8006b62 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b40:	1e5a      	subs	r2, r3, #1
 8006b42:	f107 000c 	add.w	r0, r7, #12
 8006b46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b48:	460b      	mov	r3, r1
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	440b      	add	r3, r1
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	18c1      	adds	r1, r0, r3
 8006b52:	4613      	mov	r3, r2
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	3348      	adds	r3, #72	@ 0x48
 8006b5c:	443b      	add	r3, r7
 8006b5e:	3b34      	subs	r3, #52	@ 0x34
 8006b60:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	3348      	adds	r3, #72	@ 0x48
 8006b76:	443b      	add	r3, r7
 8006b78:	3b34      	subs	r3, #52	@ 0x34
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b80:	3301      	adds	r3, #1
 8006b82:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1b6      	bne.n	8006afe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	891b      	ldrh	r3, [r3, #8]
 8006b94:	461a      	mov	r2, r3
 8006b96:	4b1f      	ldr	r3, [pc, #124]	@ (8006c14 <low_level_output+0x150>)
 8006b98:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c14 <low_level_output+0x150>)
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <low_level_output+0x150>)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006ba8:	6838      	ldr	r0, [r7, #0]
 8006baa:	f005 fa89 	bl	800c0c0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8006bae:	4919      	ldr	r1, [pc, #100]	@ (8006c14 <low_level_output+0x150>)
 8006bb0:	4819      	ldr	r0, [pc, #100]	@ (8006c18 <low_level_output+0x154>)
 8006bb2:	f7fb fcb9 	bl	8002528 <HAL_ETH_Transmit_IT>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006bc2:	e01b      	b.n	8006bfc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006bc4:	4814      	ldr	r0, [pc, #80]	@ (8006c18 <low_level_output+0x154>)
 8006bc6:	f7fc f961 	bl	8002e8c <HAL_ETH_GetError>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006bd4:	4b11      	ldr	r3, [pc, #68]	@ (8006c1c <low_level_output+0x158>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fc83 	bl	80074e8 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006be2:	480d      	ldr	r0, [pc, #52]	@ (8006c18 <low_level_output+0x154>)
 8006be4:	f7fb fe40 	bl	8002868 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8006be8:	23fe      	movs	r3, #254	@ 0xfe
 8006bea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006bee:	e005      	b.n	8006bfc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8006bf0:	6838      	ldr	r0, [r7, #0]
 8006bf2:	f005 f9bf 	bl	800bf74 <pbuf_free>
        errval =  ERR_IF;
 8006bf6:	23f4      	movs	r3, #244	@ 0xf4
 8006bf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8006bfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006c00:	f113 0f02 	cmn.w	r3, #2
 8006c04:	d0d3      	beq.n	8006bae <low_level_output+0xea>

  return errval;
 8006c06:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3748      	adds	r7, #72	@ 0x48
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	2000d01c 	.word	0x2000d01c
 8006c18:	2000cf6c 	.word	0x2000cf6c
 8006c1c:	2000cf68 	.word	0x2000cf68

08006c20 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <low_level_input+0x2c>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4805      	ldr	r0, [pc, #20]	@ (8006c50 <low_level_input+0x30>)
 8006c3c:	f7fb fcd0 	bl	80025e0 <HAL_ETH_ReadData>
  }

  return p;
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	2000cf60 	.word	0x2000cf60
 8006c50:	2000cf6c 	.word	0x2000cf6c

08006c54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006c64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <ethernetif_input+0x50>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f04f 31ff 	mov.w	r1, #4294967295
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fc3b 	bl	80074e8 <osSemaphoreWait>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f5      	bne.n	8006c64 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006c78:	68b8      	ldr	r0, [r7, #8]
 8006c7a:	f7ff ffd1 	bl	8006c20 <low_level_input>
 8006c7e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	4798      	blx	r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f005 f96c 	bl	800bf74 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1ea      	bne.n	8006c78 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006ca2:	e7df      	b.n	8006c64 <ethernetif_input+0x10>
 8006ca4:	2000cf64 	.word	0x2000cf64

08006ca8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <ethernetif_init+0x1c>
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <ethernetif_init+0x48>)
 8006cb8:	f240 2219 	movw	r2, #537	@ 0x219
 8006cbc:	490d      	ldr	r1, [pc, #52]	@ (8006cf4 <ethernetif_init+0x4c>)
 8006cbe:	480e      	ldr	r0, [pc, #56]	@ (8006cf8 <ethernetif_init+0x50>)
 8006cc0:	f010 ffd2 	bl	8017c68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2273      	movs	r2, #115	@ 0x73
 8006cc8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2274      	movs	r2, #116	@ 0x74
 8006cd0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a09      	ldr	r2, [pc, #36]	@ (8006cfc <ethernetif_init+0x54>)
 8006cd8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a08      	ldr	r2, [pc, #32]	@ (8006d00 <ethernetif_init+0x58>)
 8006cde:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fd83 	bl	80067ec <low_level_init>

  return ERR_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	08018da0 	.word	0x08018da0
 8006cf4:	08018dbc 	.word	0x08018dbc
 8006cf8:	08018dcc 	.word	0x08018dcc
 8006cfc:	08015b0d 	.word	0x08015b0d
 8006d00:	08006ac5 	.word	0x08006ac5

08006d04 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	4809      	ldr	r0, [pc, #36]	@ (8006d38 <pbuf_free_custom+0x34>)
 8006d14:	f004 f98a 	bl	800b02c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006d18:	4b08      	ldr	r3, [pc, #32]	@ (8006d3c <pbuf_free_custom+0x38>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d107      	bne.n	8006d30 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <pbuf_free_custom+0x38>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006d26:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <pbuf_free_custom+0x3c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fc2a 	bl	8007584 <osSemaphoreRelease>
  }
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	0801c2d4 	.word	0x0801c2d4
 8006d3c:	2000cf60 	.word	0x2000cf60
 8006d40:	2000cf64 	.word	0x2000cf64

08006d44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006d48:	f7fb f8ce 	bl	8001ee8 <HAL_GetTick>
 8006d4c:	4603      	mov	r3, r0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08e      	sub	sp, #56	@ 0x38
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	60da      	str	r2, [r3, #12]
 8006d6a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a52      	ldr	r2, [pc, #328]	@ (8006ebc <HAL_ETH_MspInit+0x168>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f040 809e 	bne.w	8006eb4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006d78:	4b51      	ldr	r3, [pc, #324]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7c:	4a50      	ldr	r2, [pc, #320]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006d7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d84:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d94:	4a4a      	ldr	r2, [pc, #296]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006d96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d9c:	4b48      	ldr	r3, [pc, #288]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4b45      	ldr	r3, [pc, #276]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dac:	4a44      	ldr	r2, [pc, #272]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006db4:	4b42      	ldr	r3, [pc, #264]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dc6:	f043 0304 	orr.w	r3, r3, #4
 8006dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dd8:	4b39      	ldr	r3, [pc, #228]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	4a38      	ldr	r2, [pc, #224]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006de4:	4b36      	ldr	r3, [pc, #216]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006df0:	4b33      	ldr	r3, [pc, #204]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df4:	4a32      	ldr	r2, [pc, #200]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006df6:	f043 0302 	orr.w	r3, r3, #2
 8006dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dfc:	4b30      	ldr	r3, [pc, #192]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e08:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e14:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec0 <HAL_ETH_MspInit+0x16c>)
 8006e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006e20:	2332      	movs	r3, #50	@ 0x32
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e24:	2302      	movs	r3, #2
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e30:	230b      	movs	r3, #11
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4822      	ldr	r0, [pc, #136]	@ (8006ec4 <HAL_ETH_MspInit+0x170>)
 8006e3c:	f7fc fc60 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006e40:	2386      	movs	r3, #134	@ 0x86
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2302      	movs	r3, #2
 8006e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e50:	230b      	movs	r3, #11
 8006e52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e58:	4619      	mov	r1, r3
 8006e5a:	481b      	ldr	r0, [pc, #108]	@ (8006ec8 <HAL_ETH_MspInit+0x174>)
 8006e5c:	f7fc fc50 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006e60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e66:	2302      	movs	r3, #2
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e72:	230b      	movs	r3, #11
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4813      	ldr	r0, [pc, #76]	@ (8006ecc <HAL_ETH_MspInit+0x178>)
 8006e7e:	f7fc fc3f 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006e82:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e90:	2303      	movs	r3, #3
 8006e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e94:	230b      	movs	r3, #11
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	480c      	ldr	r0, [pc, #48]	@ (8006ed0 <HAL_ETH_MspInit+0x17c>)
 8006ea0:	f7fc fc2e 	bl	8003700 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2105      	movs	r1, #5
 8006ea8:	203d      	movs	r0, #61	@ 0x3d
 8006eaa:	f7fb f911 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006eae:	203d      	movs	r0, #61	@ 0x3d
 8006eb0:	f7fb f92a 	bl	8002108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	3738      	adds	r7, #56	@ 0x38
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40028000 	.word	0x40028000
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40020800 	.word	0x40020800
 8006ec8:	40020000 	.word	0x40020000
 8006ecc:	40020400 	.word	0x40020400
 8006ed0:	40021800 	.word	0x40021800

08006ed4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006ed8:	4802      	ldr	r0, [pc, #8]	@ (8006ee4 <ETH_PHY_IO_Init+0x10>)
 8006eda:	f7fb ff95 	bl	8002e08 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	2000cf6c 	.word	0x2000cf6c

08006ee8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
  return 0;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	68f9      	ldr	r1, [r7, #12]
 8006f0a:	4807      	ldr	r0, [pc, #28]	@ (8006f28 <ETH_PHY_IO_ReadReg+0x30>)
 8006f0c:	f7fb fdd6 	bl	8002abc <HAL_ETH_ReadPHYRegister>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	e000      	b.n	8006f1e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2000cf6c 	.word	0x2000cf6c

08006f2c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	68f9      	ldr	r1, [r7, #12]
 8006f3e:	4807      	ldr	r0, [pc, #28]	@ (8006f5c <ETH_PHY_IO_WriteReg+0x30>)
 8006f40:	f7fb fe07 	bl	8002b52 <HAL_ETH_WritePHYRegister>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	e000      	b.n	8006f52 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	2000cf6c 	.word	0x2000cf6c

08006f60 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006f64:	f7fa ffc0 	bl	8001ee8 <HAL_GetTick>
 8006f68:	4603      	mov	r3, r0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b0a0      	sub	sp, #128	@ 0x80
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006f78:	f107 0308 	add.w	r3, r7, #8
 8006f7c:	2264      	movs	r2, #100	@ 0x64
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f010 fed6 	bl	8017d32 <memset>
  int32_t PHYLinkState = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f8e:	2300      	movs	r3, #0
 8006f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f92:	2300      	movs	r3, #0
 8006f94:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006f9a:	483a      	ldr	r0, [pc, #232]	@ (8007084 <ethernet_link_thread+0x114>)
 8006f9c:	f7fa feec 	bl	8001d78 <LAN8742_GetLinkState>
 8006fa0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <ethernet_link_thread+0x5e>
 8006fb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	dc09      	bgt.n	8006fce <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006fba:	4833      	ldr	r0, [pc, #204]	@ (8007088 <ethernet_link_thread+0x118>)
 8006fbc:	f7fb fa34 	bl	8002428 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006fc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fc2:	f004 fb3f 	bl	800b644 <netif_set_down>
    netif_set_link_down(netif);
 8006fc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fc8:	f004 fbc0 	bl	800b74c <netif_set_link_down>
 8006fcc:	e055      	b.n	800707a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d14e      	bne.n	800707a <ethernet_link_thread+0x10a>
 8006fdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	dd4b      	ble.n	800707a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fe4:	3b02      	subs	r3, #2
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d82a      	bhi.n	8007040 <ethernet_link_thread+0xd0>
 8006fea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <ethernet_link_thread+0x80>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007001 	.word	0x08007001
 8006ff4:	08007013 	.word	0x08007013
 8006ff8:	08007023 	.word	0x08007023
 8006ffc:	08007033 	.word	0x08007033
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007000:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007004:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007006:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800700a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800700c:	2301      	movs	r3, #1
 800700e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007010:	e017      	b.n	8007042 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007012:	2300      	movs	r3, #0
 8007014:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007016:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800701a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800701c:	2301      	movs	r3, #1
 800701e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007020:	e00f      	b.n	8007042 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007026:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007028:	2300      	movs	r3, #0
 800702a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800702c:	2301      	movs	r3, #1
 800702e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007030:	e007      	b.n	8007042 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007032:	2300      	movs	r3, #0
 8007034:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007036:	2300      	movs	r3, #0
 8007038:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800703e:	e000      	b.n	8007042 <ethernet_link_thread+0xd2>
    default:
      break;
 8007040:	bf00      	nop
    }

    if(linkchanged)
 8007042:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d018      	beq.n	800707a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4619      	mov	r1, r3
 800704e:	480e      	ldr	r0, [pc, #56]	@ (8007088 <ethernet_link_thread+0x118>)
 8007050:	f7fb fdc8 	bl	8002be4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007056:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800705a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800705c:	f107 0308 	add.w	r3, r7, #8
 8007060:	4619      	mov	r1, r3
 8007062:	4809      	ldr	r0, [pc, #36]	@ (8007088 <ethernet_link_thread+0x118>)
 8007064:	f7fb feb5 	bl	8002dd2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007068:	4807      	ldr	r0, [pc, #28]	@ (8007088 <ethernet_link_thread+0x118>)
 800706a:	f7fb f96d 	bl	8002348 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800706e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007070:	f004 fa6a 	bl	800b548 <netif_set_up>
      netif_set_link_up(netif);
 8007074:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007076:	f004 fb29 	bl	800b6cc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800707a:	2064      	movs	r0, #100	@ 0x64
 800707c:	f000 f951 	bl	8007322 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007080:	e78b      	b.n	8006f9a <ethernet_link_thread+0x2a>
 8007082:	bf00      	nop
 8007084:	2000d054 	.word	0x2000d054
 8007088:	2000cf6c 	.word	0x2000cf6c

0800708c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007094:	4812      	ldr	r0, [pc, #72]	@ (80070e0 <HAL_ETH_RxAllocateCallback+0x54>)
 8007096:	f003 ff55 	bl	800af44 <memp_malloc_pool>
 800709a:	60f8      	str	r0, [r7, #12]
  if (p)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d014      	beq.n	80070cc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f103 0220 	add.w	r2, r3, #32
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a0d      	ldr	r2, [pc, #52]	@ (80070e4 <HAL_ETH_RxAllocateCallback+0x58>)
 80070b0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2241      	movs	r2, #65	@ 0x41
 80070c2:	2100      	movs	r1, #0
 80070c4:	2000      	movs	r0, #0
 80070c6:	f004 fd9d 	bl	800bc04 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80070ca:	e005      	b.n	80070d8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	0801c2d4 	.word	0x0801c2d4
 80070e4:	08006d05 	.word	0x08006d05
 80070e8:	2000cf60 	.word	0x2000cf60

080070ec <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3b20      	subs	r3, #32
 800710a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2200      	movs	r2, #0
 8007116:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	887a      	ldrh	r2, [r7, #2]
 800711c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e003      	b.n	8007136 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	61fb      	str	r3, [r7, #28]
 8007142:	e009      	b.n	8007158 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	891a      	ldrh	r2, [r3, #8]
 8007148:	887b      	ldrh	r3, [r7, #2]
 800714a:	4413      	add	r3, r2
 800714c:	b29a      	uxth	r2, r3
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f2      	bne.n	8007144 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800715e:	887b      	ldrh	r3, [r7, #2]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff fade 	bl	8006724 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007168:	bf00      	nop
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f004 fefb 	bl	800bf74 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8007190:	4b15      	ldr	r3, [pc, #84]	@ (80071e8 <RMII_Thread+0x60>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800719c:	2000      	movs	r0, #0
 800719e:	f000 f8b4 	bl	800730a <osThreadTerminate>
 80071a2:	e7f5      	b.n	8007190 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80071a4:	4b10      	ldr	r3, [pc, #64]	@ (80071e8 <RMII_Thread+0x60>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80071ac:	2b0a      	cmp	r3, #10
 80071ae:	d916      	bls.n	80071de <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <RMII_Thread+0x64>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a0d      	ldr	r2, [pc, #52]	@ (80071ec <RMII_Thread+0x64>)
 80071b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80071ba:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <RMII_Thread+0x64>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4a0a      	ldr	r2, [pc, #40]	@ (80071ec <RMII_Thread+0x64>)
 80071c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071c6:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80071c8:	4b07      	ldr	r3, [pc, #28]	@ (80071e8 <RMII_Thread+0x60>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80071d0:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <RMII_Thread+0x60>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80071dc:	e7d8      	b.n	8007190 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80071de:	20c8      	movs	r0, #200	@ 0xc8
 80071e0:	f000 f89f 	bl	8007322 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80071e4:	e7d4      	b.n	8007190 <RMII_Thread+0x8>
 80071e6:	bf00      	nop
 80071e8:	2000cf6c 	.word	0x2000cf6c
 80071ec:	40013800 	.word	0x40013800

080071f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80071fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007202:	2b84      	cmp	r3, #132	@ 0x84
 8007204:	d005      	beq.n	8007212 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	3303      	adds	r3, #3
 8007210:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007226:	f3ef 8305 	mrs	r3, IPSR
 800722a:	607b      	str	r3, [r7, #4]
  return(result);
 800722c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007248:	f001 fd7c 	bl	8008d44 <vTaskStartScheduler>
  
  return osOK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	bd80      	pop	{r7, pc}

08007252 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007256:	f7ff ffe3 	bl	8007220 <inHandlerMode>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007260:	f001 fe9c 	bl	8008f9c <xTaskGetTickCountFromISR>
 8007264:	4603      	mov	r3, r0
 8007266:	e002      	b.n	800726e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007268:	f001 fe88 	bl	8008f7c <xTaskGetTickCount>
 800726c:	4603      	mov	r3, r0
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	bd80      	pop	{r7, pc}

08007272 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007274:	b089      	sub	sp, #36	@ 0x24
 8007276:	af04      	add	r7, sp, #16
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d020      	beq.n	80072c6 <osThreadCreate+0x54>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01c      	beq.n	80072c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685c      	ldr	r4, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691e      	ldr	r6, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ffa6 	bl	80071f0 <makeFreeRtosPriority>
 80072a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ae:	9202      	str	r2, [sp, #8]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	9100      	str	r1, [sp, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4632      	mov	r2, r6
 80072b8:	4629      	mov	r1, r5
 80072ba:	4620      	mov	r0, r4
 80072bc:	f001 fac0 	bl	8008840 <xTaskCreateStatic>
 80072c0:	4603      	mov	r3, r0
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e01c      	b.n	8007300 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685c      	ldr	r4, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff ff88 	bl	80071f0 <makeFreeRtosPriority>
 80072e0:	4602      	mov	r2, r0
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	9200      	str	r2, [sp, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	4632      	mov	r2, r6
 80072ee:	4629      	mov	r1, r5
 80072f0:	4620      	mov	r0, r4
 80072f2:	f001 fb0b 	bl	800890c <xTaskCreate>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d001      	beq.n	8007300 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007300:	68fb      	ldr	r3, [r7, #12]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800730a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fc4c 	bl	8008bb0 <vTaskDelete>
  return osOK;
 8007318:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <osDelay+0x16>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	e000      	b.n	800733a <osDelay+0x18>
 8007338:	2301      	movs	r3, #1
 800733a:	4618      	mov	r0, r3
 800733c:	f001 fcca 	bl	8008cd4 <vTaskDelay>
  
  return osOK;
 8007340:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	4619      	mov	r1, r3
 8007360:	2001      	movs	r0, #1
 8007362:	f000 fc5c 	bl	8007c1e <xQueueCreateMutexStatic>
 8007366:	4603      	mov	r3, r0
 8007368:	e003      	b.n	8007372 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800736a:	2001      	movs	r0, #1
 800736c:	f000 fc3f 	bl	8007bee <xQueueCreateMutex>
 8007370:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <osMutexWait+0x18>
    return osErrorParameter;
 8007390:	2380      	movs	r3, #128	@ 0x80
 8007392:	e03a      	b.n	800740a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d103      	bne.n	80073a8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e009      	b.n	80073bc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d006      	beq.n	80073bc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <osMutexWait+0x40>
      ticks = 1;
 80073b8:	2301      	movs	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80073bc:	f7ff ff30 	bl	8007220 <inHandlerMode>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d017      	beq.n	80073f6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80073c6:	f107 0308 	add.w	r3, r7, #8
 80073ca:	461a      	mov	r2, r3
 80073cc:	2100      	movs	r1, #0
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 f886 	bl	80084e0 <xQueueReceiveFromISR>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d001      	beq.n	80073de <osMutexWait+0x62>
      return osErrorOS;
 80073da:	23ff      	movs	r3, #255	@ 0xff
 80073dc:	e015      	b.n	800740a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d011      	beq.n	8007408 <osMutexWait+0x8c>
 80073e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <osMutexWait+0x98>)
 80073e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	e008      	b.n	8007408 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80073f6:	68f9      	ldr	r1, [r7, #12]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 ff59 	bl	80082b0 <xQueueSemaphoreTake>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d001      	beq.n	8007408 <osMutexWait+0x8c>
    return osErrorOS;
 8007404:	23ff      	movs	r3, #255	@ 0xff
 8007406:	e000      	b.n	800740a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007424:	2300      	movs	r3, #0
 8007426:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007428:	f7ff fefa 	bl	8007220 <inHandlerMode>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007432:	f107 0308 	add.w	r3, r7, #8
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fdb8 	bl	8007fae <xQueueGiveFromISR>
 800743e:	4603      	mov	r3, r0
 8007440:	2b01      	cmp	r3, #1
 8007442:	d001      	beq.n	8007448 <osMutexRelease+0x30>
      return osErrorOS;
 8007444:	23ff      	movs	r3, #255	@ 0xff
 8007446:	e017      	b.n	8007478 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d013      	beq.n	8007476 <osMutexRelease+0x5e>
 800744e:	4b0c      	ldr	r3, [pc, #48]	@ (8007480 <osMutexRelease+0x68>)
 8007450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	e00a      	b.n	8007476 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fbf4 	bl	8007c54 <xQueueGenericSend>
 800746c:	4603      	mov	r3, r0
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007472:	23ff      	movs	r3, #255	@ 0xff
 8007474:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	e000ed04 	.word	0xe000ed04

08007484 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00f      	beq.n	80074b6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10a      	bne.n	80074b2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2203      	movs	r2, #3
 80074a2:	9200      	str	r2, [sp, #0]
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	2001      	movs	r0, #1
 80074aa:	f000 fa9d 	bl	80079e8 <xQueueGenericCreateStatic>
 80074ae:	4603      	mov	r3, r0
 80074b0:	e016      	b.n	80074e0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e014      	b.n	80074e0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d110      	bne.n	80074de <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80074bc:	2203      	movs	r2, #3
 80074be:	2100      	movs	r1, #0
 80074c0:	2001      	movs	r0, #1
 80074c2:	f000 fb18 	bl	8007af6 <xQueueGenericCreate>
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <osSemaphoreCreate+0x56>
 80074ce:	2300      	movs	r3, #0
 80074d0:	2200      	movs	r2, #0
 80074d2:	2100      	movs	r1, #0
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fbbd 	bl	8007c54 <xQueueGenericSend>
      return sema;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	e000      	b.n	80074e0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80074de:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80074fc:	2380      	movs	r3, #128	@ 0x80
 80074fe:	e03a      	b.n	8007576 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d103      	bne.n	8007514 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	e009      	b.n	8007528 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d006      	beq.n	8007528 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <osSemaphoreWait+0x40>
      ticks = 1;
 8007524:	2301      	movs	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007528:	f7ff fe7a 	bl	8007220 <inHandlerMode>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	461a      	mov	r2, r3
 8007538:	2100      	movs	r1, #0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 ffd0 	bl	80084e0 <xQueueReceiveFromISR>
 8007540:	4603      	mov	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d001      	beq.n	800754a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007546:	23ff      	movs	r3, #255	@ 0xff
 8007548:	e015      	b.n	8007576 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <osSemaphoreWait+0x8c>
 8007550:	4b0b      	ldr	r3, [pc, #44]	@ (8007580 <osSemaphoreWait+0x98>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	e008      	b.n	8007574 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fea3 	bl	80082b0 <xQueueSemaphoreTake>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d001      	beq.n	8007574 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007570:	23ff      	movs	r3, #255	@ 0xff
 8007572:	e000      	b.n	8007576 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007594:	f7ff fe44 	bl	8007220 <inHandlerMode>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fd02 	bl	8007fae <xQueueGiveFromISR>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d001      	beq.n	80075b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80075b0:	23ff      	movs	r3, #255	@ 0xff
 80075b2:	e017      	b.n	80075e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d013      	beq.n	80075e2 <osSemaphoreRelease+0x5e>
 80075ba:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <osSemaphoreRelease+0x68>)
 80075bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	e00a      	b.n	80075e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80075cc:	2300      	movs	r3, #0
 80075ce:	2200      	movs	r2, #0
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb3e 	bl	8007c54 <xQueueGenericSend>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d001      	beq.n	80075e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80075de:	23ff      	movs	r3, #255	@ 0xff
 80075e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <osMessageCreate+0x36>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00d      	beq.n	8007626 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6859      	ldr	r1, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2400      	movs	r4, #0
 800761c:	9400      	str	r4, [sp, #0]
 800761e:	f000 f9e3 	bl	80079e8 <xQueueGenericCreateStatic>
 8007622:	4603      	mov	r3, r0
 8007624:	e008      	b.n	8007638 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	4619      	mov	r1, r3
 8007632:	f000 fa60 	bl	8007af6 <xQueueGenericCreate>
 8007636:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <osMessagePut+0x1e>
    ticks = 1;
 800765a:	2301      	movs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800765e:	f7ff fddf 	bl	8007220 <inHandlerMode>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d018      	beq.n	800769a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007668:	f107 0210 	add.w	r2, r7, #16
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	2300      	movs	r3, #0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fbf8 	bl	8007e68 <xQueueGenericSendFromISR>
 8007678:	4603      	mov	r3, r0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d001      	beq.n	8007682 <osMessagePut+0x42>
      return osErrorOS;
 800767e:	23ff      	movs	r3, #255	@ 0xff
 8007680:	e018      	b.n	80076b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d014      	beq.n	80076b2 <osMessagePut+0x72>
 8007688:	4b0c      	ldr	r3, [pc, #48]	@ (80076bc <osMessagePut+0x7c>)
 800768a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	e00b      	b.n	80076b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800769a:	f107 0108 	add.w	r1, r7, #8
 800769e:	2300      	movs	r3, #0
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fad6 	bl	8007c54 <xQueueGenericSend>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d001      	beq.n	80076b2 <osMessagePut+0x72>
      return osErrorOS;
 80076ae:	23ff      	movs	r3, #255	@ 0xff
 80076b0:	e000      	b.n	80076b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80076c0:	b590      	push	{r4, r7, lr}
 80076c2:	b08b      	sub	sp, #44	@ 0x2c
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80076da:	2380      	movs	r3, #128	@ 0x80
 80076dc:	617b      	str	r3, [r7, #20]
    return event;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	461c      	mov	r4, r3
 80076e2:	f107 0314 	add.w	r3, r7, #20
 80076e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076ee:	e054      	b.n	800779a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d103      	bne.n	8007708 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007700:	f04f 33ff 	mov.w	r3, #4294967295
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
 8007706:	e009      	b.n	800771c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d006      	beq.n	800771c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <osMessageGet+0x5c>
      ticks = 1;
 8007718:	2301      	movs	r3, #1
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800771c:	f7ff fd80 	bl	8007220 <inHandlerMode>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01c      	beq.n	8007760 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007726:	f107 0220 	add.w	r2, r7, #32
 800772a:	f107 0314 	add.w	r3, r7, #20
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	68b8      	ldr	r0, [r7, #8]
 8007734:	f000 fed4 	bl	80084e0 <xQueueReceiveFromISR>
 8007738:	4603      	mov	r3, r0
 800773a:	2b01      	cmp	r3, #1
 800773c:	d102      	bne.n	8007744 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800773e:	2310      	movs	r3, #16
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e001      	b.n	8007748 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01d      	beq.n	800778a <osMessageGet+0xca>
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <osMessageGet+0xe4>)
 8007750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	e014      	b.n	800778a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	3304      	adds	r3, #4
 8007766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007768:	4619      	mov	r1, r3
 800776a:	68b8      	ldr	r0, [r7, #8]
 800776c:	f000 fcb8 	bl	80080e0 <xQueueReceive>
 8007770:	4603      	mov	r3, r0
 8007772:	2b01      	cmp	r3, #1
 8007774:	d102      	bne.n	800777c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007776:	2310      	movs	r3, #16
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	e006      	b.n	800778a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <osMessageGet+0xc6>
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <osMessageGet+0xc8>
 8007786:	2340      	movs	r3, #64	@ 0x40
 8007788:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	461c      	mov	r4, r3
 800778e:	f107 0314 	add.w	r3, r7, #20
 8007792:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	372c      	adds	r7, #44	@ 0x2c
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd90      	pop	{r4, r7, pc}
 80077a2:	bf00      	nop
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f103 0208 	add.w	r2, r3, #8
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f04f 32ff 	mov.w	r2, #4294967295
 80077c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f103 0208 	add.w	r2, r3, #8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f103 0208 	add.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	601a      	str	r2, [r3, #0]
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d103      	bne.n	800786a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e00c      	b.n	8007884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3308      	adds	r3, #8
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e002      	b.n	8007878 <vListInsert+0x2e>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	429a      	cmp	r2, r3
 8007882:	d2f6      	bcs.n	8007872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	601a      	str	r2, [r3, #0]
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6892      	ldr	r2, [r2, #8]
 80078d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6852      	ldr	r2, [r2, #4]
 80078dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d103      	bne.n	80078f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	1e5a      	subs	r2, r3, #1
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10d      	bne.n	8007940 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007928:	b672      	cpsid	i
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	b662      	cpsie	i
 8007938:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800793a:	bf00      	nop
 800793c:	bf00      	nop
 800793e:	e7fd      	b.n	800793c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007940:	f002 f9ac 	bl	8009c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007970:	3b01      	subs	r3, #1
 8007972:	68f9      	ldr	r1, [r7, #12]
 8007974:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007976:	fb01 f303 	mul.w	r3, r1, r3
 800797a:	441a      	add	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	22ff      	movs	r2, #255	@ 0xff
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	22ff      	movs	r2, #255	@ 0xff
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d114      	bne.n	80079c0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01a      	beq.n	80079d4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3310      	adds	r3, #16
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fc56 	bl	8009254 <xTaskRemoveFromEventList>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d012      	beq.n	80079d4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079ae:	4b0d      	ldr	r3, [pc, #52]	@ (80079e4 <xQueueGenericReset+0xd4>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	e009      	b.n	80079d4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3310      	adds	r3, #16
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff feef 	bl	80077a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3324      	adds	r3, #36	@ 0x24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff feea 	bl	80077a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079d4:	f002 f998 	bl	8009d08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079d8:	2301      	movs	r3, #1
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08e      	sub	sp, #56	@ 0x38
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10d      	bne.n	8007a18 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	b672      	cpsid	i
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	b662      	cpsie	i
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10d      	bne.n	8007a3a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	b672      	cpsid	i
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	b662      	cpsie	i
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <xQueueGenericCreateStatic+0x5e>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <xQueueGenericCreateStatic+0x62>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <xQueueGenericCreateStatic+0x64>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10d      	bne.n	8007a6c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	623b      	str	r3, [r7, #32]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <xQueueGenericCreateStatic+0x90>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <xQueueGenericCreateStatic+0x94>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <xQueueGenericCreateStatic+0x96>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10d      	bne.n	8007a9e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	b672      	cpsid	i
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	b662      	cpsie	i
 8007a96:	61fb      	str	r3, [r7, #28]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a9e:	2348      	movs	r3, #72	@ 0x48
 8007aa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b48      	cmp	r3, #72	@ 0x48
 8007aa6:	d00d      	beq.n	8007ac4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	b672      	cpsid	i
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	b662      	cpsie	i
 8007abc:	61bb      	str	r3, [r7, #24]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ac4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ad8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f848 	bl	8007b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3730      	adds	r7, #48	@ 0x30
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b08a      	sub	sp, #40	@ 0x28
 8007afa:	af02      	add	r7, sp, #8
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	4613      	mov	r3, r2
 8007b02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10d      	bne.n	8007b26 <xQueueGenericCreate+0x30>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0e:	b672      	cpsid	i
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	b662      	cpsie	i
 8007b1e:	613b      	str	r3, [r7, #16]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
 8007b30:	e004      	b.n	8007b3c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3348      	adds	r3, #72	@ 0x48
 8007b40:	4618      	mov	r0, r3
 8007b42:	f002 f9d9 	bl	8009ef8 <pvPortMalloc>
 8007b46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d011      	beq.n	8007b72 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	3348      	adds	r3, #72	@ 0x48
 8007b56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b60:	79fa      	ldrb	r2, [r7, #7]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4613      	mov	r3, r2
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f805 	bl	8007b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b72:	69bb      	ldr	r3, [r7, #24]
	}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e002      	b.n	8007b9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007baa:	2101      	movs	r1, #1
 8007bac:	69b8      	ldr	r0, [r7, #24]
 8007bae:	f7ff feaf 	bl	8007910 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00e      	beq.n	8007be6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2100      	movs	r1, #0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f837 	bl	8007c54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6939      	ldr	r1, [r7, #16]
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff75 	bl	8007af6 <xQueueGenericCreate>
 8007c0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff ffd3 	bl	8007bba <prvInitialiseMutex>

		return xNewQueue;
 8007c14:	68fb      	ldr	r3, [r7, #12]
	}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b088      	sub	sp, #32
 8007c22:	af02      	add	r7, sp, #8
 8007c24:	4603      	mov	r3, r0
 8007c26:	6039      	str	r1, [r7, #0]
 8007c28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	6939      	ldr	r1, [r7, #16]
 8007c3c:	6978      	ldr	r0, [r7, #20]
 8007c3e:	f7ff fed3 	bl	80079e8 <xQueueGenericCreateStatic>
 8007c42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff ffb8 	bl	8007bba <prvInitialiseMutex>

		return xNewQueue;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
	}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	@ 0x38
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c62:	2300      	movs	r3, #0
 8007c64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10d      	bne.n	8007c8c <xQueueGenericSend+0x38>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	b672      	cpsid	i
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	b662      	cpsie	i
 8007c84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <xQueueGenericSend+0x46>
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <xQueueGenericSend+0x4a>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <xQueueGenericSend+0x4c>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10d      	bne.n	8007cc0 <xQueueGenericSend+0x6c>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	b672      	cpsid	i
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	b662      	cpsie	i
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d103      	bne.n	8007cce <xQueueGenericSend+0x7a>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <xQueueGenericSend+0x7e>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <xQueueGenericSend+0x80>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <xQueueGenericSend+0xa0>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	623b      	str	r3, [r7, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cf4:	f001 fc7c 	bl	80095f0 <xTaskGetSchedulerState>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <xQueueGenericSend+0xb0>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <xQueueGenericSend+0xb4>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <xQueueGenericSend+0xb6>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <xQueueGenericSend+0xd6>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	b672      	cpsid	i
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	b662      	cpsie	i
 8007d22:	61fb      	str	r3, [r7, #28]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d2a:	f001 ffb7 	bl	8009c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d302      	bcc.n	8007d40 <xQueueGenericSend+0xec>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d129      	bne.n	8007d94 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d46:	f000 fc6b 	bl	8008620 <prvCopyDataToQueue>
 8007d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d010      	beq.n	8007d76 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	3324      	adds	r3, #36	@ 0x24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fa7b 	bl	8009254 <xTaskRemoveFromEventList>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d013      	beq.n	8007d8c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d64:	4b3f      	ldr	r3, [pc, #252]	@ (8007e64 <xQueueGenericSend+0x210>)
 8007d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	e00a      	b.n	8007d8c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d7c:	4b39      	ldr	r3, [pc, #228]	@ (8007e64 <xQueueGenericSend+0x210>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d8c:	f001 ffbc 	bl	8009d08 <vPortExitCritical>
				return pdPASS;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e063      	b.n	8007e5c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d103      	bne.n	8007da2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d9a:	f001 ffb5 	bl	8009d08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e05c      	b.n	8007e5c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007da8:	f107 0314 	add.w	r3, r7, #20
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 fab7 	bl	8009320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007db2:	2301      	movs	r3, #1
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007db6:	f001 ffa7 	bl	8009d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dba:	f001 f831 	bl	8008e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dbe:	f001 ff6d 	bl	8009c9c <vPortEnterCritical>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dc8:	b25b      	sxtb	r3, r3
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d103      	bne.n	8007dd8 <xQueueGenericSend+0x184>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d103      	bne.n	8007dee <xQueueGenericSend+0x19a>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dee:	f001 ff8b 	bl	8009d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007df2:	1d3a      	adds	r2, r7, #4
 8007df4:	f107 0314 	add.w	r3, r7, #20
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 faa6 	bl	800934c <xTaskCheckForTimeOut>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d124      	bne.n	8007e50 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e08:	f000 fd02 	bl	8008810 <prvIsQueueFull>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d018      	beq.n	8007e44 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	3310      	adds	r3, #16
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 f9f2 	bl	8009204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e22:	f000 fc8d 	bl	8008740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e26:	f001 f809 	bl	8008e3c <xTaskResumeAll>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f47f af7c 	bne.w	8007d2a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007e32:	4b0c      	ldr	r3, [pc, #48]	@ (8007e64 <xQueueGenericSend+0x210>)
 8007e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	e772      	b.n	8007d2a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e46:	f000 fc7b 	bl	8008740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e4a:	f000 fff7 	bl	8008e3c <xTaskResumeAll>
 8007e4e:	e76c      	b.n	8007d2a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e52:	f000 fc75 	bl	8008740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e56:	f000 fff1 	bl	8008e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3738      	adds	r7, #56	@ 0x38
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08e      	sub	sp, #56	@ 0x38
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10d      	bne.n	8007e9c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <xQueueGenericSendFromISR+0x42>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <xQueueGenericSendFromISR+0x46>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <xQueueGenericSendFromISR+0x48>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10d      	bne.n	8007ed0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	b672      	cpsid	i
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	b662      	cpsie	i
 8007ec8:	623b      	str	r3, [r7, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d103      	bne.n	8007ede <xQueueGenericSendFromISR+0x76>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <xQueueGenericSendFromISR+0x7a>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <xQueueGenericSendFromISR+0x7c>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10d      	bne.n	8007f04 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	b672      	cpsid	i
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	b662      	cpsie	i
 8007efc:	61fb      	str	r3, [r7, #28]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f04:	f001 ffb2 	bl	8009e6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f08:	f3ef 8211 	mrs	r2, BASEPRI
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	61ba      	str	r2, [r7, #24]
 8007f22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d302      	bcc.n	8007f3a <xQueueGenericSendFromISR+0xd2>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d12c      	bne.n	8007f94 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f4a:	f000 fb69 	bl	8008620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d112      	bne.n	8007f7e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d016      	beq.n	8007f8e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	3324      	adds	r3, #36	@ 0x24
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 f975 	bl	8009254 <xTaskRemoveFromEventList>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00e      	beq.n	8007f8e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e007      	b.n	8007f8e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	b25a      	sxtb	r2, r3
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007f92:	e001      	b.n	8007f98 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3738      	adds	r7, #56	@ 0x38
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b08e      	sub	sp, #56	@ 0x38
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <xQueueGiveFromISR+0x30>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	b672      	cpsid	i
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	b662      	cpsie	i
 8007fd6:	623b      	str	r3, [r7, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <xQueueGiveFromISR+0x54>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	b672      	cpsid	i
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	b662      	cpsie	i
 8007ffa:	61fb      	str	r3, [r7, #28]
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	e7fd      	b.n	8007ffe <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d103      	bne.n	8008012 <xQueueGiveFromISR+0x64>
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <xQueueGiveFromISR+0x68>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <xQueueGiveFromISR+0x6a>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10d      	bne.n	8008038 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	b672      	cpsid	i
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	b662      	cpsie	i
 8008030:	61bb      	str	r3, [r7, #24]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008038:	f001 ff18 	bl	8009e6c <vPortValidateInterruptPriority>
	__asm volatile
 800803c:	f3ef 8211 	mrs	r2, BASEPRI
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	b672      	cpsid	i
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	b662      	cpsie	i
 8008054:	617a      	str	r2, [r7, #20]
 8008056:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008058:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800805a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008060:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008068:	429a      	cmp	r2, r3
 800806a:	d22b      	bcs.n	80080c4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800807e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d112      	bne.n	80080ae <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d016      	beq.n	80080be <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	3324      	adds	r3, #36	@ 0x24
 8008094:	4618      	mov	r0, r3
 8008096:	f001 f8dd 	bl	8009254 <xTaskRemoveFromEventList>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	e007      	b.n	80080be <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080b2:	3301      	adds	r3, #1
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	b25a      	sxtb	r2, r3
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80080be:	2301      	movs	r3, #1
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	e001      	b.n	80080c8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f383 8811 	msr	BASEPRI, r3
}
 80080d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3738      	adds	r7, #56	@ 0x38
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	@ 0x30
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10d      	bne.n	8008116 <xQueueReceive+0x36>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	b672      	cpsid	i
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	b662      	cpsie	i
 800810e:	623b      	str	r3, [r7, #32]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d103      	bne.n	8008124 <xQueueReceive+0x44>
 800811c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <xQueueReceive+0x48>
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <xQueueReceive+0x4a>
 8008128:	2300      	movs	r3, #0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10d      	bne.n	800814a <xQueueReceive+0x6a>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	b672      	cpsid	i
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	b662      	cpsie	i
 8008142:	61fb      	str	r3, [r7, #28]
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	e7fd      	b.n	8008146 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800814a:	f001 fa51 	bl	80095f0 <xTaskGetSchedulerState>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <xQueueReceive+0x7a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <xQueueReceive+0x7e>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueReceive+0x80>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10d      	bne.n	8008180 <xQueueReceive+0xa0>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	b672      	cpsid	i
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	b662      	cpsie	i
 8008178:	61bb      	str	r3, [r7, #24]
}
 800817a:	bf00      	nop
 800817c:	bf00      	nop
 800817e:	e7fd      	b.n	800817c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008180:	f001 fd8c 	bl	8009c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01f      	beq.n	80081d0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008194:	f000 faae 	bl	80086f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	1e5a      	subs	r2, r3, #1
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00f      	beq.n	80081c8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	3310      	adds	r3, #16
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f851 	bl	8009254 <xTaskRemoveFromEventList>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081b8:	4b3c      	ldr	r3, [pc, #240]	@ (80082ac <xQueueReceive+0x1cc>)
 80081ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081c8:	f001 fd9e 	bl	8009d08 <vPortExitCritical>
				return pdPASS;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e069      	b.n	80082a4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d103      	bne.n	80081de <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081d6:	f001 fd97 	bl	8009d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081da:	2300      	movs	r3, #0
 80081dc:	e062      	b.n	80082a4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e4:	f107 0310 	add.w	r3, r7, #16
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 f899 	bl	8009320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081f2:	f001 fd89 	bl	8009d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081f6:	f000 fe13 	bl	8008e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081fa:	f001 fd4f 	bl	8009c9c <vPortEnterCritical>
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008204:	b25b      	sxtb	r3, r3
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d103      	bne.n	8008214 <xQueueReceive+0x134>
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008216:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800821a:	b25b      	sxtb	r3, r3
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d103      	bne.n	800822a <xQueueReceive+0x14a>
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800822a:	f001 fd6d 	bl	8009d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800822e:	1d3a      	adds	r2, r7, #4
 8008230:	f107 0310 	add.w	r3, r7, #16
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f001 f888 	bl	800934c <xTaskCheckForTimeOut>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d123      	bne.n	800828a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008244:	f000 face 	bl	80087e4 <prvIsQueueEmpty>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d017      	beq.n	800827e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800824e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008250:	3324      	adds	r3, #36	@ 0x24
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f000 ffd4 	bl	8009204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800825c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800825e:	f000 fa6f 	bl	8008740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008262:	f000 fdeb 	bl	8008e3c <xTaskResumeAll>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d189      	bne.n	8008180 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800826c:	4b0f      	ldr	r3, [pc, #60]	@ (80082ac <xQueueReceive+0x1cc>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	e780      	b.n	8008180 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800827e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008280:	f000 fa5e 	bl	8008740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008284:	f000 fdda 	bl	8008e3c <xTaskResumeAll>
 8008288:	e77a      	b.n	8008180 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800828a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800828c:	f000 fa58 	bl	8008740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008290:	f000 fdd4 	bl	8008e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008296:	f000 faa5 	bl	80087e4 <prvIsQueueEmpty>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	f43f af6f 	beq.w	8008180 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3730      	adds	r7, #48	@ 0x30
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	e000ed04 	.word	0xe000ed04

080082b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08e      	sub	sp, #56	@ 0x38
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ba:	2300      	movs	r3, #0
 80082bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10d      	bne.n	80082e8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	b672      	cpsid	i
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	b662      	cpsie	i
 80082e0:	623b      	str	r3, [r7, #32]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	b672      	cpsid	i
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	b662      	cpsie	i
 8008304:	61fb      	str	r3, [r7, #28]
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800830c:	f001 f970 	bl	80095f0 <xTaskGetSchedulerState>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <xQueueSemaphoreTake+0x6c>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <xQueueSemaphoreTake+0x70>
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <xQueueSemaphoreTake+0x72>
 8008320:	2300      	movs	r3, #0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10d      	bne.n	8008342 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	61bb      	str	r3, [r7, #24]
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	e7fd      	b.n	800833e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008342:	f001 fcab 	bl	8009c9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800834c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d024      	beq.n	800839c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	1e5a      	subs	r2, r3, #1
 8008356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008358:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008362:	f001 fb0f 	bl	8009984 <pvTaskIncrementMutexHeldCount>
 8008366:	4602      	mov	r2, r0
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800836c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00f      	beq.n	8008394 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008376:	3310      	adds	r3, #16
 8008378:	4618      	mov	r0, r3
 800837a:	f000 ff6b 	bl	8009254 <xTaskRemoveFromEventList>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008384:	4b55      	ldr	r3, [pc, #340]	@ (80084dc <xQueueSemaphoreTake+0x22c>)
 8008386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008394:	f001 fcb8 	bl	8009d08 <vPortExitCritical>
				return pdPASS;
 8008398:	2301      	movs	r3, #1
 800839a:	e09a      	b.n	80084d2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d114      	bne.n	80083cc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00d      	beq.n	80083c4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
 80083bc:	617b      	str	r3, [r7, #20]
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083c4:	f001 fca0 	bl	8009d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e082      	b.n	80084d2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083d2:	f107 030c 	add.w	r3, r7, #12
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 ffa2 	bl	8009320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e0:	f001 fc92 	bl	8009d08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e4:	f000 fd1c 	bl	8008e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083e8:	f001 fc58 	bl	8009c9c <vPortEnterCritical>
 80083ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d103      	bne.n	8008402 <xQueueSemaphoreTake+0x152>
 80083fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008408:	b25b      	sxtb	r3, r3
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d103      	bne.n	8008418 <xQueueSemaphoreTake+0x168>
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008418:	f001 fc76 	bl	8009d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800841c:	463a      	mov	r2, r7
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f000 ff91 	bl	800934c <xTaskCheckForTimeOut>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d132      	bne.n	8008496 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008432:	f000 f9d7 	bl	80087e4 <prvIsQueueEmpty>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d026      	beq.n	800848a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008444:	f001 fc2a 	bl	8009c9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4618      	mov	r0, r3
 800844e:	f001 f8ed 	bl	800962c <xTaskPriorityInherit>
 8008452:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008454:	f001 fc58 	bl	8009d08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845a:	3324      	adds	r3, #36	@ 0x24
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fecf 	bl	8009204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008466:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008468:	f000 f96a 	bl	8008740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800846c:	f000 fce6 	bl	8008e3c <xTaskResumeAll>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	f47f af65 	bne.w	8008342 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008478:	4b18      	ldr	r3, [pc, #96]	@ (80084dc <xQueueSemaphoreTake+0x22c>)
 800847a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	e75b      	b.n	8008342 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800848a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800848c:	f000 f958 	bl	8008740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008490:	f000 fcd4 	bl	8008e3c <xTaskResumeAll>
 8008494:	e755      	b.n	8008342 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008498:	f000 f952 	bl	8008740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800849c:	f000 fcce 	bl	8008e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084a2:	f000 f99f 	bl	80087e4 <prvIsQueueEmpty>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f43f af4a 	beq.w	8008342 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80084b4:	f001 fbf2 	bl	8009c9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084ba:	f000 f899 	bl	80085f0 <prvGetDisinheritPriorityAfterTimeout>
 80084be:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 f9bc 	bl	8009844 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084cc:	f001 fc1c 	bl	8009d08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3738      	adds	r7, #56	@ 0x38
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	@ 0x38
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10d      	bne.n	8008512 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	b672      	cpsid	i
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	b662      	cpsie	i
 800850a:	623b      	str	r3, [r7, #32]
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <xQueueReceiveFromISR+0x40>
 8008518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <xQueueReceiveFromISR+0x44>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <xQueueReceiveFromISR+0x46>
 8008524:	2300      	movs	r3, #0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10d      	bne.n	8008546 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852e:	b672      	cpsid	i
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	b662      	cpsie	i
 800853e:	61fb      	str	r3, [r7, #28]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008546:	f001 fc91 	bl	8009e6c <vPortValidateInterruptPriority>
	__asm volatile
 800854a:	f3ef 8211 	mrs	r2, BASEPRI
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	b672      	cpsid	i
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	b662      	cpsie	i
 8008562:	61ba      	str	r2, [r7, #24]
 8008564:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008566:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008568:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d02f      	beq.n	80085d6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800857c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008584:	f000 f8b6 	bl	80086f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	1e5a      	subs	r2, r3, #1
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008590:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d112      	bne.n	80085c0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	3310      	adds	r3, #16
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fe54 	bl	8009254 <xTaskRemoveFromEventList>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00e      	beq.n	80085d0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e007      	b.n	80085d0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085c4:	3301      	adds	r3, #1
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	b25a      	sxtb	r2, r3
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80085d0:	2301      	movs	r3, #1
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d4:	e001      	b.n	80085da <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f383 8811 	msr	BASEPRI, r3
}
 80085e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3738      	adds	r7, #56	@ 0x38
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1c3 0307 	rsb	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e001      	b.n	8008612 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008612:	68fb      	ldr	r3, [r7, #12]
	}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d14d      	bne.n	80086e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	4618      	mov	r0, r3
 800864c:	f001 f86e 	bl	800972c <xTaskPriorityDisinherit>
 8008650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	609a      	str	r2, [r3, #8]
 8008658:	e043      	b.n	80086e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d119      	bne.n	8008694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6858      	ldr	r0, [r3, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	461a      	mov	r2, r3
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	f00f fc35 	bl	8017eda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	441a      	add	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	429a      	cmp	r2, r3
 8008688:	d32b      	bcc.n	80086e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	605a      	str	r2, [r3, #4]
 8008692:	e026      	b.n	80086e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68d8      	ldr	r0, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869c:	461a      	mov	r2, r3
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	f00f fc1b 	bl	8017eda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ac:	425b      	negs	r3, r3
 80086ae:	441a      	add	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d207      	bcs.n	80086d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c8:	425b      	negs	r3, r3
 80086ca:	441a      	add	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d105      	bne.n	80086e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	3b01      	subs	r3, #1
 80086e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086ea:	697b      	ldr	r3, [r7, #20]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d018      	beq.n	8008738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	441a      	add	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	429a      	cmp	r2, r3
 800871e:	d303      	bcc.n	8008728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68d9      	ldr	r1, [r3, #12]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008730:	461a      	mov	r2, r3
 8008732:	6838      	ldr	r0, [r7, #0]
 8008734:	f00f fbd1 	bl	8017eda <memcpy>
	}
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008748:	f001 faa8 	bl	8009c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008754:	e011      	b.n	800877a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	2b00      	cmp	r3, #0
 800875c:	d012      	beq.n	8008784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3324      	adds	r3, #36	@ 0x24
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fd76 	bl	8009254 <xTaskRemoveFromEventList>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800876e:	f000 fe55 	bl	800941c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	3b01      	subs	r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800877a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dce9      	bgt.n	8008756 <prvUnlockQueue+0x16>
 8008782:	e000      	b.n	8008786 <prvUnlockQueue+0x46>
					break;
 8008784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	22ff      	movs	r2, #255	@ 0xff
 800878a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800878e:	f001 fabb 	bl	8009d08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008792:	f001 fa83 	bl	8009c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800879c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800879e:	e011      	b.n	80087c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d012      	beq.n	80087ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3310      	adds	r3, #16
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fd51 	bl	8009254 <xTaskRemoveFromEventList>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087b8:	f000 fe30 	bl	800941c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	3b01      	subs	r3, #1
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dce9      	bgt.n	80087a0 <prvUnlockQueue+0x60>
 80087cc:	e000      	b.n	80087d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	22ff      	movs	r2, #255	@ 0xff
 80087d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087d8:	f001 fa96 	bl	8009d08 <vPortExitCritical>
}
 80087dc:	bf00      	nop
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087ec:	f001 fa56 	bl	8009c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e001      	b.n	8008802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008802:	f001 fa81 	bl	8009d08 <vPortExitCritical>

	return xReturn;
 8008806:	68fb      	ldr	r3, [r7, #12]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008818:	f001 fa40 	bl	8009c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008824:	429a      	cmp	r2, r3
 8008826:	d102      	bne.n	800882e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e001      	b.n	8008832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008832:	f001 fa69 	bl	8009d08 <vPortExitCritical>

	return xReturn;
 8008836:	68fb      	ldr	r3, [r7, #12]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08e      	sub	sp, #56	@ 0x38
 8008844:	af04      	add	r7, sp, #16
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800884e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10d      	bne.n	8008870 <xTaskCreateStatic+0x30>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	b672      	cpsid	i
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	b662      	cpsie	i
 8008868:	623b      	str	r3, [r7, #32]
}
 800886a:	bf00      	nop
 800886c:	bf00      	nop
 800886e:	e7fd      	b.n	800886c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10d      	bne.n	8008892 <xTaskCreateStatic+0x52>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	b672      	cpsid	i
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	b662      	cpsie	i
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008892:	23a0      	movs	r3, #160	@ 0xa0
 8008894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2ba0      	cmp	r3, #160	@ 0xa0
 800889a:	d00d      	beq.n	80088b8 <xTaskCreateStatic+0x78>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	b672      	cpsid	i
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	b662      	cpsie	i
 80088b0:	61bb      	str	r3, [r7, #24]
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01e      	beq.n	80088fe <xTaskCreateStatic+0xbe>
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088d8:	2300      	movs	r3, #0
 80088da:	9303      	str	r3, [sp, #12]
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f851 	bl	8008998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088f8:	f000 f8f0 	bl	8008adc <prvAddNewTaskToReadyList>
 80088fc:	e001      	b.n	8008902 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008902:	697b      	ldr	r3, [r7, #20]
	}
 8008904:	4618      	mov	r0, r3
 8008906:	3728      	adds	r7, #40	@ 0x28
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08c      	sub	sp, #48	@ 0x30
 8008910:	af04      	add	r7, sp, #16
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fae9 	bl	8009ef8 <pvPortMalloc>
 8008926:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00e      	beq.n	800894c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800892e:	20a0      	movs	r0, #160	@ 0xa0
 8008930:	f001 fae2 	bl	8009ef8 <pvPortMalloc>
 8008934:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	631a      	str	r2, [r3, #48]	@ 0x30
 8008942:	e005      	b.n	8008950 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008944:	6978      	ldr	r0, [r7, #20]
 8008946:	f001 fba5 	bl	800a094 <vPortFree>
 800894a:	e001      	b.n	8008950 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d017      	beq.n	8008986 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	2300      	movs	r3, #0
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	9302      	str	r3, [sp, #8]
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 f80f 	bl	8008998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800897a:	69f8      	ldr	r0, [r7, #28]
 800897c:	f000 f8ae 	bl	8008adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008980:	2301      	movs	r3, #1
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	e002      	b.n	800898c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800898c:	69bb      	ldr	r3, [r7, #24]
	}
 800898e:	4618      	mov	r0, r3
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80089b0:	440b      	add	r3, r1
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	b672      	cpsid	i
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	b662      	cpsie	i
 80089de:	617b      	str	r3, [r7, #20]
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	e7fd      	b.n	80089e2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01f      	beq.n	8008a2c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089ec:	2300      	movs	r3, #0
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e012      	b.n	8008a18 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	4413      	add	r3, r2
 80089f8:	7819      	ldrb	r1, [r3, #0]
 80089fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	3334      	adds	r3, #52	@ 0x34
 8008a02:	460a      	mov	r2, r1
 8008a04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d006      	beq.n	8008a20 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	3301      	adds	r3, #1
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d9e9      	bls.n	80089f2 <prvInitialiseNewTask+0x5a>
 8008a1e:	e000      	b.n	8008a22 <prvInitialiseNewTask+0x8a>
			{
				break;
 8008a20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a2a:	e003      	b.n	8008a34 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a36:	2b06      	cmp	r3, #6
 8008a38:	d901      	bls.n	8008a3e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a3a:	2306      	movs	r3, #6
 8008a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	3304      	adds	r3, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe fec7 	bl	80077e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5c:	3318      	adds	r3, #24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fec2 	bl	80077e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	f1c3 0207 	rsb	r2, r3, #7
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	334c      	adds	r3, #76	@ 0x4c
 8008a8e:	224c      	movs	r2, #76	@ 0x4c
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f00f f94d 	bl	8017d32 <memset>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad0 <prvInitialiseNewTask+0x138>)
 8008a9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad4 <prvInitialiseNewTask+0x13c>)
 8008aa2:	655a      	str	r2, [r3, #84]	@ 0x54
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad8 <prvInitialiseNewTask+0x140>)
 8008aa8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	68f9      	ldr	r1, [r7, #12]
 8008aae:	69b8      	ldr	r0, [r7, #24]
 8008ab0:	f000 ffe2 	bl	8009a78 <pxPortInitialiseStack>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	2001de88 	.word	0x2001de88
 8008ad4:	2001def0 	.word	0x2001def0
 8008ad8:	2001df58 	.word	0x2001df58

08008adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ae4:	f001 f8da 	bl	8009c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b94 <prvAddNewTaskToReadyList+0xb8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	4a29      	ldr	r2, [pc, #164]	@ (8008b94 <prvAddNewTaskToReadyList+0xb8>)
 8008af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008af2:	4b29      	ldr	r3, [pc, #164]	@ (8008b98 <prvAddNewTaskToReadyList+0xbc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008afa:	4a27      	ldr	r2, [pc, #156]	@ (8008b98 <prvAddNewTaskToReadyList+0xbc>)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b00:	4b24      	ldr	r3, [pc, #144]	@ (8008b94 <prvAddNewTaskToReadyList+0xb8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d110      	bne.n	8008b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b08:	f000 fcac 	bl	8009464 <prvInitialiseTaskLists>
 8008b0c:	e00d      	b.n	8008b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b0e:	4b23      	ldr	r3, [pc, #140]	@ (8008b9c <prvAddNewTaskToReadyList+0xc0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b16:	4b20      	ldr	r3, [pc, #128]	@ (8008b98 <prvAddNewTaskToReadyList+0xbc>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d802      	bhi.n	8008b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b24:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <prvAddNewTaskToReadyList+0xbc>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba0 <prvAddNewTaskToReadyList+0xc4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba0 <prvAddNewTaskToReadyList+0xc4>)
 8008b32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	2201      	movs	r2, #1
 8008b3a:	409a      	lsls	r2, r3
 8008b3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <prvAddNewTaskToReadyList+0xc8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	4a18      	ldr	r2, [pc, #96]	@ (8008ba4 <prvAddNewTaskToReadyList+0xc8>)
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4a15      	ldr	r2, [pc, #84]	@ (8008ba8 <prvAddNewTaskToReadyList+0xcc>)
 8008b54:	441a      	add	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f7fe fe50 	bl	8007802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b62:	f001 f8d1 	bl	8009d08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b66:	4b0d      	ldr	r3, [pc, #52]	@ (8008b9c <prvAddNewTaskToReadyList+0xc0>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00e      	beq.n	8008b8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b98 <prvAddNewTaskToReadyList+0xbc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d207      	bcs.n	8008b8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008bac <prvAddNewTaskToReadyList+0xd0>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	2000d174 	.word	0x2000d174
 8008b98:	2000d074 	.word	0x2000d074
 8008b9c:	2000d180 	.word	0x2000d180
 8008ba0:	2000d190 	.word	0x2000d190
 8008ba4:	2000d17c 	.word	0x2000d17c
 8008ba8:	2000d078 	.word	0x2000d078
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008bb8:	f001 f870 	bl	8009c9c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d102      	bne.n	8008bc8 <vTaskDelete+0x18>
 8008bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cac <vTaskDelete+0xfc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	e000      	b.n	8008bca <vTaskDelete+0x1a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fe73 	bl	80078bc <uxListRemove>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d115      	bne.n	8008c08 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be0:	4933      	ldr	r1, [pc, #204]	@ (8008cb0 <vTaskDelete+0x100>)
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <vTaskDelete+0x58>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	43da      	mvns	r2, r3
 8008bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb4 <vTaskDelete+0x104>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4013      	ands	r3, r2
 8008c04:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb4 <vTaskDelete+0x104>)
 8008c06:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3318      	adds	r3, #24
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fe51 	bl	80078bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008c1a:	4b27      	ldr	r3, [pc, #156]	@ (8008cb8 <vTaskDelete+0x108>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a25      	ldr	r2, [pc, #148]	@ (8008cb8 <vTaskDelete+0x108>)
 8008c22:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008c24:	4b21      	ldr	r3, [pc, #132]	@ (8008cac <vTaskDelete+0xfc>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d10b      	bne.n	8008c46 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4821      	ldr	r0, [pc, #132]	@ (8008cbc <vTaskDelete+0x10c>)
 8008c36:	f7fe fde4 	bl	8007802 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008c3a:	4b21      	ldr	r3, [pc, #132]	@ (8008cc0 <vTaskDelete+0x110>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc0 <vTaskDelete+0x110>)
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e009      	b.n	8008c5a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008c46:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc4 <vTaskDelete+0x114>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc4 <vTaskDelete+0x114>)
 8008c4e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fc75 	bl	8009540 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008c56:	f000 fcab 	bl	80095b0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008c5a:	f001 f855 	bl	8009d08 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc8 <vTaskDelete+0x118>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01e      	beq.n	8008ca4 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8008c66:	4b11      	ldr	r3, [pc, #68]	@ (8008cac <vTaskDelete+0xfc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d119      	bne.n	8008ca4 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008c70:	4b16      	ldr	r3, [pc, #88]	@ (8008ccc <vTaskDelete+0x11c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00d      	beq.n	8008c94 <vTaskDelete+0xe4>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7c:	b672      	cpsid	i
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	b662      	cpsie	i
 8008c8c:	60bb      	str	r3, [r7, #8]
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	e7fd      	b.n	8008c90 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8008c94:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd0 <vTaskDelete+0x120>)
 8008c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ca4:	bf00      	nop
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	2000d074 	.word	0x2000d074
 8008cb0:	2000d078 	.word	0x2000d078
 8008cb4:	2000d17c 	.word	0x2000d17c
 8008cb8:	2000d190 	.word	0x2000d190
 8008cbc:	2000d148 	.word	0x2000d148
 8008cc0:	2000d15c 	.word	0x2000d15c
 8008cc4:	2000d174 	.word	0x2000d174
 8008cc8:	2000d180 	.word	0x2000d180
 8008ccc:	2000d19c 	.word	0x2000d19c
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01a      	beq.n	8008d1c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ce6:	4b15      	ldr	r3, [pc, #84]	@ (8008d3c <vTaskDelay+0x68>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <vTaskDelay+0x36>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	b672      	cpsid	i
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	b662      	cpsie	i
 8008d02:	60bb      	str	r3, [r7, #8]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008d0a:	f000 f889 	bl	8008e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d0e:	2100      	movs	r1, #0
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fe4b 	bl	80099ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d16:	f000 f891 	bl	8008e3c <xTaskResumeAll>
 8008d1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008d22:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <vTaskDelay+0x6c>)
 8008d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	2000d19c 	.word	0x2000d19c
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08a      	sub	sp, #40	@ 0x28
 8008d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d52:	463a      	mov	r2, r7
 8008d54:	1d39      	adds	r1, r7, #4
 8008d56:	f107 0308 	add.w	r3, r7, #8
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f7 fc56 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	9202      	str	r2, [sp, #8]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	460a      	mov	r2, r1
 8008d72:	4923      	ldr	r1, [pc, #140]	@ (8008e00 <vTaskStartScheduler+0xbc>)
 8008d74:	4823      	ldr	r0, [pc, #140]	@ (8008e04 <vTaskStartScheduler+0xc0>)
 8008d76:	f7ff fd63 	bl	8008840 <xTaskCreateStatic>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4a22      	ldr	r2, [pc, #136]	@ (8008e08 <vTaskStartScheduler+0xc4>)
 8008d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d80:	4b21      	ldr	r3, [pc, #132]	@ (8008e08 <vTaskStartScheduler+0xc4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e001      	b.n	8008d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d11d      	bne.n	8008dd4 <vTaskStartScheduler+0x90>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	b672      	cpsid	i
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	b662      	cpsie	i
 8008dac:	613b      	str	r3, [r7, #16]
}
 8008dae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008db0:	4b16      	ldr	r3, [pc, #88]	@ (8008e0c <vTaskStartScheduler+0xc8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	334c      	adds	r3, #76	@ 0x4c
 8008db6:	4a16      	ldr	r2, [pc, #88]	@ (8008e10 <vTaskStartScheduler+0xcc>)
 8008db8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dba:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <vTaskStartScheduler+0xd0>)
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dc2:	4b15      	ldr	r3, [pc, #84]	@ (8008e18 <vTaskStartScheduler+0xd4>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dc8:	4b14      	ldr	r3, [pc, #80]	@ (8008e1c <vTaskStartScheduler+0xd8>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dce:	f000 fee7 	bl	8009ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dd2:	e011      	b.n	8008df8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d10d      	bne.n	8008df8 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	b672      	cpsid	i
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	b662      	cpsie	i
 8008df0:	60fb      	str	r3, [r7, #12]
}
 8008df2:	bf00      	nop
 8008df4:	bf00      	nop
 8008df6:	e7fd      	b.n	8008df4 <vTaskStartScheduler+0xb0>
}
 8008df8:	bf00      	nop
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	08018df4 	.word	0x08018df4
 8008e04:	08009435 	.word	0x08009435
 8008e08:	2000d198 	.word	0x2000d198
 8008e0c:	2000d074 	.word	0x2000d074
 8008e10:	20000040 	.word	0x20000040
 8008e14:	2000d194 	.word	0x2000d194
 8008e18:	2000d180 	.word	0x2000d180
 8008e1c:	2000d178 	.word	0x2000d178

08008e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e24:	4b04      	ldr	r3, [pc, #16]	@ (8008e38 <vTaskSuspendAll+0x18>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4a03      	ldr	r2, [pc, #12]	@ (8008e38 <vTaskSuspendAll+0x18>)
 8008e2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008e2e:	bf00      	nop
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	2000d19c 	.word	0x2000d19c

08008e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e4a:	4b43      	ldr	r3, [pc, #268]	@ (8008f58 <xTaskResumeAll+0x11c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10d      	bne.n	8008e6e <xTaskResumeAll+0x32>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	b672      	cpsid	i
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	b662      	cpsie	i
 8008e66:	603b      	str	r3, [r7, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e6e:	f000 ff15 	bl	8009c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e72:	4b39      	ldr	r3, [pc, #228]	@ (8008f58 <xTaskResumeAll+0x11c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	4a37      	ldr	r2, [pc, #220]	@ (8008f58 <xTaskResumeAll+0x11c>)
 8008e7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e7c:	4b36      	ldr	r3, [pc, #216]	@ (8008f58 <xTaskResumeAll+0x11c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d161      	bne.n	8008f48 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e84:	4b35      	ldr	r3, [pc, #212]	@ (8008f5c <xTaskResumeAll+0x120>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d05d      	beq.n	8008f48 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e8c:	e02e      	b.n	8008eec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8e:	4b34      	ldr	r3, [pc, #208]	@ (8008f60 <xTaskResumeAll+0x124>)
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3318      	adds	r3, #24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fd0e 	bl	80078bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fd09 	bl	80078bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eae:	2201      	movs	r2, #1
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8008f64 <xTaskResumeAll+0x128>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8008f64 <xTaskResumeAll+0x128>)
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4a27      	ldr	r2, [pc, #156]	@ (8008f68 <xTaskResumeAll+0x12c>)
 8008eca:	441a      	add	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f7fe fc95 	bl	8007802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008edc:	4b23      	ldr	r3, [pc, #140]	@ (8008f6c <xTaskResumeAll+0x130>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d302      	bcc.n	8008eec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008ee6:	4b22      	ldr	r3, [pc, #136]	@ (8008f70 <xTaskResumeAll+0x134>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eec:	4b1c      	ldr	r3, [pc, #112]	@ (8008f60 <xTaskResumeAll+0x124>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1cc      	bne.n	8008e8e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008efa:	f000 fb59 	bl	80095b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008efe:	4b1d      	ldr	r3, [pc, #116]	@ (8008f74 <xTaskResumeAll+0x138>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d010      	beq.n	8008f2c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f0a:	f000 f859 	bl	8008fc0 <xTaskIncrementTick>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008f14:	4b16      	ldr	r3, [pc, #88]	@ (8008f70 <xTaskResumeAll+0x134>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f1      	bne.n	8008f0a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <xTaskResumeAll+0x138>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f2c:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <xTaskResumeAll+0x134>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f38:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <xTaskResumeAll+0x13c>)
 8008f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f48:	f000 fede 	bl	8009d08 <vPortExitCritical>

	return xAlreadyYielded;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	2000d19c 	.word	0x2000d19c
 8008f5c:	2000d174 	.word	0x2000d174
 8008f60:	2000d134 	.word	0x2000d134
 8008f64:	2000d17c 	.word	0x2000d17c
 8008f68:	2000d078 	.word	0x2000d078
 8008f6c:	2000d074 	.word	0x2000d074
 8008f70:	2000d188 	.word	0x2000d188
 8008f74:	2000d184 	.word	0x2000d184
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f82:	4b05      	ldr	r3, [pc, #20]	@ (8008f98 <xTaskGetTickCount+0x1c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f88:	687b      	ldr	r3, [r7, #4]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	2000d178 	.word	0x2000d178

08008f9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fa2:	f000 ff63 	bl	8009e6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008faa:	4b04      	ldr	r3, [pc, #16]	@ (8008fbc <xTaskGetTickCountFromISR+0x20>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fb0:	683b      	ldr	r3, [r7, #0]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000d178 	.word	0x2000d178

08008fc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fca:	4b50      	ldr	r3, [pc, #320]	@ (800910c <xTaskIncrementTick+0x14c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f040 808b 	bne.w	80090ea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fd4:	4b4e      	ldr	r3, [pc, #312]	@ (8009110 <xTaskIncrementTick+0x150>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8009110 <xTaskIncrementTick+0x150>)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d123      	bne.n	8009030 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8009114 <xTaskIncrementTick+0x154>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00d      	beq.n	800900e <xTaskIncrementTick+0x4e>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff6:	b672      	cpsid	i
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	b662      	cpsie	i
 8009006:	603b      	str	r3, [r7, #0]
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	e7fd      	b.n	800900a <xTaskIncrementTick+0x4a>
 800900e:	4b41      	ldr	r3, [pc, #260]	@ (8009114 <xTaskIncrementTick+0x154>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	4b40      	ldr	r3, [pc, #256]	@ (8009118 <xTaskIncrementTick+0x158>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a3e      	ldr	r2, [pc, #248]	@ (8009114 <xTaskIncrementTick+0x154>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	4a3e      	ldr	r2, [pc, #248]	@ (8009118 <xTaskIncrementTick+0x158>)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	4b3e      	ldr	r3, [pc, #248]	@ (800911c <xTaskIncrementTick+0x15c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	4a3c      	ldr	r2, [pc, #240]	@ (800911c <xTaskIncrementTick+0x15c>)
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	f000 fac0 	bl	80095b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009030:	4b3b      	ldr	r3, [pc, #236]	@ (8009120 <xTaskIncrementTick+0x160>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	429a      	cmp	r2, r3
 8009038:	d348      	bcc.n	80090cc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800903a:	4b36      	ldr	r3, [pc, #216]	@ (8009114 <xTaskIncrementTick+0x154>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009044:	4b36      	ldr	r3, [pc, #216]	@ (8009120 <xTaskIncrementTick+0x160>)
 8009046:	f04f 32ff 	mov.w	r2, #4294967295
 800904a:	601a      	str	r2, [r3, #0]
					break;
 800904c:	e03e      	b.n	80090cc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904e:	4b31      	ldr	r3, [pc, #196]	@ (8009114 <xTaskIncrementTick+0x154>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d203      	bcs.n	800906e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009066:	4a2e      	ldr	r2, [pc, #184]	@ (8009120 <xTaskIncrementTick+0x160>)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800906c:	e02e      	b.n	80090cc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3304      	adds	r3, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fc22 	bl	80078bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	3318      	adds	r3, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe fc19 	bl	80078bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	2201      	movs	r2, #1
 8009090:	409a      	lsls	r2, r3
 8009092:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <xTaskIncrementTick+0x164>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4313      	orrs	r3, r2
 8009098:	4a22      	ldr	r2, [pc, #136]	@ (8009124 <xTaskIncrementTick+0x164>)
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4a1f      	ldr	r2, [pc, #124]	@ (8009128 <xTaskIncrementTick+0x168>)
 80090aa:	441a      	add	r2, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4619      	mov	r1, r3
 80090b2:	4610      	mov	r0, r2
 80090b4:	f7fe fba5 	bl	8007802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090bc:	4b1b      	ldr	r3, [pc, #108]	@ (800912c <xTaskIncrementTick+0x16c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d3b9      	bcc.n	800903a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80090c6:	2301      	movs	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ca:	e7b6      	b.n	800903a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090cc:	4b17      	ldr	r3, [pc, #92]	@ (800912c <xTaskIncrementTick+0x16c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d2:	4915      	ldr	r1, [pc, #84]	@ (8009128 <xTaskIncrementTick+0x168>)
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d907      	bls.n	80090f4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	e004      	b.n	80090f4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090ea:	4b11      	ldr	r3, [pc, #68]	@ (8009130 <xTaskIncrementTick+0x170>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3301      	adds	r3, #1
 80090f0:	4a0f      	ldr	r2, [pc, #60]	@ (8009130 <xTaskIncrementTick+0x170>)
 80090f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80090f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <xTaskIncrementTick+0x174>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80090fc:	2301      	movs	r3, #1
 80090fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009100:	697b      	ldr	r3, [r7, #20]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	2000d19c 	.word	0x2000d19c
 8009110:	2000d178 	.word	0x2000d178
 8009114:	2000d12c 	.word	0x2000d12c
 8009118:	2000d130 	.word	0x2000d130
 800911c:	2000d18c 	.word	0x2000d18c
 8009120:	2000d194 	.word	0x2000d194
 8009124:	2000d17c 	.word	0x2000d17c
 8009128:	2000d078 	.word	0x2000d078
 800912c:	2000d074 	.word	0x2000d074
 8009130:	2000d184 	.word	0x2000d184
 8009134:	2000d188 	.word	0x2000d188

08009138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800913e:	4b2b      	ldr	r3, [pc, #172]	@ (80091ec <vTaskSwitchContext+0xb4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009146:	4b2a      	ldr	r3, [pc, #168]	@ (80091f0 <vTaskSwitchContext+0xb8>)
 8009148:	2201      	movs	r2, #1
 800914a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800914c:	e047      	b.n	80091de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800914e:	4b28      	ldr	r3, [pc, #160]	@ (80091f0 <vTaskSwitchContext+0xb8>)
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009154:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <vTaskSwitchContext+0xbc>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	fab3 f383 	clz	r3, r3
 8009160:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	f1c3 031f 	rsb	r3, r3, #31
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	4923      	ldr	r1, [pc, #140]	@ (80091f8 <vTaskSwitchContext+0xc0>)
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10d      	bne.n	800919a <vTaskSwitchContext+0x62>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	b672      	cpsid	i
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	b662      	cpsie	i
 8009192:	607b      	str	r3, [r7, #4]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <vTaskSwitchContext+0x5e>
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	4613      	mov	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4a14      	ldr	r2, [pc, #80]	@ (80091f8 <vTaskSwitchContext+0xc0>)
 80091a6:	4413      	add	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	605a      	str	r2, [r3, #4]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	3308      	adds	r3, #8
 80091bc:	429a      	cmp	r2, r3
 80091be:	d104      	bne.n	80091ca <vTaskSwitchContext+0x92>
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	4a0a      	ldr	r2, [pc, #40]	@ (80091fc <vTaskSwitchContext+0xc4>)
 80091d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091d4:	4b09      	ldr	r3, [pc, #36]	@ (80091fc <vTaskSwitchContext+0xc4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	334c      	adds	r3, #76	@ 0x4c
 80091da:	4a09      	ldr	r2, [pc, #36]	@ (8009200 <vTaskSwitchContext+0xc8>)
 80091dc:	6013      	str	r3, [r2, #0]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	2000d19c 	.word	0x2000d19c
 80091f0:	2000d188 	.word	0x2000d188
 80091f4:	2000d17c 	.word	0x2000d17c
 80091f8:	2000d078 	.word	0x2000d078
 80091fc:	2000d074 	.word	0x2000d074
 8009200:	20000040 	.word	0x20000040

08009204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10d      	bne.n	8009230 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	b672      	cpsid	i
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	b662      	cpsie	i
 8009228:	60fb      	str	r3, [r7, #12]
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	e7fd      	b.n	800922c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009230:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <vTaskPlaceOnEventList+0x4c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3318      	adds	r3, #24
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe fb06 	bl	800784a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800923e:	2101      	movs	r1, #1
 8009240:	6838      	ldr	r0, [r7, #0]
 8009242:	f000 fbb3 	bl	80099ac <prvAddCurrentTaskToDelayedList>
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	2000d074 	.word	0x2000d074

08009254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10d      	bne.n	8009286 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926e:	b672      	cpsid	i
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	b662      	cpsie	i
 800927e:	60fb      	str	r3, [r7, #12]
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	e7fd      	b.n	8009282 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3318      	adds	r3, #24
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fb16 	bl	80078bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009290:	4b1d      	ldr	r3, [pc, #116]	@ (8009308 <xTaskRemoveFromEventList+0xb4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d11c      	bne.n	80092d2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	3304      	adds	r3, #4
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe fb0d 	bl	80078bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	2201      	movs	r2, #1
 80092a8:	409a      	lsls	r2, r3
 80092aa:	4b18      	ldr	r3, [pc, #96]	@ (800930c <xTaskRemoveFromEventList+0xb8>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	4a16      	ldr	r2, [pc, #88]	@ (800930c <xTaskRemoveFromEventList+0xb8>)
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4a13      	ldr	r2, [pc, #76]	@ (8009310 <xTaskRemoveFromEventList+0xbc>)
 80092c2:	441a      	add	r2, r3
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f7fe fa99 	bl	8007802 <vListInsertEnd>
 80092d0:	e005      	b.n	80092de <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	3318      	adds	r3, #24
 80092d6:	4619      	mov	r1, r3
 80092d8:	480e      	ldr	r0, [pc, #56]	@ (8009314 <xTaskRemoveFromEventList+0xc0>)
 80092da:	f7fe fa92 	bl	8007802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009318 <xTaskRemoveFromEventList+0xc4>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d905      	bls.n	80092f8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <xTaskRemoveFromEventList+0xc8>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	e001      	b.n	80092fc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092fc:	697b      	ldr	r3, [r7, #20]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	2000d19c 	.word	0x2000d19c
 800930c:	2000d17c 	.word	0x2000d17c
 8009310:	2000d078 	.word	0x2000d078
 8009314:	2000d134 	.word	0x2000d134
 8009318:	2000d074 	.word	0x2000d074
 800931c:	2000d188 	.word	0x2000d188

08009320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009328:	4b06      	ldr	r3, [pc, #24]	@ (8009344 <vTaskInternalSetTimeOutState+0x24>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009330:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <vTaskInternalSetTimeOutState+0x28>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	605a      	str	r2, [r3, #4]
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	2000d18c 	.word	0x2000d18c
 8009348:	2000d178 	.word	0x2000d178

0800934c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009360:	b672      	cpsid	i
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	b662      	cpsie	i
 8009370:	613b      	str	r3, [r7, #16]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10d      	bne.n	800939a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	b672      	cpsid	i
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	b662      	cpsie	i
 8009392:	60fb      	str	r3, [r7, #12]
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	e7fd      	b.n	8009396 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800939a:	f000 fc7f 	bl	8009c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800939e:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <xTaskCheckForTimeOut+0xc8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b6:	d102      	bne.n	80093be <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	e023      	b.n	8009406 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	4b15      	ldr	r3, [pc, #84]	@ (8009418 <xTaskCheckForTimeOut+0xcc>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d007      	beq.n	80093da <xTaskCheckForTimeOut+0x8e>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d302      	bcc.n	80093da <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093d4:	2301      	movs	r3, #1
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	e015      	b.n	8009406 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d20b      	bcs.n	80093fc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	1ad2      	subs	r2, r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ff95 	bl	8009320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	e004      	b.n	8009406 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009406:	f000 fc7f 	bl	8009d08 <vPortExitCritical>

	return xReturn;
 800940a:	69fb      	ldr	r3, [r7, #28]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3720      	adds	r7, #32
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	2000d178 	.word	0x2000d178
 8009418:	2000d18c 	.word	0x2000d18c

0800941c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009420:	4b03      	ldr	r3, [pc, #12]	@ (8009430 <vTaskMissedYield+0x14>)
 8009422:	2201      	movs	r2, #1
 8009424:	601a      	str	r2, [r3, #0]
}
 8009426:	bf00      	nop
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	2000d188 	.word	0x2000d188

08009434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800943c:	f000 f852 	bl	80094e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009440:	4b06      	ldr	r3, [pc, #24]	@ (800945c <prvIdleTask+0x28>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d9f9      	bls.n	800943c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009448:	4b05      	ldr	r3, [pc, #20]	@ (8009460 <prvIdleTask+0x2c>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009458:	e7f0      	b.n	800943c <prvIdleTask+0x8>
 800945a:	bf00      	nop
 800945c:	2000d078 	.word	0x2000d078
 8009460:	e000ed04 	.word	0xe000ed04

08009464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800946a:	2300      	movs	r3, #0
 800946c:	607b      	str	r3, [r7, #4]
 800946e:	e00c      	b.n	800948a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	4613      	mov	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4a12      	ldr	r2, [pc, #72]	@ (80094c4 <prvInitialiseTaskLists+0x60>)
 800947c:	4413      	add	r3, r2
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe f992 	bl	80077a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3301      	adds	r3, #1
 8009488:	607b      	str	r3, [r7, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b06      	cmp	r3, #6
 800948e:	d9ef      	bls.n	8009470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009490:	480d      	ldr	r0, [pc, #52]	@ (80094c8 <prvInitialiseTaskLists+0x64>)
 8009492:	f7fe f989 	bl	80077a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009496:	480d      	ldr	r0, [pc, #52]	@ (80094cc <prvInitialiseTaskLists+0x68>)
 8009498:	f7fe f986 	bl	80077a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800949c:	480c      	ldr	r0, [pc, #48]	@ (80094d0 <prvInitialiseTaskLists+0x6c>)
 800949e:	f7fe f983 	bl	80077a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094a2:	480c      	ldr	r0, [pc, #48]	@ (80094d4 <prvInitialiseTaskLists+0x70>)
 80094a4:	f7fe f980 	bl	80077a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094a8:	480b      	ldr	r0, [pc, #44]	@ (80094d8 <prvInitialiseTaskLists+0x74>)
 80094aa:	f7fe f97d 	bl	80077a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094ae:	4b0b      	ldr	r3, [pc, #44]	@ (80094dc <prvInitialiseTaskLists+0x78>)
 80094b0:	4a05      	ldr	r2, [pc, #20]	@ (80094c8 <prvInitialiseTaskLists+0x64>)
 80094b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094b4:	4b0a      	ldr	r3, [pc, #40]	@ (80094e0 <prvInitialiseTaskLists+0x7c>)
 80094b6:	4a05      	ldr	r2, [pc, #20]	@ (80094cc <prvInitialiseTaskLists+0x68>)
 80094b8:	601a      	str	r2, [r3, #0]
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	2000d078 	.word	0x2000d078
 80094c8:	2000d104 	.word	0x2000d104
 80094cc:	2000d118 	.word	0x2000d118
 80094d0:	2000d134 	.word	0x2000d134
 80094d4:	2000d148 	.word	0x2000d148
 80094d8:	2000d160 	.word	0x2000d160
 80094dc:	2000d12c 	.word	0x2000d12c
 80094e0:	2000d130 	.word	0x2000d130

080094e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ea:	e019      	b.n	8009520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094ec:	f000 fbd6 	bl	8009c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f0:	4b10      	ldr	r3, [pc, #64]	@ (8009534 <prvCheckTasksWaitingTermination+0x50>)
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe f9dd 	bl	80078bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <prvCheckTasksWaitingTermination+0x54>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3b01      	subs	r3, #1
 8009508:	4a0b      	ldr	r2, [pc, #44]	@ (8009538 <prvCheckTasksWaitingTermination+0x54>)
 800950a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800950c:	4b0b      	ldr	r3, [pc, #44]	@ (800953c <prvCheckTasksWaitingTermination+0x58>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3b01      	subs	r3, #1
 8009512:	4a0a      	ldr	r2, [pc, #40]	@ (800953c <prvCheckTasksWaitingTermination+0x58>)
 8009514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009516:	f000 fbf7 	bl	8009d08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f810 	bl	8009540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009520:	4b06      	ldr	r3, [pc, #24]	@ (800953c <prvCheckTasksWaitingTermination+0x58>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e1      	bne.n	80094ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	2000d148 	.word	0x2000d148
 8009538:	2000d174 	.word	0x2000d174
 800953c:	2000d15c 	.word	0x2000d15c

08009540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	334c      	adds	r3, #76	@ 0x4c
 800954c:	4618      	mov	r0, r3
 800954e:	f00e fc09 	bl	8017d64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009558:	2b00      	cmp	r3, #0
 800955a:	d108      	bne.n	800956e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fd97 	bl	800a094 <vPortFree>
				vPortFree( pxTCB );
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fd94 	bl	800a094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800956c:	e01b      	b.n	80095a6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009574:	2b01      	cmp	r3, #1
 8009576:	d103      	bne.n	8009580 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fd8b 	bl	800a094 <vPortFree>
	}
 800957e:	e012      	b.n	80095a6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009586:	2b02      	cmp	r3, #2
 8009588:	d00d      	beq.n	80095a6 <prvDeleteTCB+0x66>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958e:	b672      	cpsid	i
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	b662      	cpsie	i
 800959e:	60fb      	str	r3, [r7, #12]
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	e7fd      	b.n	80095a2 <prvDeleteTCB+0x62>
	}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095b6:	4b0c      	ldr	r3, [pc, #48]	@ (80095e8 <prvResetNextTaskUnblockTime+0x38>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d104      	bne.n	80095ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095c0:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <prvResetNextTaskUnblockTime+0x3c>)
 80095c2:	f04f 32ff 	mov.w	r2, #4294967295
 80095c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095c8:	e008      	b.n	80095dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ca:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <prvResetNextTaskUnblockTime+0x38>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	4a04      	ldr	r2, [pc, #16]	@ (80095ec <prvResetNextTaskUnblockTime+0x3c>)
 80095da:	6013      	str	r3, [r2, #0]
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	2000d12c 	.word	0x2000d12c
 80095ec:	2000d194 	.word	0x2000d194

080095f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <xTaskGetSchedulerState+0x34>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095fe:	2301      	movs	r3, #1
 8009600:	607b      	str	r3, [r7, #4]
 8009602:	e008      	b.n	8009616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009604:	4b08      	ldr	r3, [pc, #32]	@ (8009628 <xTaskGetSchedulerState+0x38>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800960c:	2302      	movs	r3, #2
 800960e:	607b      	str	r3, [r7, #4]
 8009610:	e001      	b.n	8009616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009612:	2300      	movs	r3, #0
 8009614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009616:	687b      	ldr	r3, [r7, #4]
	}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	2000d180 	.word	0x2000d180
 8009628:	2000d19c 	.word	0x2000d19c

0800962c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d069      	beq.n	8009716 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009646:	4b36      	ldr	r3, [pc, #216]	@ (8009720 <xTaskPriorityInherit+0xf4>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	429a      	cmp	r2, r3
 800964e:	d259      	bcs.n	8009704 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	db06      	blt.n	8009666 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009658:	4b31      	ldr	r3, [pc, #196]	@ (8009720 <xTaskPriorityInherit+0xf4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	f1c3 0207 	rsb	r2, r3, #7
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6959      	ldr	r1, [r3, #20]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4a2b      	ldr	r2, [pc, #172]	@ (8009724 <xTaskPriorityInherit+0xf8>)
 8009678:	4413      	add	r3, r2
 800967a:	4299      	cmp	r1, r3
 800967c:	d13a      	bne.n	80096f4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	3304      	adds	r3, #4
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe f91a 	bl	80078bc <uxListRemove>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d115      	bne.n	80096ba <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009692:	4924      	ldr	r1, [pc, #144]	@ (8009724 <xTaskPriorityInherit+0xf8>)
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xTaskPriorityInherit+0x8e>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	2201      	movs	r2, #1
 80096aa:	fa02 f303 	lsl.w	r3, r2, r3
 80096ae:	43da      	mvns	r2, r3
 80096b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009728 <xTaskPriorityInherit+0xfc>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4013      	ands	r3, r2
 80096b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009728 <xTaskPriorityInherit+0xfc>)
 80096b8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096ba:	4b19      	ldr	r3, [pc, #100]	@ (8009720 <xTaskPriorityInherit+0xf4>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	2201      	movs	r2, #1
 80096ca:	409a      	lsls	r2, r3
 80096cc:	4b16      	ldr	r3, [pc, #88]	@ (8009728 <xTaskPriorityInherit+0xfc>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	4a15      	ldr	r2, [pc, #84]	@ (8009728 <xTaskPriorityInherit+0xfc>)
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4a10      	ldr	r2, [pc, #64]	@ (8009724 <xTaskPriorityInherit+0xf8>)
 80096e4:	441a      	add	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7fe f888 	bl	8007802 <vListInsertEnd>
 80096f2:	e004      	b.n	80096fe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009720 <xTaskPriorityInherit+0xf4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80096fe:	2301      	movs	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	e008      	b.n	8009716 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009708:	4b05      	ldr	r3, [pc, #20]	@ (8009720 <xTaskPriorityInherit+0xf4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	429a      	cmp	r2, r3
 8009710:	d201      	bcs.n	8009716 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009712:	2301      	movs	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009716:	68fb      	ldr	r3, [r7, #12]
	}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	2000d074 	.word	0x2000d074
 8009724:	2000d078 	.word	0x2000d078
 8009728:	2000d17c 	.word	0x2000d17c

0800972c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d074      	beq.n	800982c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009742:	4b3d      	ldr	r3, [pc, #244]	@ (8009838 <xTaskPriorityDisinherit+0x10c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	429a      	cmp	r2, r3
 800974a:	d00d      	beq.n	8009768 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009750:	b672      	cpsid	i
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	b662      	cpsie	i
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10d      	bne.n	800978c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009774:	b672      	cpsid	i
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	b662      	cpsie	i
 8009784:	60bb      	str	r3, [r7, #8]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009790:	1e5a      	subs	r2, r3, #1
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800979e:	429a      	cmp	r2, r3
 80097a0:	d044      	beq.n	800982c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d140      	bne.n	800982c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe f884 	bl	80078bc <uxListRemove>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d115      	bne.n	80097e6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097be:	491f      	ldr	r1, [pc, #124]	@ (800983c <xTaskPriorityDisinherit+0x110>)
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <xTaskPriorityDisinherit+0xba>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d4:	2201      	movs	r2, #1
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	43da      	mvns	r2, r3
 80097dc:	4b18      	ldr	r3, [pc, #96]	@ (8009840 <xTaskPriorityDisinherit+0x114>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4013      	ands	r3, r2
 80097e2:	4a17      	ldr	r2, [pc, #92]	@ (8009840 <xTaskPriorityDisinherit+0x114>)
 80097e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	f1c3 0207 	rsb	r2, r3, #7
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	2201      	movs	r2, #1
 8009800:	409a      	lsls	r2, r3
 8009802:	4b0f      	ldr	r3, [pc, #60]	@ (8009840 <xTaskPriorityDisinherit+0x114>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4313      	orrs	r3, r2
 8009808:	4a0d      	ldr	r2, [pc, #52]	@ (8009840 <xTaskPriorityDisinherit+0x114>)
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4a08      	ldr	r2, [pc, #32]	@ (800983c <xTaskPriorityDisinherit+0x110>)
 800981a:	441a      	add	r2, r3
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7fd ffed 	bl	8007802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009828:	2301      	movs	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800982c:	697b      	ldr	r3, [r7, #20]
	}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	2000d074 	.word	0x2000d074
 800983c:	2000d078 	.word	0x2000d078
 8009840:	2000d17c 	.word	0x2000d17c

08009844 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009852:	2301      	movs	r3, #1
 8009854:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8089 	beq.w	8009970 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10d      	bne.n	8009882 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	b672      	cpsid	i
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	b662      	cpsie	i
 800987a:	60fb      	str	r3, [r7, #12]
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	e7fd      	b.n	800987e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d902      	bls.n	8009892 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	e002      	b.n	8009898 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009896:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d066      	beq.n	8009970 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d161      	bne.n	8009970 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098ac:	4b32      	ldr	r3, [pc, #200]	@ (8009978 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	69ba      	ldr	r2, [r7, #24]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d10d      	bne.n	80098d2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	b672      	cpsid	i
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	b662      	cpsie	i
 80098ca:	60bb      	str	r3, [r7, #8]
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	e7fd      	b.n	80098ce <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	db04      	blt.n	80098f0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	f1c3 0207 	rsb	r2, r3, #7
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	6959      	ldr	r1, [r3, #20]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4a1f      	ldr	r2, [pc, #124]	@ (800997c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009900:	4413      	add	r3, r2
 8009902:	4299      	cmp	r1, r3
 8009904:	d134      	bne.n	8009970 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	3304      	adds	r3, #4
 800990a:	4618      	mov	r0, r3
 800990c:	f7fd ffd6 	bl	80078bc <uxListRemove>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d115      	bne.n	8009942 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991a:	4918      	ldr	r1, [pc, #96]	@ (800997c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009930:	2201      	movs	r2, #1
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	43da      	mvns	r2, r3
 8009938:	4b11      	ldr	r3, [pc, #68]	@ (8009980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4013      	ands	r3, r2
 800993e:	4a10      	ldr	r2, [pc, #64]	@ (8009980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009940:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	2201      	movs	r2, #1
 8009948:	409a      	lsls	r2, r3
 800994a:	4b0d      	ldr	r3, [pc, #52]	@ (8009980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4313      	orrs	r3, r2
 8009950:	4a0b      	ldr	r2, [pc, #44]	@ (8009980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4a06      	ldr	r2, [pc, #24]	@ (800997c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009962:	441a      	add	r2, r3
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f7fd ff49 	bl	8007802 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009970:	bf00      	nop
 8009972:	3720      	adds	r7, #32
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	2000d074 	.word	0x2000d074
 800997c:	2000d078 	.word	0x2000d078
 8009980:	2000d17c 	.word	0x2000d17c

08009984 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009988:	4b07      	ldr	r3, [pc, #28]	@ (80099a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009990:	4b05      	ldr	r3, [pc, #20]	@ (80099a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009996:	3201      	adds	r2, #1
 8009998:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800999a:	4b03      	ldr	r3, [pc, #12]	@ (80099a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800999c:	681b      	ldr	r3, [r3, #0]
	}
 800999e:	4618      	mov	r0, r3
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	2000d074 	.word	0x2000d074

080099ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099b6:	4b29      	ldr	r3, [pc, #164]	@ (8009a5c <prvAddCurrentTaskToDelayedList+0xb0>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099bc:	4b28      	ldr	r3, [pc, #160]	@ (8009a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fd ff7a 	bl	80078bc <uxListRemove>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10b      	bne.n	80099e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80099ce:	4b24      	ldr	r3, [pc, #144]	@ (8009a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d4:	2201      	movs	r2, #1
 80099d6:	fa02 f303 	lsl.w	r3, r2, r3
 80099da:	43da      	mvns	r2, r3
 80099dc:	4b21      	ldr	r3, [pc, #132]	@ (8009a64 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4013      	ands	r3, r2
 80099e2:	4a20      	ldr	r2, [pc, #128]	@ (8009a64 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ec:	d10a      	bne.n	8009a04 <prvAddCurrentTaskToDelayedList+0x58>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d007      	beq.n	8009a04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3304      	adds	r3, #4
 80099fa:	4619      	mov	r1, r3
 80099fc:	481a      	ldr	r0, [pc, #104]	@ (8009a68 <prvAddCurrentTaskToDelayedList+0xbc>)
 80099fe:	f7fd ff00 	bl	8007802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a02:	e026      	b.n	8009a52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a0c:	4b14      	ldr	r3, [pc, #80]	@ (8009a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d209      	bcs.n	8009a30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a1c:	4b13      	ldr	r3, [pc, #76]	@ (8009a6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4b0f      	ldr	r3, [pc, #60]	@ (8009a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7fd ff0e 	bl	800784a <vListInsert>
}
 8009a2e:	e010      	b.n	8009a52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a30:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4b0a      	ldr	r3, [pc, #40]	@ (8009a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fd ff04 	bl	800784a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a42:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d202      	bcs.n	8009a52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a4c:	4a09      	ldr	r2, [pc, #36]	@ (8009a74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6013      	str	r3, [r2, #0]
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	2000d178 	.word	0x2000d178
 8009a60:	2000d074 	.word	0x2000d074
 8009a64:	2000d17c 	.word	0x2000d17c
 8009a68:	2000d160 	.word	0x2000d160
 8009a6c:	2000d130 	.word	0x2000d130
 8009a70:	2000d12c 	.word	0x2000d12c
 8009a74:	2000d194 	.word	0x2000d194

08009a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3b04      	subs	r3, #4
 8009a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3b04      	subs	r3, #4
 8009a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f023 0201 	bic.w	r2, r3, #1
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3b04      	subs	r3, #4
 8009aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8009adc <pxPortInitialiseStack+0x64>)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3b14      	subs	r3, #20
 8009ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3b04      	subs	r3, #4
 8009abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f06f 0202 	mvn.w	r2, #2
 8009ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3b20      	subs	r3, #32
 8009acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ace:	68fb      	ldr	r3, [r7, #12]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	08009ae1 	.word	0x08009ae1

08009ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aea:	4b15      	ldr	r3, [pc, #84]	@ (8009b40 <prvTaskExitError+0x60>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d00d      	beq.n	8009b10 <prvTaskExitError+0x30>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	b672      	cpsid	i
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	b662      	cpsie	i
 8009b08:	60fb      	str	r3, [r7, #12]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <prvTaskExitError+0x2c>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	b672      	cpsid	i
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	b662      	cpsie	i
 8009b24:	60bb      	str	r3, [r7, #8]
}
 8009b26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b28:	bf00      	nop
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0fc      	beq.n	8009b2a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	20000020 	.word	0x20000020
	...

08009b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b50:	4b07      	ldr	r3, [pc, #28]	@ (8009b70 <pxCurrentTCBConst2>)
 8009b52:	6819      	ldr	r1, [r3, #0]
 8009b54:	6808      	ldr	r0, [r1, #0]
 8009b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5a:	f380 8809 	msr	PSP, r0
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f04f 0000 	mov.w	r0, #0
 8009b66:	f380 8811 	msr	BASEPRI, r0
 8009b6a:	4770      	bx	lr
 8009b6c:	f3af 8000 	nop.w

08009b70 <pxCurrentTCBConst2>:
 8009b70:	2000d074 	.word	0x2000d074
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop

08009b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b78:	4808      	ldr	r0, [pc, #32]	@ (8009b9c <prvPortStartFirstTask+0x24>)
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	6800      	ldr	r0, [r0, #0]
 8009b7e:	f380 8808 	msr	MSP, r0
 8009b82:	f04f 0000 	mov.w	r0, #0
 8009b86:	f380 8814 	msr	CONTROL, r0
 8009b8a:	b662      	cpsie	i
 8009b8c:	b661      	cpsie	f
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	df00      	svc	0
 8009b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b9a:	bf00      	nop
 8009b9c:	e000ed08 	.word	0xe000ed08

08009ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ba6:	4b37      	ldr	r3, [pc, #220]	@ (8009c84 <xPortStartScheduler+0xe4>)
 8009ba8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	22ff      	movs	r2, #255	@ 0xff
 8009bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	4b2f      	ldr	r3, [pc, #188]	@ (8009c88 <xPortStartScheduler+0xe8>)
 8009bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bce:	4b2f      	ldr	r3, [pc, #188]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bd4:	e009      	b.n	8009bea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf2:	2b80      	cmp	r3, #128	@ 0x80
 8009bf4:	d0ef      	beq.n	8009bd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bf6:	4b25      	ldr	r3, [pc, #148]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f1c3 0307 	rsb	r3, r3, #7
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d00d      	beq.n	8009c1e <xPortStartScheduler+0x7e>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	b672      	cpsid	i
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	b662      	cpsie	i
 8009c16:	60bb      	str	r3, [r7, #8]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	4a19      	ldr	r2, [pc, #100]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c28:	4b18      	ldr	r3, [pc, #96]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c30:	4a16      	ldr	r2, [pc, #88]	@ (8009c8c <xPortStartScheduler+0xec>)
 8009c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c3c:	4b14      	ldr	r3, [pc, #80]	@ (8009c90 <xPortStartScheduler+0xf0>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a13      	ldr	r2, [pc, #76]	@ (8009c90 <xPortStartScheduler+0xf0>)
 8009c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c48:	4b11      	ldr	r3, [pc, #68]	@ (8009c90 <xPortStartScheduler+0xf0>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a10      	ldr	r2, [pc, #64]	@ (8009c90 <xPortStartScheduler+0xf0>)
 8009c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c54:	f000 f8dc 	bl	8009e10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c58:	4b0e      	ldr	r3, [pc, #56]	@ (8009c94 <xPortStartScheduler+0xf4>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c5e:	f000 f8fb 	bl	8009e58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <xPortStartScheduler+0xf8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a0c      	ldr	r2, [pc, #48]	@ (8009c98 <xPortStartScheduler+0xf8>)
 8009c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c6e:	f7ff ff83 	bl	8009b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c72:	f7ff fa61 	bl	8009138 <vTaskSwitchContext>
	prvTaskExitError();
 8009c76:	f7ff ff33 	bl	8009ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	e000e400 	.word	0xe000e400
 8009c88:	2000d1a0 	.word	0x2000d1a0
 8009c8c:	2000d1a4 	.word	0x2000d1a4
 8009c90:	e000ed20 	.word	0xe000ed20
 8009c94:	20000020 	.word	0x20000020
 8009c98:	e000ef34 	.word	0xe000ef34

08009c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca6:	b672      	cpsid	i
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	b662      	cpsie	i
 8009cb6:	607b      	str	r3, [r7, #4]
}
 8009cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cba:	4b11      	ldr	r3, [pc, #68]	@ (8009d00 <vPortEnterCritical+0x64>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8009d00 <vPortEnterCritical+0x64>)
 8009cc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d00 <vPortEnterCritical+0x64>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d112      	bne.n	8009cf2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <vPortEnterCritical+0x68>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00d      	beq.n	8009cf2 <vPortEnterCritical+0x56>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	b672      	cpsid	i
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	b662      	cpsie	i
 8009cea:	603b      	str	r3, [r7, #0]
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	e7fd      	b.n	8009cee <vPortEnterCritical+0x52>
	}
}
 8009cf2:	bf00      	nop
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20000020 	.word	0x20000020
 8009d04:	e000ed04 	.word	0xe000ed04

08009d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d0e:	4b13      	ldr	r3, [pc, #76]	@ (8009d5c <vPortExitCritical+0x54>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10d      	bne.n	8009d32 <vPortExitCritical+0x2a>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	b672      	cpsid	i
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	b662      	cpsie	i
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009d32:	4b0a      	ldr	r3, [pc, #40]	@ (8009d5c <vPortExitCritical+0x54>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4a08      	ldr	r2, [pc, #32]	@ (8009d5c <vPortExitCritical+0x54>)
 8009d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d3c:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <vPortExitCritical+0x54>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <vPortExitCritical+0x48>
 8009d44:	2300      	movs	r3, #0
 8009d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
}
 8009d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	20000020 	.word	0x20000020

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b15      	ldr	r3, [pc, #84]	@ (8009dc0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f01e 0f10 	tst.w	lr, #16
 8009d70:	bf08      	it	eq
 8009d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	f7ff f9d0 	bl	8009138 <vTaskSwitchContext>
 8009d98:	f04f 0000 	mov.w	r0, #0
 8009d9c:	f380 8811 	msr	BASEPRI, r0
 8009da0:	bc09      	pop	{r0, r3}
 8009da2:	6819      	ldr	r1, [r3, #0]
 8009da4:	6808      	ldr	r0, [r1, #0]
 8009da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	f01e 0f10 	tst.w	lr, #16
 8009dae:	bf08      	it	eq
 8009db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009db4:	f380 8809 	msr	PSP, r0
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	2000d074 	.word	0x2000d074
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	b672      	cpsid	i
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	b662      	cpsie	i
 8009de2:	607b      	str	r3, [r7, #4]
}
 8009de4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009de6:	f7ff f8eb 	bl	8008fc0 <xTaskIncrementTick>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009df0:	4b06      	ldr	r3, [pc, #24]	@ (8009e0c <SysTick_Handler+0x44>)
 8009df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	f383 8811 	msr	BASEPRI, r3
}
 8009e02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	e000ed04 	.word	0xe000ed04

08009e10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e10:	b480      	push	{r7}
 8009e12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e14:	4b0b      	ldr	r3, [pc, #44]	@ (8009e44 <vPortSetupTimerInterrupt+0x34>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e48 <vPortSetupTimerInterrupt+0x38>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e20:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <vPortSetupTimerInterrupt+0x3c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a0a      	ldr	r2, [pc, #40]	@ (8009e50 <vPortSetupTimerInterrupt+0x40>)
 8009e26:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2a:	099b      	lsrs	r3, r3, #6
 8009e2c:	4a09      	ldr	r2, [pc, #36]	@ (8009e54 <vPortSetupTimerInterrupt+0x44>)
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e32:	4b04      	ldr	r3, [pc, #16]	@ (8009e44 <vPortSetupTimerInterrupt+0x34>)
 8009e34:	2207      	movs	r2, #7
 8009e36:	601a      	str	r2, [r3, #0]
}
 8009e38:	bf00      	nop
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	e000e010 	.word	0xe000e010
 8009e48:	e000e018 	.word	0xe000e018
 8009e4c:	20000000 	.word	0x20000000
 8009e50:	10624dd3 	.word	0x10624dd3
 8009e54:	e000e014 	.word	0xe000e014

08009e58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009e68 <vPortEnableVFP+0x10>
 8009e5c:	6801      	ldr	r1, [r0, #0]
 8009e5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009e62:	6001      	str	r1, [r0, #0]
 8009e64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e66:	bf00      	nop
 8009e68:	e000ed88 	.word	0xe000ed88

08009e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e72:	f3ef 8305 	mrs	r3, IPSR
 8009e76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b0f      	cmp	r3, #15
 8009e7c:	d917      	bls.n	8009eae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <vPortValidateInterruptPriority+0x7c>)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e88:	4b18      	ldr	r3, [pc, #96]	@ (8009eec <vPortValidateInterruptPriority+0x80>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	7afa      	ldrb	r2, [r7, #11]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d20d      	bcs.n	8009eae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	b672      	cpsid	i
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	b662      	cpsie	i
 8009ea6:	607b      	str	r3, [r7, #4]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009eae:	4b10      	ldr	r3, [pc, #64]	@ (8009ef0 <vPortValidateInterruptPriority+0x84>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef4 <vPortValidateInterruptPriority+0x88>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d90d      	bls.n	8009eda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	b672      	cpsid	i
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	b662      	cpsie	i
 8009ed2:	603b      	str	r3, [r7, #0]
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop
 8009ed8:	e7fd      	b.n	8009ed6 <vPortValidateInterruptPriority+0x6a>
	}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	e000e3f0 	.word	0xe000e3f0
 8009eec:	2000d1a0 	.word	0x2000d1a0
 8009ef0:	e000ed0c 	.word	0xe000ed0c
 8009ef4:	2000d1a4 	.word	0x2000d1a4

08009ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	@ 0x28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f04:	f7fe ff8c 	bl	8008e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f08:	4b5d      	ldr	r3, [pc, #372]	@ (800a080 <pvPortMalloc+0x188>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f10:	f000 f920 	bl	800a154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f14:	4b5b      	ldr	r3, [pc, #364]	@ (800a084 <pvPortMalloc+0x18c>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f040 8094 	bne.w	800a04a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d020      	beq.n	8009f6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009f28:	2208      	movs	r2, #8
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d017      	beq.n	8009f6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f023 0307 	bic.w	r3, r3, #7
 8009f40:	3308      	adds	r3, #8
 8009f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00d      	beq.n	8009f6a <pvPortMalloc+0x72>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	b672      	cpsid	i
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	b662      	cpsie	i
 8009f62:	617b      	str	r3, [r7, #20]
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	e7fd      	b.n	8009f66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d06c      	beq.n	800a04a <pvPortMalloc+0x152>
 8009f70:	4b45      	ldr	r3, [pc, #276]	@ (800a088 <pvPortMalloc+0x190>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d867      	bhi.n	800a04a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f7a:	4b44      	ldr	r3, [pc, #272]	@ (800a08c <pvPortMalloc+0x194>)
 8009f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f7e:	4b43      	ldr	r3, [pc, #268]	@ (800a08c <pvPortMalloc+0x194>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f84:	e004      	b.n	8009f90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d903      	bls.n	8009fa2 <pvPortMalloc+0xaa>
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f1      	bne.n	8009f86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fa2:	4b37      	ldr	r3, [pc, #220]	@ (800a080 <pvPortMalloc+0x188>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d04e      	beq.n	800a04a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	4413      	add	r3, r2
 8009fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	1ad2      	subs	r2, r2, r3
 8009fc6:	2308      	movs	r3, #8
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d922      	bls.n	800a014 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00d      	beq.n	8009ffc <pvPortMalloc+0x104>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	613b      	str	r3, [r7, #16]
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	e7fd      	b.n	8009ff8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	1ad2      	subs	r2, r2, r3
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a00e:	69b8      	ldr	r0, [r7, #24]
 800a010:	f000 f902 	bl	800a218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a014:	4b1c      	ldr	r3, [pc, #112]	@ (800a088 <pvPortMalloc+0x190>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	4a1a      	ldr	r2, [pc, #104]	@ (800a088 <pvPortMalloc+0x190>)
 800a020:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a022:	4b19      	ldr	r3, [pc, #100]	@ (800a088 <pvPortMalloc+0x190>)
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	4b1a      	ldr	r3, [pc, #104]	@ (800a090 <pvPortMalloc+0x198>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d203      	bcs.n	800a036 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a02e:	4b16      	ldr	r3, [pc, #88]	@ (800a088 <pvPortMalloc+0x190>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a17      	ldr	r2, [pc, #92]	@ (800a090 <pvPortMalloc+0x198>)
 800a034:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	4b12      	ldr	r3, [pc, #72]	@ (800a084 <pvPortMalloc+0x18c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	431a      	orrs	r2, r3
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a04a:	f7fe fef7 	bl	8008e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	f003 0307 	and.w	r3, r3, #7
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00d      	beq.n	800a074 <pvPortMalloc+0x17c>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05c:	b672      	cpsid	i
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	b662      	cpsie	i
 800a06c:	60fb      	str	r3, [r7, #12]
}
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
 800a072:	e7fd      	b.n	800a070 <pvPortMalloc+0x178>
	return pvReturn;
 800a074:	69fb      	ldr	r3, [r7, #28]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3728      	adds	r7, #40	@ 0x28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20010db0 	.word	0x20010db0
 800a084:	20010dbc 	.word	0x20010dbc
 800a088:	20010db4 	.word	0x20010db4
 800a08c:	20010da8 	.word	0x20010da8
 800a090:	20010db8 	.word	0x20010db8

0800a094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d04e      	beq.n	800a144 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0a6:	2308      	movs	r3, #8
 800a0a8:	425b      	negs	r3, r3
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	4b24      	ldr	r3, [pc, #144]	@ (800a14c <vPortFree+0xb8>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10d      	bne.n	800a0de <vPortFree+0x4a>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c6:	b672      	cpsid	i
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	b662      	cpsie	i
 800a0d6:	60fb      	str	r3, [r7, #12]
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00d      	beq.n	800a102 <vPortFree+0x6e>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	b672      	cpsid	i
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	b662      	cpsie	i
 800a0fa:	60bb      	str	r3, [r7, #8]
}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	e7fd      	b.n	800a0fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4b11      	ldr	r3, [pc, #68]	@ (800a14c <vPortFree+0xb8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d019      	beq.n	800a144 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d115      	bne.n	800a144 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4b0b      	ldr	r3, [pc, #44]	@ (800a14c <vPortFree+0xb8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	43db      	mvns	r3, r3
 800a122:	401a      	ands	r2, r3
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a128:	f7fe fe7a 	bl	8008e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <vPortFree+0xbc>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4413      	add	r3, r2
 800a136:	4a06      	ldr	r2, [pc, #24]	@ (800a150 <vPortFree+0xbc>)
 800a138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a13a:	6938      	ldr	r0, [r7, #16]
 800a13c:	f000 f86c 	bl	800a218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a140:	f7fe fe7c 	bl	8008e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20010dbc 	.word	0x20010dbc
 800a150:	20010db4 	.word	0x20010db4

0800a154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a15a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a160:	4b27      	ldr	r3, [pc, #156]	@ (800a200 <prvHeapInit+0xac>)
 800a162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3307      	adds	r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0307 	bic.w	r3, r3, #7
 800a17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	4a1f      	ldr	r2, [pc, #124]	@ (800a200 <prvHeapInit+0xac>)
 800a184:	4413      	add	r3, r2
 800a186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a18c:	4a1d      	ldr	r2, [pc, #116]	@ (800a204 <prvHeapInit+0xb0>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a192:	4b1c      	ldr	r3, [pc, #112]	@ (800a204 <prvHeapInit+0xb0>)
 800a194:	2200      	movs	r2, #0
 800a196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4413      	add	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0307 	bic.w	r3, r3, #7
 800a1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4a15      	ldr	r2, [pc, #84]	@ (800a208 <prvHeapInit+0xb4>)
 800a1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	@ (800a208 <prvHeapInit+0xb4>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1be:	4b12      	ldr	r3, [pc, #72]	@ (800a208 <prvHeapInit+0xb4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <prvHeapInit+0xb4>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800a20c <prvHeapInit+0xb8>)
 800a1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4a09      	ldr	r2, [pc, #36]	@ (800a210 <prvHeapInit+0xbc>)
 800a1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1ec:	4b09      	ldr	r3, [pc, #36]	@ (800a214 <prvHeapInit+0xc0>)
 800a1ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a1f2:	601a      	str	r2, [r3, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	2000d1a8 	.word	0x2000d1a8
 800a204:	20010da8 	.word	0x20010da8
 800a208:	20010db0 	.word	0x20010db0
 800a20c:	20010db8 	.word	0x20010db8
 800a210:	20010db4 	.word	0x20010db4
 800a214:	20010dbc 	.word	0x20010dbc

0800a218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a220:	4b28      	ldr	r3, [pc, #160]	@ (800a2c4 <prvInsertBlockIntoFreeList+0xac>)
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e002      	b.n	800a22c <prvInsertBlockIntoFreeList+0x14>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	429a      	cmp	r2, r3
 800a234:	d8f7      	bhi.n	800a226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d108      	bne.n	800a25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	441a      	add	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d118      	bne.n	800a2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b15      	ldr	r3, [pc, #84]	@ (800a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d00d      	beq.n	800a296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	e008      	b.n	800a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	e003      	b.n	800a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d002      	beq.n	800a2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	20010da8 	.word	0x20010da8
 800a2c8:	20010db0 	.word	0x20010db0

0800a2cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a2d6:	f008 fc47 	bl	8012b68 <sys_timeouts_sleeptime>
 800a2da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e2:	d10b      	bne.n	800a2fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a2e4:	4813      	ldr	r0, [pc, #76]	@ (800a334 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2e6:	f00d fb6e 	bl	80179c6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f00d fae0 	bl	80178b4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a2f4:	480f      	ldr	r0, [pc, #60]	@ (800a334 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2f6:	f00d fb57 	bl	80179a8 <sys_mutex_lock>
    return;
 800a2fa:	e018      	b.n	800a32e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a302:	f008 fbf7 	bl	8012af4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a306:	e7e6      	b.n	800a2d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a308:	480a      	ldr	r0, [pc, #40]	@ (800a334 <tcpip_timeouts_mbox_fetch+0x68>)
 800a30a:	f00d fb5c 	bl	80179c6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f00d face 	bl	80178b4 <sys_arch_mbox_fetch>
 800a318:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a31a:	4806      	ldr	r0, [pc, #24]	@ (800a334 <tcpip_timeouts_mbox_fetch+0x68>)
 800a31c:	f00d fb44 	bl	80179a8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d102      	bne.n	800a32e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a328:	f008 fbe4 	bl	8012af4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a32c:	e7d3      	b.n	800a2d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	20010dcc 	.word	0x20010dcc

0800a338 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a340:	4810      	ldr	r0, [pc, #64]	@ (800a384 <tcpip_thread+0x4c>)
 800a342:	f00d fb31 	bl	80179a8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a346:	4b10      	ldr	r3, [pc, #64]	@ (800a388 <tcpip_thread+0x50>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d005      	beq.n	800a35a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a34e:	4b0e      	ldr	r3, [pc, #56]	@ (800a388 <tcpip_thread+0x50>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a0e      	ldr	r2, [pc, #56]	@ (800a38c <tcpip_thread+0x54>)
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	4610      	mov	r0, r2
 800a358:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	4619      	mov	r1, r3
 800a360:	480b      	ldr	r0, [pc, #44]	@ (800a390 <tcpip_thread+0x58>)
 800a362:	f7ff ffb3 	bl	800a2cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d106      	bne.n	800a37a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a36c:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <tcpip_thread+0x5c>)
 800a36e:	2291      	movs	r2, #145	@ 0x91
 800a370:	4909      	ldr	r1, [pc, #36]	@ (800a398 <tcpip_thread+0x60>)
 800a372:	480a      	ldr	r0, [pc, #40]	@ (800a39c <tcpip_thread+0x64>)
 800a374:	f00d fc78 	bl	8017c68 <iprintf>
      continue;
 800a378:	e003      	b.n	800a382 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 f80f 	bl	800a3a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a382:	e7ea      	b.n	800a35a <tcpip_thread+0x22>
 800a384:	20010dcc 	.word	0x20010dcc
 800a388:	20010dc0 	.word	0x20010dc0
 800a38c:	20010dc4 	.word	0x20010dc4
 800a390:	20010dc8 	.word	0x20010dc8
 800a394:	08018dfc 	.word	0x08018dfc
 800a398:	08018e2c 	.word	0x08018e2c
 800a39c:	08018e4c 	.word	0x08018e4c

0800a3a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d026      	beq.n	800a3fe <tcpip_thread_handle_msg+0x5e>
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	dc2b      	bgt.n	800a40c <tcpip_thread_handle_msg+0x6c>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <tcpip_thread_handle_msg+0x1e>
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d015      	beq.n	800a3e8 <tcpip_thread_handle_msg+0x48>
 800a3bc:	e026      	b.n	800a40c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6850      	ldr	r0, [r2, #4]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6892      	ldr	r2, [r2, #8]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4798      	blx	r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fdcb 	bl	800bf74 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	2009      	movs	r0, #9
 800a3e2:	f000 fe47 	bl	800b074 <memp_free>
      break;
 800a3e6:	e018      	b.n	800a41a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6892      	ldr	r2, [r2, #8]
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	2008      	movs	r0, #8
 800a3f8:	f000 fe3c 	bl	800b074 <memp_free>
      break;
 800a3fc:	e00d      	b.n	800a41a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6892      	ldr	r2, [r2, #8]
 800a406:	4610      	mov	r0, r2
 800a408:	4798      	blx	r3
      break;
 800a40a:	e006      	b.n	800a41a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a40c:	4b05      	ldr	r3, [pc, #20]	@ (800a424 <tcpip_thread_handle_msg+0x84>)
 800a40e:	22cf      	movs	r2, #207	@ 0xcf
 800a410:	4905      	ldr	r1, [pc, #20]	@ (800a428 <tcpip_thread_handle_msg+0x88>)
 800a412:	4806      	ldr	r0, [pc, #24]	@ (800a42c <tcpip_thread_handle_msg+0x8c>)
 800a414:	f00d fc28 	bl	8017c68 <iprintf>
      break;
 800a418:	bf00      	nop
  }
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	08018dfc 	.word	0x08018dfc
 800a428:	08018e2c 	.word	0x08018e2c
 800a42c:	08018e4c 	.word	0x08018e4c

0800a430 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a43c:	481a      	ldr	r0, [pc, #104]	@ (800a4a8 <tcpip_inpkt+0x78>)
 800a43e:	f00d fa78 	bl	8017932 <sys_mbox_valid>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <tcpip_inpkt+0x24>
 800a448:	4b18      	ldr	r3, [pc, #96]	@ (800a4ac <tcpip_inpkt+0x7c>)
 800a44a:	22fc      	movs	r2, #252	@ 0xfc
 800a44c:	4918      	ldr	r1, [pc, #96]	@ (800a4b0 <tcpip_inpkt+0x80>)
 800a44e:	4819      	ldr	r0, [pc, #100]	@ (800a4b4 <tcpip_inpkt+0x84>)
 800a450:	f00d fc0a 	bl	8017c68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a454:	2009      	movs	r0, #9
 800a456:	f000 fd97 	bl	800af88 <memp_malloc>
 800a45a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a462:	f04f 33ff 	mov.w	r3, #4294967295
 800a466:	e01a      	b.n	800a49e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a480:	6979      	ldr	r1, [r7, #20]
 800a482:	4809      	ldr	r0, [pc, #36]	@ (800a4a8 <tcpip_inpkt+0x78>)
 800a484:	f00d f9fc 	bl	8017880 <sys_mbox_trypost>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d006      	beq.n	800a49c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a48e:	6979      	ldr	r1, [r7, #20]
 800a490:	2009      	movs	r0, #9
 800a492:	f000 fdef 	bl	800b074 <memp_free>
    return ERR_MEM;
 800a496:	f04f 33ff 	mov.w	r3, #4294967295
 800a49a:	e000      	b.n	800a49e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a49c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20010dc8 	.word	0x20010dc8
 800a4ac:	08018dfc 	.word	0x08018dfc
 800a4b0:	08018e74 	.word	0x08018e74
 800a4b4:	08018e4c 	.word	0x08018e4c

0800a4b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a4c8:	f003 0318 	and.w	r3, r3, #24
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d006      	beq.n	800a4de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a4d0:	4a08      	ldr	r2, [pc, #32]	@ (800a4f4 <tcpip_input+0x3c>)
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff ffab 	bl	800a430 <tcpip_inpkt>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	e005      	b.n	800a4ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a4de:	4a06      	ldr	r2, [pc, #24]	@ (800a4f8 <tcpip_input+0x40>)
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff ffa4 	bl	800a430 <tcpip_inpkt>
 800a4e8:	4603      	mov	r3, r0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	08017691 	.word	0x08017691
 800a4f8:	0801655d 	.word	0x0801655d

0800a4fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a506:	4819      	ldr	r0, [pc, #100]	@ (800a56c <tcpip_try_callback+0x70>)
 800a508:	f00d fa13 	bl	8017932 <sys_mbox_valid>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <tcpip_try_callback+0x24>
 800a512:	4b17      	ldr	r3, [pc, #92]	@ (800a570 <tcpip_try_callback+0x74>)
 800a514:	f240 125d 	movw	r2, #349	@ 0x15d
 800a518:	4916      	ldr	r1, [pc, #88]	@ (800a574 <tcpip_try_callback+0x78>)
 800a51a:	4817      	ldr	r0, [pc, #92]	@ (800a578 <tcpip_try_callback+0x7c>)
 800a51c:	f00d fba4 	bl	8017c68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a520:	2008      	movs	r0, #8
 800a522:	f000 fd31 	bl	800af88 <memp_malloc>
 800a526:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a52e:	f04f 33ff 	mov.w	r3, #4294967295
 800a532:	e017      	b.n	800a564 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	4808      	ldr	r0, [pc, #32]	@ (800a56c <tcpip_try_callback+0x70>)
 800a54a:	f00d f999 	bl	8017880 <sys_mbox_trypost>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d006      	beq.n	800a562 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a554:	68f9      	ldr	r1, [r7, #12]
 800a556:	2008      	movs	r0, #8
 800a558:	f000 fd8c 	bl	800b074 <memp_free>
    return ERR_MEM;
 800a55c:	f04f 33ff 	mov.w	r3, #4294967295
 800a560:	e000      	b.n	800a564 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20010dc8 	.word	0x20010dc8
 800a570:	08018dfc 	.word	0x08018dfc
 800a574:	08018e74 	.word	0x08018e74
 800a578:	08018e4c 	.word	0x08018e4c

0800a57c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af02      	add	r7, sp, #8
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a586:	f000 f872 	bl	800a66e <lwip_init>

  tcpip_init_done = initfunc;
 800a58a:	4a17      	ldr	r2, [pc, #92]	@ (800a5e8 <tcpip_init+0x6c>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a590:	4a16      	ldr	r2, [pc, #88]	@ (800a5ec <tcpip_init+0x70>)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a596:	2106      	movs	r1, #6
 800a598:	4815      	ldr	r0, [pc, #84]	@ (800a5f0 <tcpip_init+0x74>)
 800a59a:	f00d f94f 	bl	801783c <sys_mbox_new>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a5a4:	4b13      	ldr	r3, [pc, #76]	@ (800a5f4 <tcpip_init+0x78>)
 800a5a6:	f240 2261 	movw	r2, #609	@ 0x261
 800a5aa:	4913      	ldr	r1, [pc, #76]	@ (800a5f8 <tcpip_init+0x7c>)
 800a5ac:	4813      	ldr	r0, [pc, #76]	@ (800a5fc <tcpip_init+0x80>)
 800a5ae:	f00d fb5b 	bl	8017c68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a5b2:	4813      	ldr	r0, [pc, #76]	@ (800a600 <tcpip_init+0x84>)
 800a5b4:	f00d f9dc 	bl	8017970 <sys_mutex_new>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <tcpip_init+0x78>)
 800a5c0:	f240 2265 	movw	r2, #613	@ 0x265
 800a5c4:	490f      	ldr	r1, [pc, #60]	@ (800a604 <tcpip_init+0x88>)
 800a5c6:	480d      	ldr	r0, [pc, #52]	@ (800a5fc <tcpip_init+0x80>)
 800a5c8:	f00d fb4e 	bl	8017c68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	490c      	ldr	r1, [pc, #48]	@ (800a608 <tcpip_init+0x8c>)
 800a5d8:	480c      	ldr	r0, [pc, #48]	@ (800a60c <tcpip_init+0x90>)
 800a5da:	f00d fa01 	bl	80179e0 <sys_thread_new>
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20010dc0 	.word	0x20010dc0
 800a5ec:	20010dc4 	.word	0x20010dc4
 800a5f0:	20010dc8 	.word	0x20010dc8
 800a5f4:	08018dfc 	.word	0x08018dfc
 800a5f8:	08018e84 	.word	0x08018e84
 800a5fc:	08018e4c 	.word	0x08018e4c
 800a600:	20010dcc 	.word	0x20010dcc
 800a604:	08018ea8 	.word	0x08018ea8
 800a608:	0800a339 	.word	0x0800a339
 800a60c:	08018ecc 	.word	0x08018ecc

0800a610 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a61a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a61e:	021b      	lsls	r3, r3, #8
 800a620:	b21a      	sxth	r2, r3
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	0a1b      	lsrs	r3, r3, #8
 800a626:	b29b      	uxth	r3, r3
 800a628:	b21b      	sxth	r3, r3
 800a62a:	4313      	orrs	r3, r2
 800a62c:	b21b      	sxth	r3, r3
 800a62e:	b29b      	uxth	r3, r3
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	061a      	lsls	r2, r3, #24
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	021b      	lsls	r3, r3, #8
 800a64c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a650:	431a      	orrs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	0a1b      	lsrs	r3, r3, #8
 800a656:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0e1b      	lsrs	r3, r3, #24
 800a660:	4313      	orrs	r3, r2
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a678:	f00d f96c 	bl	8017954 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a67c:	f000 f8d0 	bl	800a820 <mem_init>
  memp_init();
 800a680:	f000 fc14 	bl	800aeac <memp_init>
  pbuf_init();
  netif_init();
 800a684:	f000 fd20 	bl	800b0c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a688:	f008 faa6 	bl	8012bd8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a68c:	f001 ffd4 	bl	800c638 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a690:	f008 f9e8 	bl	8012a64 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800a6a4:	4b04      	ldr	r3, [pc, #16]	@ (800a6b8 <ptr_to_mem+0x1c>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4413      	add	r3, r2
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	20010de8 	.word	0x20010de8

0800a6bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a6c4:	4b04      	ldr	r3, [pc, #16]	@ (800a6d8 <mem_to_ptr+0x1c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	1ad3      	subs	r3, r2, r3
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	20010de8 	.word	0x20010de8

0800a6dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a6dc:	b590      	push	{r4, r7, lr}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a6e4:	4b45      	ldr	r3, [pc, #276]	@ (800a7fc <plug_holes+0x120>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d206      	bcs.n	800a6fc <plug_holes+0x20>
 800a6ee:	4b44      	ldr	r3, [pc, #272]	@ (800a800 <plug_holes+0x124>)
 800a6f0:	f240 12df 	movw	r2, #479	@ 0x1df
 800a6f4:	4943      	ldr	r1, [pc, #268]	@ (800a804 <plug_holes+0x128>)
 800a6f6:	4844      	ldr	r0, [pc, #272]	@ (800a808 <plug_holes+0x12c>)
 800a6f8:	f00d fab6 	bl	8017c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a6fc:	4b43      	ldr	r3, [pc, #268]	@ (800a80c <plug_holes+0x130>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	d306      	bcc.n	800a714 <plug_holes+0x38>
 800a706:	4b3e      	ldr	r3, [pc, #248]	@ (800a800 <plug_holes+0x124>)
 800a708:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a70c:	4940      	ldr	r1, [pc, #256]	@ (800a810 <plug_holes+0x134>)
 800a70e:	483e      	ldr	r0, [pc, #248]	@ (800a808 <plug_holes+0x12c>)
 800a710:	f00d faaa 	bl	8017c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7a1b      	ldrb	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <plug_holes+0x4e>
 800a71c:	4b38      	ldr	r3, [pc, #224]	@ (800a800 <plug_holes+0x124>)
 800a71e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a722:	493c      	ldr	r1, [pc, #240]	@ (800a814 <plug_holes+0x138>)
 800a724:	4838      	ldr	r0, [pc, #224]	@ (800a808 <plug_holes+0x12c>)
 800a726:	f00d fa9f 	bl	8017c68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a732:	d906      	bls.n	800a742 <plug_holes+0x66>
 800a734:	4b32      	ldr	r3, [pc, #200]	@ (800a800 <plug_holes+0x124>)
 800a736:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a73a:	4937      	ldr	r1, [pc, #220]	@ (800a818 <plug_holes+0x13c>)
 800a73c:	4832      	ldr	r0, [pc, #200]	@ (800a808 <plug_holes+0x12c>)
 800a73e:	f00d fa93 	bl	8017c68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff ffa8 	bl	800a69c <ptr_to_mem>
 800a74c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	429a      	cmp	r2, r3
 800a754:	d024      	beq.n	800a7a0 <plug_holes+0xc4>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	7a1b      	ldrb	r3, [r3, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d120      	bne.n	800a7a0 <plug_holes+0xc4>
 800a75e:	4b2b      	ldr	r3, [pc, #172]	@ (800a80c <plug_holes+0x130>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d01b      	beq.n	800a7a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a768:	4b2c      	ldr	r3, [pc, #176]	@ (800a81c <plug_holes+0x140>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d102      	bne.n	800a778 <plug_holes+0x9c>
      lfree = mem;
 800a772:	4a2a      	ldr	r2, [pc, #168]	@ (800a81c <plug_holes+0x140>)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a788:	d00a      	beq.n	800a7a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff ff84 	bl	800a69c <ptr_to_mem>
 800a794:	4604      	mov	r4, r0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff ff90 	bl	800a6bc <mem_to_ptr>
 800a79c:	4603      	mov	r3, r0
 800a79e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff ff79 	bl	800a69c <ptr_to_mem>
 800a7aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d01f      	beq.n	800a7f4 <plug_holes+0x118>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	7a1b      	ldrb	r3, [r3, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d11b      	bne.n	800a7f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a7bc:	4b17      	ldr	r3, [pc, #92]	@ (800a81c <plug_holes+0x140>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d102      	bne.n	800a7cc <plug_holes+0xf0>
      lfree = pmem;
 800a7c6:	4a15      	ldr	r2, [pc, #84]	@ (800a81c <plug_holes+0x140>)
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7dc:	d00a      	beq.n	800a7f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff ff5a 	bl	800a69c <ptr_to_mem>
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	68b8      	ldr	r0, [r7, #8]
 800a7ec:	f7ff ff66 	bl	800a6bc <mem_to_ptr>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	6063      	str	r3, [r4, #4]
    }
  }
}
 800a7f4:	bf00      	nop
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd90      	pop	{r4, r7, pc}
 800a7fc:	20010de8 	.word	0x20010de8
 800a800:	08018edc 	.word	0x08018edc
 800a804:	08018f0c 	.word	0x08018f0c
 800a808:	08018f24 	.word	0x08018f24
 800a80c:	20010dec 	.word	0x20010dec
 800a810:	08018f4c 	.word	0x08018f4c
 800a814:	08018f68 	.word	0x08018f68
 800a818:	08018f84 	.word	0x08018f84
 800a81c:	20010df4 	.word	0x20010df4

0800a820 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a826:	4b1d      	ldr	r3, [pc, #116]	@ (800a89c <mem_init+0x7c>)
 800a828:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a0 <mem_init+0x80>)
 800a82a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a82c:	4b1b      	ldr	r3, [pc, #108]	@ (800a89c <mem_init+0x7c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a838:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a846:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a84a:	f7ff ff27 	bl	800a69c <ptr_to_mem>
 800a84e:	4603      	mov	r3, r0
 800a850:	4a14      	ldr	r2, [pc, #80]	@ (800a8a4 <mem_init+0x84>)
 800a852:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a854:	4b13      	ldr	r3, [pc, #76]	@ (800a8a4 <mem_init+0x84>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2201      	movs	r2, #1
 800a85a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a85c:	4b11      	ldr	r3, [pc, #68]	@ (800a8a4 <mem_init+0x84>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a864:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a866:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a4 <mem_init+0x84>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a86e:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a870:	4b0a      	ldr	r3, [pc, #40]	@ (800a89c <mem_init+0x7c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a8 <mem_init+0x88>)
 800a876:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a878:	480c      	ldr	r0, [pc, #48]	@ (800a8ac <mem_init+0x8c>)
 800a87a:	f00d f879 	bl	8017970 <sys_mutex_new>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a884:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b0 <mem_init+0x90>)
 800a886:	f240 221f 	movw	r2, #543	@ 0x21f
 800a88a:	490a      	ldr	r1, [pc, #40]	@ (800a8b4 <mem_init+0x94>)
 800a88c:	480a      	ldr	r0, [pc, #40]	@ (800a8b8 <mem_init+0x98>)
 800a88e:	f00d f9eb 	bl	8017c68 <iprintf>
  }
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20010de8 	.word	0x20010de8
 800a8a0:	20050000 	.word	0x20050000
 800a8a4:	20010dec 	.word	0x20010dec
 800a8a8:	20010df4 	.word	0x20010df4
 800a8ac:	20010df0 	.word	0x20010df0
 800a8b0:	08018edc 	.word	0x08018edc
 800a8b4:	08018fb0 	.word	0x08018fb0
 800a8b8:	08018f24 	.word	0x08018f24

0800a8bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff fef9 	bl	800a6bc <mem_to_ptr>
 800a8ca:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fee3 	bl	800a69c <ptr_to_mem>
 800a8d6:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fedd 	bl	800a69c <ptr_to_mem>
 800a8e2:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ec:	d818      	bhi.n	800a920 <mem_link_valid+0x64>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f6:	d813      	bhi.n	800a920 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d004      	beq.n	800a90c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d109      	bne.n	800a920 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a90c:	4b08      	ldr	r3, [pc, #32]	@ (800a930 <mem_link_valid+0x74>)
 800a90e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	429a      	cmp	r2, r3
 800a914:	d006      	beq.n	800a924 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d001      	beq.n	800a924 <mem_link_valid+0x68>
    return 0;
 800a920:	2300      	movs	r3, #0
 800a922:	e000      	b.n	800a926 <mem_link_valid+0x6a>
  }
  return 1;
 800a924:	2301      	movs	r3, #1
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20010dec 	.word	0x20010dec

0800a934 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d070      	beq.n	800aa24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f003 0303 	and.w	r3, r3, #3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00d      	beq.n	800a968 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a94c:	4b37      	ldr	r3, [pc, #220]	@ (800aa2c <mem_free+0xf8>)
 800a94e:	f240 2273 	movw	r2, #627	@ 0x273
 800a952:	4937      	ldr	r1, [pc, #220]	@ (800aa30 <mem_free+0xfc>)
 800a954:	4837      	ldr	r0, [pc, #220]	@ (800aa34 <mem_free+0x100>)
 800a956:	f00d f987 	bl	8017c68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a95a:	f00d f867 	bl	8017a2c <sys_arch_protect>
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f00d f871 	bl	8017a48 <sys_arch_unprotect>
    return;
 800a966:	e05e      	b.n	800aa26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3b0c      	subs	r3, #12
 800a96c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a96e:	4b32      	ldr	r3, [pc, #200]	@ (800aa38 <mem_free+0x104>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69fa      	ldr	r2, [r7, #28]
 800a974:	429a      	cmp	r2, r3
 800a976:	d306      	bcc.n	800a986 <mem_free+0x52>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f103 020c 	add.w	r2, r3, #12
 800a97e:	4b2f      	ldr	r3, [pc, #188]	@ (800aa3c <mem_free+0x108>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d90d      	bls.n	800a9a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a986:	4b29      	ldr	r3, [pc, #164]	@ (800aa2c <mem_free+0xf8>)
 800a988:	f240 227f 	movw	r2, #639	@ 0x27f
 800a98c:	492c      	ldr	r1, [pc, #176]	@ (800aa40 <mem_free+0x10c>)
 800a98e:	4829      	ldr	r0, [pc, #164]	@ (800aa34 <mem_free+0x100>)
 800a990:	f00d f96a 	bl	8017c68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a994:	f00d f84a 	bl	8017a2c <sys_arch_protect>
 800a998:	6138      	str	r0, [r7, #16]
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f00d f854 	bl	8017a48 <sys_arch_unprotect>
    return;
 800a9a0:	e041      	b.n	800aa26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a9a2:	4828      	ldr	r0, [pc, #160]	@ (800aa44 <mem_free+0x110>)
 800a9a4:	f00d f800 	bl	80179a8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	7a1b      	ldrb	r3, [r3, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d110      	bne.n	800a9d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800aa2c <mem_free+0xf8>)
 800a9b2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a9b6:	4924      	ldr	r1, [pc, #144]	@ (800aa48 <mem_free+0x114>)
 800a9b8:	481e      	ldr	r0, [pc, #120]	@ (800aa34 <mem_free+0x100>)
 800a9ba:	f00d f955 	bl	8017c68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a9be:	4821      	ldr	r0, [pc, #132]	@ (800aa44 <mem_free+0x110>)
 800a9c0:	f00d f801 	bl	80179c6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9c4:	f00d f832 	bl	8017a2c <sys_arch_protect>
 800a9c8:	6178      	str	r0, [r7, #20]
 800a9ca:	6978      	ldr	r0, [r7, #20]
 800a9cc:	f00d f83c 	bl	8017a48 <sys_arch_unprotect>
    return;
 800a9d0:	e029      	b.n	800aa26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a9d2:	69f8      	ldr	r0, [r7, #28]
 800a9d4:	f7ff ff72 	bl	800a8bc <mem_link_valid>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d110      	bne.n	800aa00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a9de:	4b13      	ldr	r3, [pc, #76]	@ (800aa2c <mem_free+0xf8>)
 800a9e0:	f240 2295 	movw	r2, #661	@ 0x295
 800a9e4:	4919      	ldr	r1, [pc, #100]	@ (800aa4c <mem_free+0x118>)
 800a9e6:	4813      	ldr	r0, [pc, #76]	@ (800aa34 <mem_free+0x100>)
 800a9e8:	f00d f93e 	bl	8017c68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a9ec:	4815      	ldr	r0, [pc, #84]	@ (800aa44 <mem_free+0x110>)
 800a9ee:	f00c ffea 	bl	80179c6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9f2:	f00d f81b 	bl	8017a2c <sys_arch_protect>
 800a9f6:	61b8      	str	r0, [r7, #24]
 800a9f8:	69b8      	ldr	r0, [r7, #24]
 800a9fa:	f00d f825 	bl	8017a48 <sys_arch_unprotect>
    return;
 800a9fe:	e012      	b.n	800aa26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	2200      	movs	r2, #0
 800aa04:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800aa06:	4b12      	ldr	r3, [pc, #72]	@ (800aa50 <mem_free+0x11c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	69fa      	ldr	r2, [r7, #28]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d202      	bcs.n	800aa16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aa10:	4a0f      	ldr	r2, [pc, #60]	@ (800aa50 <mem_free+0x11c>)
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aa16:	69f8      	ldr	r0, [r7, #28]
 800aa18:	f7ff fe60 	bl	800a6dc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa1c:	4809      	ldr	r0, [pc, #36]	@ (800aa44 <mem_free+0x110>)
 800aa1e:	f00c ffd2 	bl	80179c6 <sys_mutex_unlock>
 800aa22:	e000      	b.n	800aa26 <mem_free+0xf2>
    return;
 800aa24:	bf00      	nop
}
 800aa26:	3720      	adds	r7, #32
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	08018edc 	.word	0x08018edc
 800aa30:	08018fcc 	.word	0x08018fcc
 800aa34:	08018f24 	.word	0x08018f24
 800aa38:	20010de8 	.word	0x20010de8
 800aa3c:	20010dec 	.word	0x20010dec
 800aa40:	08018ff0 	.word	0x08018ff0
 800aa44:	20010df0 	.word	0x20010df0
 800aa48:	0801900c 	.word	0x0801900c
 800aa4c:	08019034 	.word	0x08019034
 800aa50:	20010df4 	.word	0x20010df4

0800aa54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	@ 0x28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	3303      	adds	r3, #3
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	2b0b      	cmp	r3, #11
 800aa6c:	d801      	bhi.n	800aa72 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aa6e:	230c      	movs	r3, #12
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa78:	d803      	bhi.n	800aa82 <mem_trim+0x2e>
 800aa7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d201      	bcs.n	800aa86 <mem_trim+0x32>
    return NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e0d0      	b.n	800ac28 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aa86:	4b6a      	ldr	r3, [pc, #424]	@ (800ac30 <mem_trim+0x1dc>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d304      	bcc.n	800aa9a <mem_trim+0x46>
 800aa90:	4b68      	ldr	r3, [pc, #416]	@ (800ac34 <mem_trim+0x1e0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d306      	bcc.n	800aaa8 <mem_trim+0x54>
 800aa9a:	4b67      	ldr	r3, [pc, #412]	@ (800ac38 <mem_trim+0x1e4>)
 800aa9c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800aaa0:	4966      	ldr	r1, [pc, #408]	@ (800ac3c <mem_trim+0x1e8>)
 800aaa2:	4867      	ldr	r0, [pc, #412]	@ (800ac40 <mem_trim+0x1ec>)
 800aaa4:	f00d f8e0 	bl	8017c68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aaa8:	4b61      	ldr	r3, [pc, #388]	@ (800ac30 <mem_trim+0x1dc>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d304      	bcc.n	800aabc <mem_trim+0x68>
 800aab2:	4b60      	ldr	r3, [pc, #384]	@ (800ac34 <mem_trim+0x1e0>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d307      	bcc.n	800aacc <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aabc:	f00c ffb6 	bl	8017a2c <sys_arch_protect>
 800aac0:	60b8      	str	r0, [r7, #8]
 800aac2:	68b8      	ldr	r0, [r7, #8]
 800aac4:	f00c ffc0 	bl	8017a48 <sys_arch_unprotect>
    return rmem;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	e0ad      	b.n	800ac28 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3b0c      	subs	r3, #12
 800aad0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aad2:	6a38      	ldr	r0, [r7, #32]
 800aad4:	f7ff fdf2 	bl	800a6bc <mem_to_ptr>
 800aad8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	3b0c      	subs	r3, #12
 800aae4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d906      	bls.n	800aafc <mem_trim+0xa8>
 800aaee:	4b52      	ldr	r3, [pc, #328]	@ (800ac38 <mem_trim+0x1e4>)
 800aaf0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800aaf4:	4953      	ldr	r1, [pc, #332]	@ (800ac44 <mem_trim+0x1f0>)
 800aaf6:	4852      	ldr	r0, [pc, #328]	@ (800ac40 <mem_trim+0x1ec>)
 800aaf8:	f00d f8b6 	bl	8017c68 <iprintf>
  if (newsize > size) {
 800aafc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d901      	bls.n	800ab08 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	e08f      	b.n	800ac28 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800ab08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d101      	bne.n	800ab14 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	e089      	b.n	800ac28 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ab14:	484c      	ldr	r0, [pc, #304]	@ (800ac48 <mem_trim+0x1f4>)
 800ab16:	f00c ff47 	bl	80179a8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff fdbc 	bl	800a69c <ptr_to_mem>
 800ab24:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	7a1b      	ldrb	r3, [r3, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d13c      	bne.n	800aba8 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab36:	d106      	bne.n	800ab46 <mem_trim+0xf2>
 800ab38:	4b3f      	ldr	r3, [pc, #252]	@ (800ac38 <mem_trim+0x1e4>)
 800ab3a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ab3e:	4943      	ldr	r1, [pc, #268]	@ (800ac4c <mem_trim+0x1f8>)
 800ab40:	483f      	ldr	r0, [pc, #252]	@ (800ac40 <mem_trim+0x1ec>)
 800ab42:	f00d f891 	bl	8017c68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	4413      	add	r3, r2
 800ab52:	330c      	adds	r3, #12
 800ab54:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800ab56:	4b3e      	ldr	r3, [pc, #248]	@ (800ac50 <mem_trim+0x1fc>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d105      	bne.n	800ab6c <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800ab60:	6938      	ldr	r0, [r7, #16]
 800ab62:	f7ff fd9b 	bl	800a69c <ptr_to_mem>
 800ab66:	4603      	mov	r3, r0
 800ab68:	4a39      	ldr	r2, [pc, #228]	@ (800ac50 <mem_trim+0x1fc>)
 800ab6a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ab6c:	6938      	ldr	r0, [r7, #16]
 800ab6e:	f7ff fd95 	bl	800a69c <ptr_to_mem>
 800ab72:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2200      	movs	r2, #0
 800ab78:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	69fa      	ldr	r2, [r7, #28]
 800ab84:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab94:	d044      	beq.n	800ac20 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff fd7e 	bl	800a69c <ptr_to_mem>
 800aba0:	4602      	mov	r2, r0
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6053      	str	r3, [r2, #4]
 800aba6:	e03b      	b.n	800ac20 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	3318      	adds	r3, #24
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d336      	bcc.n	800ac20 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	4413      	add	r3, r2
 800abb8:	330c      	adds	r3, #12
 800abba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abc4:	d106      	bne.n	800abd4 <mem_trim+0x180>
 800abc6:	4b1c      	ldr	r3, [pc, #112]	@ (800ac38 <mem_trim+0x1e4>)
 800abc8:	f240 3216 	movw	r2, #790	@ 0x316
 800abcc:	491f      	ldr	r1, [pc, #124]	@ (800ac4c <mem_trim+0x1f8>)
 800abce:	481c      	ldr	r0, [pc, #112]	@ (800ac40 <mem_trim+0x1ec>)
 800abd0:	f00d f84a 	bl	8017c68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800abd4:	6938      	ldr	r0, [r7, #16]
 800abd6:	f7ff fd61 	bl	800a69c <ptr_to_mem>
 800abda:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800abdc:	4b1c      	ldr	r3, [pc, #112]	@ (800ac50 <mem_trim+0x1fc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d202      	bcs.n	800abec <mem_trim+0x198>
      lfree = mem2;
 800abe6:	4a1a      	ldr	r2, [pc, #104]	@ (800ac50 <mem_trim+0x1fc>)
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2200      	movs	r2, #0
 800abf0:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac0e:	d007      	beq.n	800ac20 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fd41 	bl	800a69c <ptr_to_mem>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ac20:	4809      	ldr	r0, [pc, #36]	@ (800ac48 <mem_trim+0x1f4>)
 800ac22:	f00c fed0 	bl	80179c6 <sys_mutex_unlock>
  return rmem;
 800ac26:	687b      	ldr	r3, [r7, #4]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3728      	adds	r7, #40	@ 0x28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20010de8 	.word	0x20010de8
 800ac34:	20010dec 	.word	0x20010dec
 800ac38:	08018edc 	.word	0x08018edc
 800ac3c:	08019068 	.word	0x08019068
 800ac40:	08018f24 	.word	0x08018f24
 800ac44:	08019080 	.word	0x08019080
 800ac48:	20010df0 	.word	0x20010df0
 800ac4c:	080190a0 	.word	0x080190a0
 800ac50:	20010df4 	.word	0x20010df4

0800ac54 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <mem_malloc+0x12>
    return NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e0d9      	b.n	800ae1a <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	3303      	adds	r3, #3
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	2b0b      	cmp	r3, #11
 800ac74:	d801      	bhi.n	800ac7a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ac76:	230c      	movs	r3, #12
 800ac78:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac80:	d803      	bhi.n	800ac8a <mem_malloc+0x36>
 800ac82:	69ba      	ldr	r2, [r7, #24]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d201      	bcs.n	800ac8e <mem_malloc+0x3a>
    return NULL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e0c5      	b.n	800ae1a <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ac8e:	4865      	ldr	r0, [pc, #404]	@ (800ae24 <mem_malloc+0x1d0>)
 800ac90:	f00c fe8a 	bl	80179a8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac94:	4b64      	ldr	r3, [pc, #400]	@ (800ae28 <mem_malloc+0x1d4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fd0f 	bl	800a6bc <mem_to_ptr>
 800ac9e:	61f8      	str	r0, [r7, #28]
 800aca0:	e0b0      	b.n	800ae04 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aca2:	69f8      	ldr	r0, [r7, #28]
 800aca4:	f7ff fcfa 	bl	800a69c <ptr_to_mem>
 800aca8:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	7a1b      	ldrb	r3, [r3, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f040 80a2 	bne.w	800adf8 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	f200 8099 	bhi.w	800adf8 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	f1a3 020c 	sub.w	r2, r3, #12
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	3318      	adds	r3, #24
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d331      	bcc.n	800ad3e <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	4413      	add	r3, r2
 800ace0:	330c      	adds	r3, #12
 800ace2:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acea:	d106      	bne.n	800acfa <mem_malloc+0xa6>
 800acec:	4b4f      	ldr	r3, [pc, #316]	@ (800ae2c <mem_malloc+0x1d8>)
 800acee:	f240 3287 	movw	r2, #903	@ 0x387
 800acf2:	494f      	ldr	r1, [pc, #316]	@ (800ae30 <mem_malloc+0x1dc>)
 800acf4:	484f      	ldr	r0, [pc, #316]	@ (800ae34 <mem_malloc+0x1e0>)
 800acf6:	f00c ffb7 	bl	8017c68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff fcce 	bl	800a69c <ptr_to_mem>
 800ad00:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2200      	movs	r2, #0
 800ad06:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad2a:	d00b      	beq.n	800ad44 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fcb3 	bl	800a69c <ptr_to_mem>
 800ad36:	4602      	mov	r2, r0
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6053      	str	r3, [r2, #4]
 800ad3c:	e002      	b.n	800ad44 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2201      	movs	r2, #1
 800ad42:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ad44:	4b38      	ldr	r3, [pc, #224]	@ (800ae28 <mem_malloc+0x1d4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d127      	bne.n	800ad9e <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800ad4e:	4b36      	ldr	r3, [pc, #216]	@ (800ae28 <mem_malloc+0x1d4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ad54:	e005      	b.n	800ad62 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fc9e 	bl	800a69c <ptr_to_mem>
 800ad60:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	7a1b      	ldrb	r3, [r3, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d004      	beq.n	800ad74 <mem_malloc+0x120>
 800ad6a:	4b33      	ldr	r3, [pc, #204]	@ (800ae38 <mem_malloc+0x1e4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d1f0      	bne.n	800ad56 <mem_malloc+0x102>
          }
          lfree = cur;
 800ad74:	4a2c      	ldr	r2, [pc, #176]	@ (800ae28 <mem_malloc+0x1d4>)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ad7a:	4b2b      	ldr	r3, [pc, #172]	@ (800ae28 <mem_malloc+0x1d4>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b2e      	ldr	r3, [pc, #184]	@ (800ae38 <mem_malloc+0x1e4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d00b      	beq.n	800ad9e <mem_malloc+0x14a>
 800ad86:	4b28      	ldr	r3, [pc, #160]	@ (800ae28 <mem_malloc+0x1d4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	7a1b      	ldrb	r3, [r3, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d006      	beq.n	800ad9e <mem_malloc+0x14a>
 800ad90:	4b26      	ldr	r3, [pc, #152]	@ (800ae2c <mem_malloc+0x1d8>)
 800ad92:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ad96:	4929      	ldr	r1, [pc, #164]	@ (800ae3c <mem_malloc+0x1e8>)
 800ad98:	4826      	ldr	r0, [pc, #152]	@ (800ae34 <mem_malloc+0x1e0>)
 800ad9a:	f00c ff65 	bl	8017c68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ad9e:	4821      	ldr	r0, [pc, #132]	@ (800ae24 <mem_malloc+0x1d0>)
 800ada0:	f00c fe11 	bl	80179c6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	4413      	add	r3, r2
 800adaa:	330c      	adds	r3, #12
 800adac:	4a22      	ldr	r2, [pc, #136]	@ (800ae38 <mem_malloc+0x1e4>)
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d906      	bls.n	800adc2 <mem_malloc+0x16e>
 800adb4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae2c <mem_malloc+0x1d8>)
 800adb6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800adba:	4921      	ldr	r1, [pc, #132]	@ (800ae40 <mem_malloc+0x1ec>)
 800adbc:	481d      	ldr	r0, [pc, #116]	@ (800ae34 <mem_malloc+0x1e0>)
 800adbe:	f00c ff53 	bl	8017c68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f003 0303 	and.w	r3, r3, #3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <mem_malloc+0x186>
 800adcc:	4b17      	ldr	r3, [pc, #92]	@ (800ae2c <mem_malloc+0x1d8>)
 800adce:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800add2:	491c      	ldr	r1, [pc, #112]	@ (800ae44 <mem_malloc+0x1f0>)
 800add4:	4817      	ldr	r0, [pc, #92]	@ (800ae34 <mem_malloc+0x1e0>)
 800add6:	f00c ff47 	bl	8017c68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f003 0303 	and.w	r3, r3, #3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d006      	beq.n	800adf2 <mem_malloc+0x19e>
 800ade4:	4b11      	ldr	r3, [pc, #68]	@ (800ae2c <mem_malloc+0x1d8>)
 800ade6:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800adea:	4917      	ldr	r1, [pc, #92]	@ (800ae48 <mem_malloc+0x1f4>)
 800adec:	4811      	ldr	r0, [pc, #68]	@ (800ae34 <mem_malloc+0x1e0>)
 800adee:	f00c ff3b 	bl	8017c68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	330c      	adds	r3, #12
 800adf6:	e010      	b.n	800ae1a <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800adf8:	69f8      	ldr	r0, [r7, #28]
 800adfa:	f7ff fc4f 	bl	800a69c <ptr_to_mem>
 800adfe:	4603      	mov	r3, r0
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	f4ff af48 	bcc.w	800aca2 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ae12:	4804      	ldr	r0, [pc, #16]	@ (800ae24 <mem_malloc+0x1d0>)
 800ae14:	f00c fdd7 	bl	80179c6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3720      	adds	r7, #32
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20010df0 	.word	0x20010df0
 800ae28:	20010df4 	.word	0x20010df4
 800ae2c:	08018edc 	.word	0x08018edc
 800ae30:	080190a0 	.word	0x080190a0
 800ae34:	08018f24 	.word	0x08018f24
 800ae38:	20010dec 	.word	0x20010dec
 800ae3c:	080190b4 	.word	0x080190b4
 800ae40:	080190d0 	.word	0x080190d0
 800ae44:	08019100 	.word	0x08019100
 800ae48:	08019130 	.word	0x08019130

0800ae4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	3303      	adds	r3, #3
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e011      	b.n	800ae92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	4413      	add	r3, r2
 800ae8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	dbe7      	blt.n	800ae6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	80fb      	strh	r3, [r7, #6]
 800aeb6:	e009      	b.n	800aecc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	4a08      	ldr	r2, [pc, #32]	@ (800aedc <memp_init+0x30>)
 800aebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff ffc3 	bl	800ae4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	3301      	adds	r3, #1
 800aeca:	80fb      	strh	r3, [r7, #6]
 800aecc:	88fb      	ldrh	r3, [r7, #6]
 800aece:	2b0c      	cmp	r3, #12
 800aed0:	d9f2      	bls.n	800aeb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	0801c37c 	.word	0x0801c37c

0800aee0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800aee8:	f00c fda0 	bl	8017a2c <sys_arch_protect>
 800aeec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d015      	beq.n	800af28 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	6812      	ldr	r2, [r2, #0]
 800af04:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d006      	beq.n	800af1e <do_memp_malloc_pool+0x3e>
 800af10:	4b09      	ldr	r3, [pc, #36]	@ (800af38 <do_memp_malloc_pool+0x58>)
 800af12:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800af16:	4909      	ldr	r1, [pc, #36]	@ (800af3c <do_memp_malloc_pool+0x5c>)
 800af18:	4809      	ldr	r0, [pc, #36]	@ (800af40 <do_memp_malloc_pool+0x60>)
 800af1a:	f00c fea5 	bl	8017c68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f00c fd92 	bl	8017a48 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	e003      	b.n	800af30 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f00c fd8d 	bl	8017a48 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	08019154 	.word	0x08019154
 800af3c:	08019184 	.word	0x08019184
 800af40:	080191a8 	.word	0x080191a8

0800af44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <memp_malloc_pool+0x1c>
 800af52:	4b0a      	ldr	r3, [pc, #40]	@ (800af7c <memp_malloc_pool+0x38>)
 800af54:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800af58:	4909      	ldr	r1, [pc, #36]	@ (800af80 <memp_malloc_pool+0x3c>)
 800af5a:	480a      	ldr	r0, [pc, #40]	@ (800af84 <memp_malloc_pool+0x40>)
 800af5c:	f00c fe84 	bl	8017c68 <iprintf>
  if (desc == NULL) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <memp_malloc_pool+0x26>
    return NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	e003      	b.n	800af72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff ffb8 	bl	800aee0 <do_memp_malloc_pool>
 800af70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	08019154 	.word	0x08019154
 800af80:	080191d0 	.word	0x080191d0
 800af84:	080191a8 	.word	0x080191a8

0800af88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	2b0c      	cmp	r3, #12
 800af96:	d908      	bls.n	800afaa <memp_malloc+0x22>
 800af98:	4b0a      	ldr	r3, [pc, #40]	@ (800afc4 <memp_malloc+0x3c>)
 800af9a:	f240 1257 	movw	r2, #343	@ 0x157
 800af9e:	490a      	ldr	r1, [pc, #40]	@ (800afc8 <memp_malloc+0x40>)
 800afa0:	480a      	ldr	r0, [pc, #40]	@ (800afcc <memp_malloc+0x44>)
 800afa2:	f00c fe61 	bl	8017c68 <iprintf>
 800afa6:	2300      	movs	r3, #0
 800afa8:	e008      	b.n	800afbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	4a08      	ldr	r2, [pc, #32]	@ (800afd0 <memp_malloc+0x48>)
 800afae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff ff94 	bl	800aee0 <do_memp_malloc_pool>
 800afb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800afba:	68fb      	ldr	r3, [r7, #12]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	08019154 	.word	0x08019154
 800afc8:	080191e4 	.word	0x080191e4
 800afcc:	080191a8 	.word	0x080191a8
 800afd0:	0801c37c 	.word	0x0801c37c

0800afd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d006      	beq.n	800aff6 <do_memp_free_pool+0x22>
 800afe8:	4b0d      	ldr	r3, [pc, #52]	@ (800b020 <do_memp_free_pool+0x4c>)
 800afea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800afee:	490d      	ldr	r1, [pc, #52]	@ (800b024 <do_memp_free_pool+0x50>)
 800aff0:	480d      	ldr	r0, [pc, #52]	@ (800b028 <do_memp_free_pool+0x54>)
 800aff2:	f00c fe39 	bl	8017c68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800affa:	f00c fd17 	bl	8017a2c <sys_arch_protect>
 800affe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b012:	68b8      	ldr	r0, [r7, #8]
 800b014:	f00c fd18 	bl	8017a48 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	08019154 	.word	0x08019154
 800b024:	08019204 	.word	0x08019204
 800b028:	080191a8 	.word	0x080191a8

0800b02c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <memp_free_pool+0x1e>
 800b03c:	4b0a      	ldr	r3, [pc, #40]	@ (800b068 <memp_free_pool+0x3c>)
 800b03e:	f240 1295 	movw	r2, #405	@ 0x195
 800b042:	490a      	ldr	r1, [pc, #40]	@ (800b06c <memp_free_pool+0x40>)
 800b044:	480a      	ldr	r0, [pc, #40]	@ (800b070 <memp_free_pool+0x44>)
 800b046:	f00c fe0f 	bl	8017c68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d007      	beq.n	800b060 <memp_free_pool+0x34>
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d004      	beq.n	800b060 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff ffbb 	bl	800afd4 <do_memp_free_pool>
 800b05e:	e000      	b.n	800b062 <memp_free_pool+0x36>
    return;
 800b060:	bf00      	nop
}
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	08019154 	.word	0x08019154
 800b06c:	080191d0 	.word	0x080191d0
 800b070:	080191a8 	.word	0x080191a8

0800b074 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	6039      	str	r1, [r7, #0]
 800b07e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b0c      	cmp	r3, #12
 800b084:	d907      	bls.n	800b096 <memp_free+0x22>
 800b086:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b8 <memp_free+0x44>)
 800b088:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b08c:	490b      	ldr	r1, [pc, #44]	@ (800b0bc <memp_free+0x48>)
 800b08e:	480c      	ldr	r0, [pc, #48]	@ (800b0c0 <memp_free+0x4c>)
 800b090:	f00c fdea 	bl	8017c68 <iprintf>
 800b094:	e00c      	b.n	800b0b0 <memp_free+0x3c>

  if (mem == NULL) {
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d008      	beq.n	800b0ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	4a09      	ldr	r2, [pc, #36]	@ (800b0c4 <memp_free+0x50>)
 800b0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff ff94 	bl	800afd4 <do_memp_free_pool>
 800b0ac:	e000      	b.n	800b0b0 <memp_free+0x3c>
    return;
 800b0ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08019154 	.word	0x08019154
 800b0bc:	08019224 	.word	0x08019224
 800b0c0:	080191a8 	.word	0x080191a8
 800b0c4:	0801c37c 	.word	0x0801c37c

0800b0c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b0cc:	bf00      	nop
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
 800b0e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d108      	bne.n	800b0fe <netif_add+0x26>
 800b0ec:	4b5f      	ldr	r3, [pc, #380]	@ (800b26c <netif_add+0x194>)
 800b0ee:	f240 1227 	movw	r2, #295	@ 0x127
 800b0f2:	495f      	ldr	r1, [pc, #380]	@ (800b270 <netif_add+0x198>)
 800b0f4:	485f      	ldr	r0, [pc, #380]	@ (800b274 <netif_add+0x19c>)
 800b0f6:	f00c fdb7 	bl	8017c68 <iprintf>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e0b1      	b.n	800b262 <netif_add+0x18a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d108      	bne.n	800b116 <netif_add+0x3e>
 800b104:	4b59      	ldr	r3, [pc, #356]	@ (800b26c <netif_add+0x194>)
 800b106:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b10a:	495b      	ldr	r1, [pc, #364]	@ (800b278 <netif_add+0x1a0>)
 800b10c:	4859      	ldr	r0, [pc, #356]	@ (800b274 <netif_add+0x19c>)
 800b10e:	f00c fdab 	bl	8017c68 <iprintf>
 800b112:	2300      	movs	r3, #0
 800b114:	e0a5      	b.n	800b262 <netif_add+0x18a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b11c:	4b57      	ldr	r3, [pc, #348]	@ (800b27c <netif_add+0x1a4>)
 800b11e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b126:	4b55      	ldr	r3, [pc, #340]	@ (800b27c <netif_add+0x1a4>)
 800b128:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b130:	4b52      	ldr	r3, [pc, #328]	@ (800b27c <netif_add+0x1a4>)
 800b132:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	4a4d      	ldr	r2, [pc, #308]	@ (800b280 <netif_add+0x1a8>)
 800b14a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3328      	adds	r3, #40	@ 0x28
 800b15e:	2204      	movs	r2, #4
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f00c fde5 	bl	8017d32 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6a3a      	ldr	r2, [r7, #32]
 800b178:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num;
 800b17a:	4b42      	ldr	r3, [pc, #264]	@ (800b284 <netif_add+0x1ac>)
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b188:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f947 	bl	800b424 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	4798      	blx	r3
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <netif_add+0xce>
    return NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e05d      	b.n	800b262 <netif_add+0x18a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b1ac:	2bff      	cmp	r3, #255	@ 0xff
 800b1ae:	d103      	bne.n	800b1b8 <netif_add+0xe0>
        netif->num = 0;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b1bc:	4b32      	ldr	r3, [pc, #200]	@ (800b288 <netif_add+0x1b0>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e02b      	b.n	800b21c <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d106      	bne.n	800b1da <netif_add+0x102>
 800b1cc:	4b27      	ldr	r3, [pc, #156]	@ (800b26c <netif_add+0x194>)
 800b1ce:	f240 128b 	movw	r2, #395	@ 0x18b
 800b1d2:	492e      	ldr	r1, [pc, #184]	@ (800b28c <netif_add+0x1b4>)
 800b1d4:	4827      	ldr	r0, [pc, #156]	@ (800b274 <netif_add+0x19c>)
 800b1d6:	f00c fd47 	bl	8017c68 <iprintf>
        num_netifs++;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2bff      	cmp	r3, #255	@ 0xff
 800b1e4:	dd06      	ble.n	800b1f4 <netif_add+0x11c>
 800b1e6:	4b21      	ldr	r3, [pc, #132]	@ (800b26c <netif_add+0x194>)
 800b1e8:	f240 128d 	movw	r2, #397	@ 0x18d
 800b1ec:	4928      	ldr	r1, [pc, #160]	@ (800b290 <netif_add+0x1b8>)
 800b1ee:	4821      	ldr	r0, [pc, #132]	@ (800b274 <netif_add+0x19c>)
 800b1f0:	f00c fd3a 	bl	8017c68 <iprintf>
        if (netif2->num == netif->num) {
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b200:	429a      	cmp	r2, r3
 800b202:	d108      	bne.n	800b216 <netif_add+0x13e>
          netif->num++;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b20a:	3301      	adds	r3, #1
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 800b214:	e005      	b.n	800b222 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1d0      	bne.n	800b1c4 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1be      	bne.n	800b1a6 <netif_add+0xce>
  }
  if (netif->num == 254) {
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b22e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b230:	d103      	bne.n	800b23a <netif_add+0x162>
    netif_num = 0;
 800b232:	4b14      	ldr	r3, [pc, #80]	@ (800b284 <netif_add+0x1ac>)
 800b234:	2200      	movs	r2, #0
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	e006      	b.n	800b248 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b240:	3301      	adds	r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	4b0f      	ldr	r3, [pc, #60]	@ (800b284 <netif_add+0x1ac>)
 800b246:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b248:	4b0f      	ldr	r3, [pc, #60]	@ (800b288 <netif_add+0x1b0>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b250:	4a0d      	ldr	r2, [pc, #52]	@ (800b288 <netif_add+0x1b0>)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 800b256:	2200      	movs	r2, #0
 800b258:	2101      	movs	r1, #1
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 faf6 	bl	800b84c <netif_invoke_ext_callback>

  return netif;
 800b260:	68fb      	ldr	r3, [r7, #12]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	08019240 	.word	0x08019240
 800b270:	080192d4 	.word	0x080192d4
 800b274:	08019290 	.word	0x08019290
 800b278:	080192f0 	.word	0x080192f0
 800b27c:	0801c400 	.word	0x0801c400
 800b280:	0800b7e3 	.word	0x0800b7e3
 800b284:	2001dcf0 	.word	0x2001dcf0
 800b288:	2001dce8 	.word	0x2001dce8
 800b28c:	08019314 	.word	0x08019314
 800b290:	08019328 	.word	0x08019328

0800b294 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f003 f8b7 	bl	800e414 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f008 f921 	bl	80134f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <netif_do_set_ipaddr+0x20>
 800b2ca:	4b21      	ldr	r3, [pc, #132]	@ (800b350 <netif_do_set_ipaddr+0x98>)
 800b2cc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b2d0:	4920      	ldr	r1, [pc, #128]	@ (800b354 <netif_do_set_ipaddr+0x9c>)
 800b2d2:	4821      	ldr	r0, [pc, #132]	@ (800b358 <netif_do_set_ipaddr+0xa0>)
 800b2d4:	f00c fcc8 	bl	8017c68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <netif_do_set_ipaddr+0x34>
 800b2de:	4b1c      	ldr	r3, [pc, #112]	@ (800b350 <netif_do_set_ipaddr+0x98>)
 800b2e0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b2e4:	491b      	ldr	r1, [pc, #108]	@ (800b354 <netif_do_set_ipaddr+0x9c>)
 800b2e6:	481c      	ldr	r0, [pc, #112]	@ (800b358 <netif_do_set_ipaddr+0xa0>)
 800b2e8:	f00c fcbe 	bl	8017c68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d024      	beq.n	800b344 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3304      	adds	r3, #4
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b30a:	f107 0314 	add.w	r3, r7, #20
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff ffbf 	bl	800b294 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <netif_do_set_ipaddr+0x6a>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	e000      	b.n	800b324 <netif_do_set_ipaddr+0x6c>
 800b322:	2300      	movs	r3, #0
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b328:	2101      	movs	r1, #1
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 f94a 	bl	800b5c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d003      	beq.n	800b340 <netif_do_set_ipaddr+0x88>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	4798      	blx	r3
    return 1; /* address changed */
 800b340:	2301      	movs	r3, #1
 800b342:	e000      	b.n	800b346 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	08019240 	.word	0x08019240
 800b354:	08019358 	.word	0x08019358
 800b358:	08019290 	.word	0x08019290

0800b35c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3308      	adds	r3, #8
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d019      	beq.n	800b3aa <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <netif_do_set_netmask+0x2e>
 800b37c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <netif_do_set_netmask+0x58>)
 800b37e:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800b382:	490d      	ldr	r1, [pc, #52]	@ (800b3b8 <netif_do_set_netmask+0x5c>)
 800b384:	480d      	ldr	r0, [pc, #52]	@ (800b3bc <netif_do_set_netmask+0x60>)
 800b386:	f00c fc6f 	bl	8017c68 <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3308      	adds	r3, #8
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <netif_do_set_netmask+0x44>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	e000      	b.n	800b3a2 <netif_do_set_netmask+0x46>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	08019240 	.word	0x08019240
 800b3b8:	08019358 	.word	0x08019358
 800b3bc:	08019290 	.word	0x08019290

0800b3c0 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	330c      	adds	r3, #12
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d019      	beq.n	800b40e <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <netif_do_set_gw+0x2e>
 800b3e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b418 <netif_do_set_gw+0x58>)
 800b3e2:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800b3e6:	490d      	ldr	r1, [pc, #52]	@ (800b41c <netif_do_set_gw+0x5c>)
 800b3e8:	480d      	ldr	r0, [pc, #52]	@ (800b420 <netif_do_set_gw+0x60>)
 800b3ea:	f00c fc3d 	bl	8017c68 <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <netif_do_set_gw+0x44>
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	e000      	b.n	800b406 <netif_do_set_gw+0x46>
 800b404:	2300      	movs	r3, #0
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	08019240 	.word	0x08019240
 800b41c:	08019358 	.word	0x08019358
 800b420:	08019290 	.word	0x08019290

0800b424 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08e      	sub	sp, #56	@ 0x38
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 800b432:	2300      	movs	r3, #0
 800b434:	86fb      	strh	r3, [r7, #54]	@ 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 800b436:	f107 0318 	add.w	r3, r7, #24
 800b43a:	633b      	str	r3, [r7, #48]	@ 0x30
  ip_addr_t *old_gw = &old_gw_val;
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 800b448:	4b36      	ldr	r3, [pc, #216]	@ (800b524 <netif_set_addr+0x100>)
 800b44a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 800b452:	4b34      	ldr	r3, [pc, #208]	@ (800b524 <netif_set_addr+0x100>)
 800b454:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 800b45c:	4b31      	ldr	r3, [pc, #196]	@ (800b524 <netif_set_addr+0x100>)
 800b45e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <netif_set_addr+0x4a>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <netif_set_addr+0x4e>
 800b46e:	2301      	movs	r3, #1
 800b470:	e000      	b.n	800b474 <netif_set_addr+0x50>
 800b472:	2300      	movs	r3, #0
 800b474:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (remove) {
 800b476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d010      	beq.n	800b49e <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b47c:	f107 0310 	add.w	r3, r7, #16
 800b480:	461a      	mov	r2, r3
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7ff ff17 	bl	800b2b8 <netif_do_set_ipaddr>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d006      	beq.n	800b49e <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800b490:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b492:	f043 0310 	orr.w	r3, r3, #16
 800b496:	86fb      	strh	r3, [r7, #54]	@ 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800b498:	f107 0310 	add.w	r3, r7, #16
 800b49c:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f7ff ff5a 	bl	800b35c <netif_do_set_netmask>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d005      	beq.n	800b4ba <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 800b4ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f7ff ff7e 	bl	800b3c0 <netif_do_set_gw>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 800b4ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4cc:	f043 0320 	orr.w	r3, r3, #32
 800b4d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 800b4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d4:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  }
  if (!remove) {
 800b4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d110      	bne.n	800b4fe <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b4dc:	f107 0310 	add.w	r3, r7, #16
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7ff fee7 	bl	800b2b8 <netif_do_set_ipaddr>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800b4f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4f2:	f043 0310 	orr.w	r3, r3, #16
 800b4f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800b4f8:	f107 0310 	add.w	r3, r7, #16
 800b4fc:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 800b4fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00a      	beq.n	800b51a <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 800b504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b50a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 800b50c:	f107 021c 	add.w	r2, r7, #28
 800b510:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b512:	4619      	mov	r1, r3
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 f999 	bl	800b84c <netif_invoke_ext_callback>
  }
#endif
}
 800b51a:	bf00      	nop
 800b51c:	3738      	adds	r7, #56	@ 0x38
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	0801c400 	.word	0x0801c400

0800b528 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b530:	4a04      	ldr	r2, [pc, #16]	@ (800b544 <netif_set_default+0x1c>)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b536:	bf00      	nop
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	2001dcec 	.word	0x2001dcec

0800b548 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d107      	bne.n	800b566 <netif_set_up+0x1e>
 800b556:	4b18      	ldr	r3, [pc, #96]	@ (800b5b8 <netif_set_up+0x70>)
 800b558:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b55c:	4917      	ldr	r1, [pc, #92]	@ (800b5bc <netif_set_up+0x74>)
 800b55e:	4818      	ldr	r0, [pc, #96]	@ (800b5c0 <netif_set_up+0x78>)
 800b560:	f00c fb82 	bl	8017c68 <iprintf>
 800b564:	e024      	b.n	800b5b0 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b56c:	f003 0301 	and.w	r3, r3, #1
 800b570:	2b00      	cmp	r3, #0
 800b572:	d11d      	bne.n	800b5b0 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b57a:	f043 0301 	orr.w	r3, r3, #1
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <netif_set_up+0x4e>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 800b596:	2301      	movs	r3, #1
 800b598:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b59a:	f107 030c 	add.w	r3, r7, #12
 800b59e:	461a      	mov	r2, r3
 800b5a0:	2108      	movs	r1, #8
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f952 	bl	800b84c <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b5a8:	2103      	movs	r1, #3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f80a 	bl	800b5c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	08019240 	.word	0x08019240
 800b5bc:	080193c8 	.word	0x080193c8
 800b5c0:	08019290 	.word	0x08019290

0800b5c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <netif_issue_reports+0x20>
 800b5d6:	4b18      	ldr	r3, [pc, #96]	@ (800b638 <netif_issue_reports+0x74>)
 800b5d8:	f240 326d 	movw	r2, #877	@ 0x36d
 800b5dc:	4917      	ldr	r1, [pc, #92]	@ (800b63c <netif_issue_reports+0x78>)
 800b5de:	4818      	ldr	r0, [pc, #96]	@ (800b640 <netif_issue_reports+0x7c>)
 800b5e0:	f00c fb42 	bl	8017c68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b5ea:	f003 0304 	and.w	r3, r3, #4
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d01e      	beq.n	800b630 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b5f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d017      	beq.n	800b630 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d013      	beq.n	800b632 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3304      	adds	r3, #4
 800b60e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00e      	beq.n	800b632 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b61a:	f003 0308 	and.w	r3, r3, #8
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d007      	beq.n	800b632 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f00a fd5d 	bl	80160e8 <etharp_request>
 800b62e:	e000      	b.n	800b632 <netif_issue_reports+0x6e>
    return;
 800b630:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	08019240 	.word	0x08019240
 800b63c:	080193e4 	.word	0x080193e4
 800b640:	08019290 	.word	0x08019290

0800b644 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d107      	bne.n	800b662 <netif_set_down+0x1e>
 800b652:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c0 <netif_set_down+0x7c>)
 800b654:	f240 329b 	movw	r2, #923	@ 0x39b
 800b658:	491a      	ldr	r1, [pc, #104]	@ (800b6c4 <netif_set_down+0x80>)
 800b65a:	481b      	ldr	r0, [pc, #108]	@ (800b6c8 <netif_set_down+0x84>)
 800b65c:	f00c fb04 	bl	8017c68 <iprintf>
 800b660:	e02a      	b.n	800b6b8 <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d023      	beq.n	800b6b8 <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b674:	f107 030c 	add.w	r3, r7, #12
 800b678:	461a      	mov	r2, r3
 800b67a:	2108      	movs	r1, #8
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f8e5 	bl	800b84c <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b688:	f023 0301 	bic.w	r3, r3, #1
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b69a:	f003 0308 	and.w	r3, r3, #8
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f00a f8da 	bl	801585c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <netif_set_down+0x74>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
  }
}
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	08019240 	.word	0x08019240
 800b6c4:	08019408 	.word	0x08019408
 800b6c8:	08019290 	.word	0x08019290

0800b6cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d107      	bne.n	800b6ea <netif_set_link_up+0x1e>
 800b6da:	4b19      	ldr	r3, [pc, #100]	@ (800b740 <netif_set_link_up+0x74>)
 800b6dc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b6e0:	4918      	ldr	r1, [pc, #96]	@ (800b744 <netif_set_link_up+0x78>)
 800b6e2:	4819      	ldr	r0, [pc, #100]	@ (800b748 <netif_set_link_up+0x7c>)
 800b6e4:	f00c fac0 	bl	8017c68 <iprintf>
 800b6e8:	e027      	b.n	800b73a <netif_set_link_up+0x6e>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b6f0:	f003 0304 	and.w	r3, r3, #4
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d120      	bne.n	800b73a <netif_set_link_up+0x6e>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b6fe:	f043 0304 	orr.w	r3, r3, #4
 800b702:	b2da      	uxtb	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f008 fb1c 	bl	8013d48 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b710:	2103      	movs	r1, #3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff ff56 	bl	800b5c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <netif_set_link_up+0x5c>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 800b728:	2301      	movs	r3, #1
 800b72a:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b72c:	f107 030c 	add.w	r3, r7, #12
 800b730:	461a      	mov	r2, r3
 800b732:	2104      	movs	r1, #4
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f889 	bl	800b84c <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	08019240 	.word	0x08019240
 800b744:	08019428 	.word	0x08019428
 800b748:	08019290 	.word	0x08019290

0800b74c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d107      	bne.n	800b76a <netif_set_link_down+0x1e>
 800b75a:	4b16      	ldr	r3, [pc, #88]	@ (800b7b4 <netif_set_link_down+0x68>)
 800b75c:	f240 4206 	movw	r2, #1030	@ 0x406
 800b760:	4915      	ldr	r1, [pc, #84]	@ (800b7b8 <netif_set_link_down+0x6c>)
 800b762:	4816      	ldr	r0, [pc, #88]	@ (800b7bc <netif_set_link_down+0x70>)
 800b764:	f00c fa80 	bl	8017c68 <iprintf>
 800b768:	e020      	b.n	800b7ac <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b00      	cmp	r3, #0
 800b776:	d019      	beq.n	800b7ac <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b77e:	f023 0304 	bic.w	r3, r3, #4
 800b782:	b2da      	uxtb	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <netif_set_link_down+0x4e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b79e:	f107 030c 	add.w	r3, r7, #12
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	2104      	movs	r1, #4
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f850 	bl	800b84c <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b7ac:	3718      	adds	r7, #24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	08019240 	.word	0x08019240
 800b7b8:	0801944c 	.word	0x0801944c
 800b7bc:	08019290 	.word	0x08019290

0800b7c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	621a      	str	r2, [r3, #32]
  }
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b7ee:	f06f 030b 	mvn.w	r3, #11
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
	...

0800b800 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	4603      	mov	r3, r0
 800b808:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d013      	beq.n	800b838 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b810:	4b0d      	ldr	r3, [pc, #52]	@ (800b848 <netif_get_by_index+0x48>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e00c      	b.n	800b832 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b81e:	3301      	adds	r3, #1
 800b820:	b2db      	uxtb	r3, r3
 800b822:	79fa      	ldrb	r2, [r7, #7]
 800b824:	429a      	cmp	r2, r3
 800b826:	d101      	bne.n	800b82c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	e006      	b.n	800b83a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1ef      	bne.n	800b818 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	2001dce8 	.word	0x2001dce8

0800b84c <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	460b      	mov	r3, r1
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 800b85a:	4b0f      	ldr	r3, [pc, #60]	@ (800b898 <netif_invoke_ext_callback+0x4c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d110      	bne.n	800b888 <netif_invoke_ext_callback+0x3c>
 800b866:	4b0d      	ldr	r3, [pc, #52]	@ (800b89c <netif_invoke_ext_callback+0x50>)
 800b868:	f240 62fc 	movw	r2, #1788	@ 0x6fc
 800b86c:	490c      	ldr	r1, [pc, #48]	@ (800b8a0 <netif_invoke_ext_callback+0x54>)
 800b86e:	480d      	ldr	r0, [pc, #52]	@ (800b8a4 <netif_invoke_ext_callback+0x58>)
 800b870:	f00c f9fa 	bl	8017c68 <iprintf>

  while (callback != NULL) {
 800b874:	e008      	b.n	800b888 <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	8979      	ldrh	r1, [r7, #10]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	4798      	blx	r3
    callback = callback->next;
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1f3      	bne.n	800b876 <netif_invoke_ext_callback+0x2a>
  }
}
 800b88e:	bf00      	nop
 800b890:	bf00      	nop
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	2001dce4 	.word	0x2001dce4
 800b89c:	08019240 	.word	0x08019240
 800b8a0:	080194b0 	.word	0x080194b0
 800b8a4:	08019290 	.word	0x08019290

0800b8a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b8ae:	f00c f8bd 	bl	8017a2c <sys_arch_protect>
 800b8b2:	6038      	str	r0, [r7, #0]
 800b8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b8ec <pbuf_free_ooseq+0x44>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	701a      	strb	r2, [r3, #0]
 800b8ba:	6838      	ldr	r0, [r7, #0]
 800b8bc:	f00c f8c4 	bl	8017a48 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f0 <pbuf_free_ooseq+0x48>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	607b      	str	r3, [r7, #4]
 800b8c6:	e00a      	b.n	800b8de <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f002 fddd 	bl	800e490 <tcp_free_ooseq>
      return;
 800b8d6:	e005      	b.n	800b8e4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	607b      	str	r3, [r7, #4]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1f1      	bne.n	800b8c8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	2001dcf1 	.word	0x2001dcf1
 800b8f0:	2001dd00 	.word	0x2001dd00

0800b8f4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b8fc:	f7ff ffd4 	bl	800b8a8 <pbuf_free_ooseq>
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b90e:	f00c f88d 	bl	8017a2c <sys_arch_protect>
 800b912:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b914:	4b0f      	ldr	r3, [pc, #60]	@ (800b954 <pbuf_pool_is_empty+0x4c>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b91a:	4b0e      	ldr	r3, [pc, #56]	@ (800b954 <pbuf_pool_is_empty+0x4c>)
 800b91c:	2201      	movs	r2, #1
 800b91e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f00c f891 	bl	8017a48 <sys_arch_unprotect>

  if (!queued) {
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10f      	bne.n	800b94c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b92c:	2100      	movs	r1, #0
 800b92e:	480a      	ldr	r0, [pc, #40]	@ (800b958 <pbuf_pool_is_empty+0x50>)
 800b930:	f7fe fde4 	bl	800a4fc <tcpip_try_callback>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d008      	beq.n	800b94c <pbuf_pool_is_empty+0x44>
 800b93a:	f00c f877 	bl	8017a2c <sys_arch_protect>
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	4b04      	ldr	r3, [pc, #16]	@ (800b954 <pbuf_pool_is_empty+0x4c>)
 800b942:	2200      	movs	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f00c f87e 	bl	8017a48 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	2001dcf1 	.word	0x2001dcf1
 800b958:	0800b8f5 	.word	0x0800b8f5

0800b95c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	4611      	mov	r1, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	460b      	mov	r3, r1
 800b96c:	80fb      	strh	r3, [r7, #6]
 800b96e:	4613      	mov	r3, r2
 800b970:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	88fa      	ldrh	r2, [r7, #6]
 800b982:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	88ba      	ldrh	r2, [r7, #4]
 800b988:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b98a:	8b3b      	ldrh	r3, [r7, #24]
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	7f3a      	ldrb	r2, [r7, #28]
 800b996:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2201      	movs	r2, #1
 800b99c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	73da      	strb	r2, [r3, #15]
}
 800b9a4:	bf00      	nop
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08c      	sub	sp, #48	@ 0x30
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	80bb      	strh	r3, [r7, #4]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b9c6:	887b      	ldrh	r3, [r7, #2]
 800b9c8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b9cc:	d07f      	beq.n	800bace <pbuf_alloc+0x11e>
 800b9ce:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b9d2:	f300 80c7 	bgt.w	800bb64 <pbuf_alloc+0x1b4>
 800b9d6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b9da:	d010      	beq.n	800b9fe <pbuf_alloc+0x4e>
 800b9dc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b9e0:	f300 80c0 	bgt.w	800bb64 <pbuf_alloc+0x1b4>
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d002      	beq.n	800b9ee <pbuf_alloc+0x3e>
 800b9e8:	2b41      	cmp	r3, #65	@ 0x41
 800b9ea:	f040 80bb 	bne.w	800bb64 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b9ee:	887a      	ldrh	r2, [r7, #2]
 800b9f0:	88bb      	ldrh	r3, [r7, #4]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f000 f8d1 	bl	800bb9c <pbuf_alloc_reference>
 800b9fa:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b9fc:	e0bc      	b.n	800bb78 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ba06:	88bb      	ldrh	r3, [r7, #4]
 800ba08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ba0a:	200c      	movs	r0, #12
 800ba0c:	f7ff fabc 	bl	800af88 <memp_malloc>
 800ba10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d109      	bne.n	800ba2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ba18:	f7ff ff76 	bl	800b908 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d002      	beq.n	800ba28 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ba22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba24:	f000 faa6 	bl	800bf74 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e0a6      	b.n	800bb7a <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ba2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba2e:	3303      	adds	r3, #3
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	f5c3 63c0 	rsb	r3, r3, #1536	@ 0x600
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	8b7a      	ldrh	r2, [r7, #26]
 800ba40:	4293      	cmp	r3, r2
 800ba42:	bf28      	it	cs
 800ba44:	4613      	movcs	r3, r2
 800ba46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ba48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba4a:	3310      	adds	r3, #16
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	4413      	add	r3, r2
 800ba50:	3303      	adds	r3, #3
 800ba52:	f023 0303 	bic.w	r3, r3, #3
 800ba56:	4618      	mov	r0, r3
 800ba58:	89f9      	ldrh	r1, [r7, #14]
 800ba5a:	8b7a      	ldrh	r2, [r7, #26]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	887b      	ldrh	r3, [r7, #2]
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	460b      	mov	r3, r1
 800ba66:	4601      	mov	r1, r0
 800ba68:	6938      	ldr	r0, [r7, #16]
 800ba6a:	f7ff ff77 	bl	800b95c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d006      	beq.n	800ba88 <pbuf_alloc+0xd8>
 800ba7a:	4b42      	ldr	r3, [pc, #264]	@ (800bb84 <pbuf_alloc+0x1d4>)
 800ba7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba80:	4941      	ldr	r1, [pc, #260]	@ (800bb88 <pbuf_alloc+0x1d8>)
 800ba82:	4842      	ldr	r0, [pc, #264]	@ (800bb8c <pbuf_alloc+0x1dc>)
 800ba84:	f00c f8f0 	bl	8017c68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ba88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba8a:	3303      	adds	r3, #3
 800ba8c:	f023 0303 	bic.w	r3, r3, #3
 800ba90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ba94:	d106      	bne.n	800baa4 <pbuf_alloc+0xf4>
 800ba96:	4b3b      	ldr	r3, [pc, #236]	@ (800bb84 <pbuf_alloc+0x1d4>)
 800ba98:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ba9c:	493c      	ldr	r1, [pc, #240]	@ (800bb90 <pbuf_alloc+0x1e0>)
 800ba9e:	483b      	ldr	r0, [pc, #236]	@ (800bb8c <pbuf_alloc+0x1dc>)
 800baa0:	f00c f8e2 	bl	8017c68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	627b      	str	r3, [r7, #36]	@ 0x24
 800baae:	e002      	b.n	800bab6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800baba:	8b7a      	ldrh	r2, [r7, #26]
 800babc:	89fb      	ldrh	r3, [r7, #14]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bac6:	8b7b      	ldrh	r3, [r7, #26]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d19e      	bne.n	800ba0a <pbuf_alloc+0x5a>
      break;
 800bacc:	e054      	b.n	800bb78 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bace:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bad0:	3303      	adds	r3, #3
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f023 0303 	bic.w	r3, r3, #3
 800bad8:	b29a      	uxth	r2, r3
 800bada:	88bb      	ldrh	r3, [r7, #4]
 800badc:	3303      	adds	r3, #3
 800bade:	b29b      	uxth	r3, r3
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	4413      	add	r3, r2
 800bae8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800baea:	8b3b      	ldrh	r3, [r7, #24]
 800baec:	3310      	adds	r3, #16
 800baee:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800baf0:	8b3a      	ldrh	r2, [r7, #24]
 800baf2:	88bb      	ldrh	r3, [r7, #4]
 800baf4:	3303      	adds	r3, #3
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d306      	bcc.n	800bb0c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bafe:	88bb      	ldrh	r3, [r7, #4]
 800bb00:	3303      	adds	r3, #3
 800bb02:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d201      	bcs.n	800bb10 <pbuf_alloc+0x160>
        return NULL;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e034      	b.n	800bb7a <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bb10:	6978      	ldr	r0, [r7, #20]
 800bb12:	f7ff f89f 	bl	800ac54 <mem_malloc>
 800bb16:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <pbuf_alloc+0x172>
        return NULL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e02b      	b.n	800bb7a <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bb22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb24:	3310      	adds	r3, #16
 800bb26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb28:	4413      	add	r3, r2
 800bb2a:	3303      	adds	r3, #3
 800bb2c:	f023 0303 	bic.w	r3, r3, #3
 800bb30:	4618      	mov	r0, r3
 800bb32:	88b9      	ldrh	r1, [r7, #4]
 800bb34:	88ba      	ldrh	r2, [r7, #4]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	887b      	ldrh	r3, [r7, #2]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4601      	mov	r1, r0
 800bb42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb44:	f7ff ff0a 	bl	800b95c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	f003 0303 	and.w	r3, r3, #3
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d010      	beq.n	800bb76 <pbuf_alloc+0x1c6>
 800bb54:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <pbuf_alloc+0x1d4>)
 800bb56:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800bb5a:	490e      	ldr	r1, [pc, #56]	@ (800bb94 <pbuf_alloc+0x1e4>)
 800bb5c:	480b      	ldr	r0, [pc, #44]	@ (800bb8c <pbuf_alloc+0x1dc>)
 800bb5e:	f00c f883 	bl	8017c68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bb62:	e008      	b.n	800bb76 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bb64:	4b07      	ldr	r3, [pc, #28]	@ (800bb84 <pbuf_alloc+0x1d4>)
 800bb66:	f240 1227 	movw	r2, #295	@ 0x127
 800bb6a:	490b      	ldr	r1, [pc, #44]	@ (800bb98 <pbuf_alloc+0x1e8>)
 800bb6c:	4807      	ldr	r0, [pc, #28]	@ (800bb8c <pbuf_alloc+0x1dc>)
 800bb6e:	f00c f87b 	bl	8017c68 <iprintf>
      return NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	e001      	b.n	800bb7a <pbuf_alloc+0x1ca>
      break;
 800bb76:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3728      	adds	r7, #40	@ 0x28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	080194c8 	.word	0x080194c8
 800bb88:	080194f8 	.word	0x080194f8
 800bb8c:	08019528 	.word	0x08019528
 800bb90:	08019550 	.word	0x08019550
 800bb94:	08019584 	.word	0x08019584
 800bb98:	080195b0 	.word	0x080195b0

0800bb9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af02      	add	r7, sp, #8
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	807b      	strh	r3, [r7, #2]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bbac:	883b      	ldrh	r3, [r7, #0]
 800bbae:	2b41      	cmp	r3, #65	@ 0x41
 800bbb0:	d009      	beq.n	800bbc6 <pbuf_alloc_reference+0x2a>
 800bbb2:	883b      	ldrh	r3, [r7, #0]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d006      	beq.n	800bbc6 <pbuf_alloc_reference+0x2a>
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf8 <pbuf_alloc_reference+0x5c>)
 800bbba:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bbbe:	490f      	ldr	r1, [pc, #60]	@ (800bbfc <pbuf_alloc_reference+0x60>)
 800bbc0:	480f      	ldr	r0, [pc, #60]	@ (800bc00 <pbuf_alloc_reference+0x64>)
 800bbc2:	f00c f851 	bl	8017c68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bbc6:	200b      	movs	r0, #11
 800bbc8:	f7ff f9de 	bl	800af88 <memp_malloc>
 800bbcc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	e00b      	b.n	800bbf0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bbd8:	8879      	ldrh	r1, [r7, #2]
 800bbda:	887a      	ldrh	r2, [r7, #2]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	883b      	ldrh	r3, [r7, #0]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7ff feb7 	bl	800b95c <pbuf_init_alloced_pbuf>
  return p;
 800bbee:	68fb      	ldr	r3, [r7, #12]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	080194c8 	.word	0x080194c8
 800bbfc:	080195cc 	.word	0x080195cc
 800bc00:	08019528 	.word	0x08019528

0800bc04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af02      	add	r7, sp, #8
 800bc0a:	607b      	str	r3, [r7, #4]
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
 800bc10:	460b      	mov	r3, r1
 800bc12:	81bb      	strh	r3, [r7, #12]
 800bc14:	4613      	mov	r3, r2
 800bc16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bc1c:	8a7b      	ldrh	r3, [r7, #18]
 800bc1e:	3303      	adds	r3, #3
 800bc20:	f023 0203 	bic.w	r2, r3, #3
 800bc24:	89bb      	ldrh	r3, [r7, #12]
 800bc26:	441a      	add	r2, r3
 800bc28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d901      	bls.n	800bc32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e018      	b.n	800bc64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bc38:	8a7b      	ldrh	r3, [r7, #18]
 800bc3a:	3303      	adds	r3, #3
 800bc3c:	f023 0303 	bic.w	r3, r3, #3
 800bc40:	6a3a      	ldr	r2, [r7, #32]
 800bc42:	4413      	add	r3, r2
 800bc44:	617b      	str	r3, [r7, #20]
 800bc46:	e001      	b.n	800bc4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	89b9      	ldrh	r1, [r7, #12]
 800bc50:	89ba      	ldrh	r2, [r7, #12]
 800bc52:	2302      	movs	r3, #2
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	897b      	ldrh	r3, [r7, #10]
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	6979      	ldr	r1, [r7, #20]
 800bc5e:	f7ff fe7d 	bl	800b95c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bc62:	687b      	ldr	r3, [r7, #4]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <pbuf_realloc+0x20>
 800bc7e:	4b39      	ldr	r3, [pc, #228]	@ (800bd64 <pbuf_realloc+0xf8>)
 800bc80:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800bc84:	4938      	ldr	r1, [pc, #224]	@ (800bd68 <pbuf_realloc+0xfc>)
 800bc86:	4839      	ldr	r0, [pc, #228]	@ (800bd6c <pbuf_realloc+0x100>)
 800bc88:	f00b ffee 	bl	8017c68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	891b      	ldrh	r3, [r3, #8]
 800bc90:	887a      	ldrh	r2, [r7, #2]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d261      	bcs.n	800bd5a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	891a      	ldrh	r2, [r3, #8]
 800bc9a:	887b      	ldrh	r3, [r7, #2]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bca0:	887b      	ldrh	r3, [r7, #2]
 800bca2:	817b      	strh	r3, [r7, #10]
  q = p;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bca8:	e018      	b.n	800bcdc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	895b      	ldrh	r3, [r3, #10]
 800bcae:	897a      	ldrh	r2, [r7, #10]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	891a      	ldrh	r2, [r3, #8]
 800bcb8:	893b      	ldrh	r3, [r7, #8]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d106      	bne.n	800bcdc <pbuf_realloc+0x70>
 800bcce:	4b25      	ldr	r3, [pc, #148]	@ (800bd64 <pbuf_realloc+0xf8>)
 800bcd0:	f240 12af 	movw	r2, #431	@ 0x1af
 800bcd4:	4926      	ldr	r1, [pc, #152]	@ (800bd70 <pbuf_realloc+0x104>)
 800bcd6:	4825      	ldr	r0, [pc, #148]	@ (800bd6c <pbuf_realloc+0x100>)
 800bcd8:	f00b ffc6 	bl	8017c68 <iprintf>
  while (rem_len > q->len) {
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	895b      	ldrh	r3, [r3, #10]
 800bce0:	897a      	ldrh	r2, [r7, #10]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d8e1      	bhi.n	800bcaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	7b1b      	ldrb	r3, [r3, #12]
 800bcea:	f003 030f 	and.w	r3, r3, #15
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d11f      	bne.n	800bd32 <pbuf_realloc+0xc6>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	895b      	ldrh	r3, [r3, #10]
 800bcf6:	897a      	ldrh	r2, [r7, #10]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d01a      	beq.n	800bd32 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	7b5b      	ldrb	r3, [r3, #13]
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d114      	bne.n	800bd32 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	897b      	ldrh	r3, [r7, #10]
 800bd12:	4413      	add	r3, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7fe fe9c 	bl	800aa54 <mem_trim>
 800bd1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d106      	bne.n	800bd32 <pbuf_realloc+0xc6>
 800bd24:	4b0f      	ldr	r3, [pc, #60]	@ (800bd64 <pbuf_realloc+0xf8>)
 800bd26:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800bd2a:	4912      	ldr	r1, [pc, #72]	@ (800bd74 <pbuf_realloc+0x108>)
 800bd2c:	480f      	ldr	r0, [pc, #60]	@ (800bd6c <pbuf_realloc+0x100>)
 800bd2e:	f00b ff9b 	bl	8017c68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	897a      	ldrh	r2, [r7, #10]
 800bd36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	895a      	ldrh	r2, [r3, #10]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d004      	beq.n	800bd52 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 f911 	bl	800bf74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	e000      	b.n	800bd5c <pbuf_realloc+0xf0>
    return;
 800bd5a:	bf00      	nop

}
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	080194c8 	.word	0x080194c8
 800bd68:	080195e0 	.word	0x080195e0
 800bd6c:	08019528 	.word	0x08019528
 800bd70:	080195f8 	.word	0x080195f8
 800bd74:	08019610 	.word	0x08019610

0800bd78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <pbuf_add_header_impl+0x22>
 800bd8c:	4b2b      	ldr	r3, [pc, #172]	@ (800be3c <pbuf_add_header_impl+0xc4>)
 800bd8e:	f240 12df 	movw	r2, #479	@ 0x1df
 800bd92:	492b      	ldr	r1, [pc, #172]	@ (800be40 <pbuf_add_header_impl+0xc8>)
 800bd94:	482b      	ldr	r0, [pc, #172]	@ (800be44 <pbuf_add_header_impl+0xcc>)
 800bd96:	f00b ff67 	bl	8017c68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <pbuf_add_header_impl+0x30>
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bda6:	d301      	bcc.n	800bdac <pbuf_add_header_impl+0x34>
    return 1;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e043      	b.n	800be34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <pbuf_add_header_impl+0x3e>
    return 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e03e      	b.n	800be34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	891a      	ldrh	r2, [r3, #8]
 800bdbe:	8a7b      	ldrh	r3, [r7, #18]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	8a7a      	ldrh	r2, [r7, #18]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d901      	bls.n	800bdce <pbuf_add_header_impl+0x56>
    return 1;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e032      	b.n	800be34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	7b1b      	ldrb	r3, [r3, #12]
 800bdd2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bdd4:	8a3b      	ldrh	r3, [r7, #16]
 800bdd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00c      	beq.n	800bdf8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	425b      	negs	r3, r3
 800bde6:	4413      	add	r3, r2
 800bde8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3310      	adds	r3, #16
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d20d      	bcs.n	800be10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e01d      	b.n	800be34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	425b      	negs	r3, r3
 800be06:	4413      	add	r3, r2
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	e001      	b.n	800be10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e011      	b.n	800be34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	895a      	ldrh	r2, [r3, #10]
 800be1a:	8a7b      	ldrh	r3, [r7, #18]
 800be1c:	4413      	add	r3, r2
 800be1e:	b29a      	uxth	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	891a      	ldrh	r2, [r3, #8]
 800be28:	8a7b      	ldrh	r3, [r7, #18]
 800be2a:	4413      	add	r3, r2
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	811a      	strh	r2, [r3, #8]


  return 0;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	080194c8 	.word	0x080194c8
 800be40:	0801962c 	.word	0x0801962c
 800be44:	08019528 	.word	0x08019528

0800be48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800be52:	2200      	movs	r2, #0
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff ff8e 	bl	800bd78 <pbuf_add_header_impl>
 800be5c:	4603      	mov	r3, r0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <pbuf_remove_header+0x1e>
 800be78:	4b20      	ldr	r3, [pc, #128]	@ (800befc <pbuf_remove_header+0x94>)
 800be7a:	f240 224b 	movw	r2, #587	@ 0x24b
 800be7e:	4920      	ldr	r1, [pc, #128]	@ (800bf00 <pbuf_remove_header+0x98>)
 800be80:	4820      	ldr	r0, [pc, #128]	@ (800bf04 <pbuf_remove_header+0x9c>)
 800be82:	f00b fef1 	bl	8017c68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <pbuf_remove_header+0x2c>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be92:	d301      	bcc.n	800be98 <pbuf_remove_header+0x30>
    return 1;
 800be94:	2301      	movs	r3, #1
 800be96:	e02c      	b.n	800bef2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <pbuf_remove_header+0x3a>
    return 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	e027      	b.n	800bef2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	895b      	ldrh	r3, [r3, #10]
 800beaa:	89fa      	ldrh	r2, [r7, #14]
 800beac:	429a      	cmp	r2, r3
 800beae:	d908      	bls.n	800bec2 <pbuf_remove_header+0x5a>
 800beb0:	4b12      	ldr	r3, [pc, #72]	@ (800befc <pbuf_remove_header+0x94>)
 800beb2:	f240 2255 	movw	r2, #597	@ 0x255
 800beb6:	4914      	ldr	r1, [pc, #80]	@ (800bf08 <pbuf_remove_header+0xa0>)
 800beb8:	4812      	ldr	r0, [pc, #72]	@ (800bf04 <pbuf_remove_header+0x9c>)
 800beba:	f00b fed5 	bl	8017c68 <iprintf>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e017      	b.n	800bef2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	441a      	add	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	895a      	ldrh	r2, [r3, #10]
 800bed8:	89fb      	ldrh	r3, [r7, #14]
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	891a      	ldrh	r2, [r3, #8]
 800bee6:	89fb      	ldrh	r3, [r7, #14]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	b29a      	uxth	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	080194c8 	.word	0x080194c8
 800bf00:	0801962c 	.word	0x0801962c
 800bf04:	08019528 	.word	0x08019528
 800bf08:	08019638 	.word	0x08019638

0800bf0c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	807b      	strh	r3, [r7, #2]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bf1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	da08      	bge.n	800bf36 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bf24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf28:	425b      	negs	r3, r3
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff ff9b 	bl	800be68 <pbuf_remove_header>
 800bf32:	4603      	mov	r3, r0
 800bf34:	e007      	b.n	800bf46 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bf36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf3a:	787a      	ldrb	r2, [r7, #1]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff ff1a 	bl	800bd78 <pbuf_add_header_impl>
 800bf44:	4603      	mov	r3, r0
  }
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bf5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff ffd2 	bl	800bf0c <pbuf_header_impl>
 800bf68:	4603      	mov	r3, r0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
	...

0800bf74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10b      	bne.n	800bf9a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <pbuf_free+0x22>
 800bf88:	4b3b      	ldr	r3, [pc, #236]	@ (800c078 <pbuf_free+0x104>)
 800bf8a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bf8e:	493b      	ldr	r1, [pc, #236]	@ (800c07c <pbuf_free+0x108>)
 800bf90:	483b      	ldr	r0, [pc, #236]	@ (800c080 <pbuf_free+0x10c>)
 800bf92:	f00b fe69 	bl	8017c68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	e069      	b.n	800c06e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bf9e:	e062      	b.n	800c066 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bfa0:	f00b fd44 	bl	8017a2c <sys_arch_protect>
 800bfa4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	7b9b      	ldrb	r3, [r3, #14]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <pbuf_free+0x48>
 800bfae:	4b32      	ldr	r3, [pc, #200]	@ (800c078 <pbuf_free+0x104>)
 800bfb0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bfb4:	4933      	ldr	r1, [pc, #204]	@ (800c084 <pbuf_free+0x110>)
 800bfb6:	4832      	ldr	r0, [pc, #200]	@ (800c080 <pbuf_free+0x10c>)
 800bfb8:	f00b fe56 	bl	8017c68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	7b9b      	ldrb	r3, [r3, #14]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	739a      	strb	r2, [r3, #14]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7b9b      	ldrb	r3, [r3, #14]
 800bfcc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bfce:	69b8      	ldr	r0, [r7, #24]
 800bfd0:	f00b fd3a 	bl	8017a48 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d143      	bne.n	800c062 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7b1b      	ldrb	r3, [r3, #12]
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7b5b      	ldrb	r3, [r3, #13]
 800bfee:	f003 0302 	and.w	r3, r3, #2
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d011      	beq.n	800c01a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <pbuf_free+0x9c>
 800c002:	4b1d      	ldr	r3, [pc, #116]	@ (800c078 <pbuf_free+0x104>)
 800c004:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c008:	491f      	ldr	r1, [pc, #124]	@ (800c088 <pbuf_free+0x114>)
 800c00a:	481d      	ldr	r0, [pc, #116]	@ (800c080 <pbuf_free+0x10c>)
 800c00c:	f00b fe2c 	bl	8017c68 <iprintf>
        pc->custom_free_function(p);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
 800c018:	e01d      	b.n	800c056 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c01a:	7bfb      	ldrb	r3, [r7, #15]
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d104      	bne.n	800c02a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	200c      	movs	r0, #12
 800c024:	f7ff f826 	bl	800b074 <memp_free>
 800c028:	e015      	b.n	800c056 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d104      	bne.n	800c03a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c030:	6879      	ldr	r1, [r7, #4]
 800c032:	200b      	movs	r0, #11
 800c034:	f7ff f81e 	bl	800b074 <memp_free>
 800c038:	e00d      	b.n	800c056 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d103      	bne.n	800c048 <pbuf_free+0xd4>
          mem_free(p);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7fe fc77 	bl	800a934 <mem_free>
 800c046:	e006      	b.n	800c056 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c048:	4b0b      	ldr	r3, [pc, #44]	@ (800c078 <pbuf_free+0x104>)
 800c04a:	f240 320f 	movw	r2, #783	@ 0x30f
 800c04e:	490f      	ldr	r1, [pc, #60]	@ (800c08c <pbuf_free+0x118>)
 800c050:	480b      	ldr	r0, [pc, #44]	@ (800c080 <pbuf_free+0x10c>)
 800c052:	f00b fe09 	bl	8017c68 <iprintf>
        }
      }
      count++;
 800c056:	7ffb      	ldrb	r3, [r7, #31]
 800c058:	3301      	adds	r3, #1
 800c05a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	607b      	str	r3, [r7, #4]
 800c060:	e001      	b.n	800c066 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c062:	2300      	movs	r3, #0
 800c064:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d199      	bne.n	800bfa0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c06c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	080194c8 	.word	0x080194c8
 800c07c:	0801962c 	.word	0x0801962c
 800c080:	08019528 	.word	0x08019528
 800c084:	08019658 	.word	0x08019658
 800c088:	08019670 	.word	0x08019670
 800c08c:	08019694 	.word	0x08019694

0800c090 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c09c:	e005      	b.n	800c0aa <pbuf_clen+0x1a>
    ++len;
 800c09e:	89fb      	ldrh	r3, [r7, #14]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f6      	bne.n	800c09e <pbuf_clen+0xe>
  }
  return len;
 800c0b0:	89fb      	ldrh	r3, [r7, #14]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
	...

0800c0c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d016      	beq.n	800c0fc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c0ce:	f00b fcad 	bl	8017a2c <sys_arch_protect>
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7b9b      	ldrb	r3, [r3, #14]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	739a      	strb	r2, [r3, #14]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f00b fcb1 	bl	8017a48 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	7b9b      	ldrb	r3, [r3, #14]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d106      	bne.n	800c0fc <pbuf_ref+0x3c>
 800c0ee:	4b05      	ldr	r3, [pc, #20]	@ (800c104 <pbuf_ref+0x44>)
 800c0f0:	f240 3242 	movw	r2, #834	@ 0x342
 800c0f4:	4904      	ldr	r1, [pc, #16]	@ (800c108 <pbuf_ref+0x48>)
 800c0f6:	4805      	ldr	r0, [pc, #20]	@ (800c10c <pbuf_ref+0x4c>)
 800c0f8:	f00b fdb6 	bl	8017c68 <iprintf>
  }
}
 800c0fc:	bf00      	nop
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	080194c8 	.word	0x080194c8
 800c108:	080196a8 	.word	0x080196a8
 800c10c:	08019528 	.word	0x08019528

0800c110 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <pbuf_cat+0x16>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d107      	bne.n	800c136 <pbuf_cat+0x26>
 800c126:	4b20      	ldr	r3, [pc, #128]	@ (800c1a8 <pbuf_cat+0x98>)
 800c128:	f240 3259 	movw	r2, #857	@ 0x359
 800c12c:	491f      	ldr	r1, [pc, #124]	@ (800c1ac <pbuf_cat+0x9c>)
 800c12e:	4820      	ldr	r0, [pc, #128]	@ (800c1b0 <pbuf_cat+0xa0>)
 800c130:	f00b fd9a 	bl	8017c68 <iprintf>
 800c134:	e034      	b.n	800c1a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	e00a      	b.n	800c152 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	891a      	ldrh	r2, [r3, #8]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	891b      	ldrh	r3, [r3, #8]
 800c144:	4413      	add	r3, r2
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f0      	bne.n	800c13c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	891a      	ldrh	r2, [r3, #8]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	895b      	ldrh	r3, [r3, #10]
 800c162:	429a      	cmp	r2, r3
 800c164:	d006      	beq.n	800c174 <pbuf_cat+0x64>
 800c166:	4b10      	ldr	r3, [pc, #64]	@ (800c1a8 <pbuf_cat+0x98>)
 800c168:	f240 3262 	movw	r2, #866	@ 0x362
 800c16c:	4911      	ldr	r1, [pc, #68]	@ (800c1b4 <pbuf_cat+0xa4>)
 800c16e:	4810      	ldr	r0, [pc, #64]	@ (800c1b0 <pbuf_cat+0xa0>)
 800c170:	f00b fd7a 	bl	8017c68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d006      	beq.n	800c18a <pbuf_cat+0x7a>
 800c17c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a8 <pbuf_cat+0x98>)
 800c17e:	f240 3263 	movw	r2, #867	@ 0x363
 800c182:	490d      	ldr	r1, [pc, #52]	@ (800c1b8 <pbuf_cat+0xa8>)
 800c184:	480a      	ldr	r0, [pc, #40]	@ (800c1b0 <pbuf_cat+0xa0>)
 800c186:	f00b fd6f 	bl	8017c68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	891a      	ldrh	r2, [r3, #8]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	891b      	ldrh	r3, [r3, #8]
 800c192:	4413      	add	r3, r2
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	080194c8 	.word	0x080194c8
 800c1ac:	080196bc 	.word	0x080196bc
 800c1b0:	08019528 	.word	0x08019528
 800c1b4:	080196f4 	.word	0x080196f4
 800c1b8:	08019724 	.word	0x08019724

0800c1bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ffa1 	bl	800c110 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c1ce:	6838      	ldr	r0, [r7, #0]
 800c1d0:	f7ff ff76 	bl	800c0c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c1d4:	bf00      	nop
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d008      	beq.n	800c206 <pbuf_copy+0x2a>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d005      	beq.n	800c206 <pbuf_copy+0x2a>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	891a      	ldrh	r2, [r3, #8]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	891b      	ldrh	r3, [r3, #8]
 800c202:	429a      	cmp	r2, r3
 800c204:	d209      	bcs.n	800c21a <pbuf_copy+0x3e>
 800c206:	4b57      	ldr	r3, [pc, #348]	@ (800c364 <pbuf_copy+0x188>)
 800c208:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c20c:	4956      	ldr	r1, [pc, #344]	@ (800c368 <pbuf_copy+0x18c>)
 800c20e:	4857      	ldr	r0, [pc, #348]	@ (800c36c <pbuf_copy+0x190>)
 800c210:	f00b fd2a 	bl	8017c68 <iprintf>
 800c214:	f06f 030f 	mvn.w	r3, #15
 800c218:	e09f      	b.n	800c35a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	895b      	ldrh	r3, [r3, #10]
 800c21e:	461a      	mov	r2, r3
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	1ad2      	subs	r2, r2, r3
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	895b      	ldrh	r3, [r3, #10]
 800c228:	4619      	mov	r1, r3
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	1acb      	subs	r3, r1, r3
 800c22e:	429a      	cmp	r2, r3
 800c230:	d306      	bcc.n	800c240 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	895b      	ldrh	r3, [r3, #10]
 800c236:	461a      	mov	r2, r3
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	60fb      	str	r3, [r7, #12]
 800c23e:	e005      	b.n	800c24c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	895b      	ldrh	r3, [r3, #10]
 800c244:	461a      	mov	r2, r3
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685a      	ldr	r2, [r3, #4]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	18d0      	adds	r0, r2, r3
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	685a      	ldr	r2, [r3, #4]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	4413      	add	r3, r2
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4619      	mov	r1, r3
 800c260:	f00b fe3b 	bl	8017eda <memcpy>
    offset_to += len;
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	4413      	add	r3, r2
 800c26a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	4413      	add	r3, r2
 800c272:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	895b      	ldrh	r3, [r3, #10]
 800c278:	461a      	mov	r2, r3
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d906      	bls.n	800c28e <pbuf_copy+0xb2>
 800c280:	4b38      	ldr	r3, [pc, #224]	@ (800c364 <pbuf_copy+0x188>)
 800c282:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c286:	493a      	ldr	r1, [pc, #232]	@ (800c370 <pbuf_copy+0x194>)
 800c288:	4838      	ldr	r0, [pc, #224]	@ (800c36c <pbuf_copy+0x190>)
 800c28a:	f00b fced 	bl	8017c68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	895b      	ldrh	r3, [r3, #10]
 800c292:	461a      	mov	r2, r3
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	4293      	cmp	r3, r2
 800c298:	d906      	bls.n	800c2a8 <pbuf_copy+0xcc>
 800c29a:	4b32      	ldr	r3, [pc, #200]	@ (800c364 <pbuf_copy+0x188>)
 800c29c:	f240 32da 	movw	r2, #986	@ 0x3da
 800c2a0:	4934      	ldr	r1, [pc, #208]	@ (800c374 <pbuf_copy+0x198>)
 800c2a2:	4832      	ldr	r0, [pc, #200]	@ (800c36c <pbuf_copy+0x190>)
 800c2a4:	f00b fce0 	bl	8017c68 <iprintf>
    if (offset_from >= p_from->len) {
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	895b      	ldrh	r3, [r3, #10]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d304      	bcc.n	800c2be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	895b      	ldrh	r3, [r3, #10]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d114      	bne.n	800c2f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10c      	bne.n	800c2f4 <pbuf_copy+0x118>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d009      	beq.n	800c2f4 <pbuf_copy+0x118>
 800c2e0:	4b20      	ldr	r3, [pc, #128]	@ (800c364 <pbuf_copy+0x188>)
 800c2e2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c2e6:	4924      	ldr	r1, [pc, #144]	@ (800c378 <pbuf_copy+0x19c>)
 800c2e8:	4820      	ldr	r0, [pc, #128]	@ (800c36c <pbuf_copy+0x190>)
 800c2ea:	f00b fcbd 	bl	8017c68 <iprintf>
 800c2ee:	f06f 030f 	mvn.w	r3, #15
 800c2f2:	e032      	b.n	800c35a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d013      	beq.n	800c322 <pbuf_copy+0x146>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	895a      	ldrh	r2, [r3, #10]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	891b      	ldrh	r3, [r3, #8]
 800c302:	429a      	cmp	r2, r3
 800c304:	d10d      	bne.n	800c322 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d009      	beq.n	800c322 <pbuf_copy+0x146>
 800c30e:	4b15      	ldr	r3, [pc, #84]	@ (800c364 <pbuf_copy+0x188>)
 800c310:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c314:	4919      	ldr	r1, [pc, #100]	@ (800c37c <pbuf_copy+0x1a0>)
 800c316:	4815      	ldr	r0, [pc, #84]	@ (800c36c <pbuf_copy+0x190>)
 800c318:	f00b fca6 	bl	8017c68 <iprintf>
 800c31c:	f06f 0305 	mvn.w	r3, #5
 800c320:	e01b      	b.n	800c35a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d013      	beq.n	800c350 <pbuf_copy+0x174>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	895a      	ldrh	r2, [r3, #10]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	891b      	ldrh	r3, [r3, #8]
 800c330:	429a      	cmp	r2, r3
 800c332:	d10d      	bne.n	800c350 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d009      	beq.n	800c350 <pbuf_copy+0x174>
 800c33c:	4b09      	ldr	r3, [pc, #36]	@ (800c364 <pbuf_copy+0x188>)
 800c33e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c342:	490e      	ldr	r1, [pc, #56]	@ (800c37c <pbuf_copy+0x1a0>)
 800c344:	4809      	ldr	r0, [pc, #36]	@ (800c36c <pbuf_copy+0x190>)
 800c346:	f00b fc8f 	bl	8017c68 <iprintf>
 800c34a:	f06f 0305 	mvn.w	r3, #5
 800c34e:	e004      	b.n	800c35a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f47f af61 	bne.w	800c21a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	080194c8 	.word	0x080194c8
 800c368:	08019770 	.word	0x08019770
 800c36c:	08019528 	.word	0x08019528
 800c370:	080197a0 	.word	0x080197a0
 800c374:	080197b8 	.word	0x080197b8
 800c378:	080197d4 	.word	0x080197d4
 800c37c:	080197e4 	.word	0x080197e4

0800c380 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	4611      	mov	r1, r2
 800c38c:	461a      	mov	r2, r3
 800c38e:	460b      	mov	r3, r1
 800c390:	80fb      	strh	r3, [r7, #6]
 800c392:	4613      	mov	r3, r2
 800c394:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d108      	bne.n	800c3b6 <pbuf_copy_partial+0x36>
 800c3a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c454 <pbuf_copy_partial+0xd4>)
 800c3a6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c3aa:	492b      	ldr	r1, [pc, #172]	@ (800c458 <pbuf_copy_partial+0xd8>)
 800c3ac:	482b      	ldr	r0, [pc, #172]	@ (800c45c <pbuf_copy_partial+0xdc>)
 800c3ae:	f00b fc5b 	bl	8017c68 <iprintf>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e04a      	b.n	800c44c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d108      	bne.n	800c3ce <pbuf_copy_partial+0x4e>
 800c3bc:	4b25      	ldr	r3, [pc, #148]	@ (800c454 <pbuf_copy_partial+0xd4>)
 800c3be:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c3c2:	4927      	ldr	r1, [pc, #156]	@ (800c460 <pbuf_copy_partial+0xe0>)
 800c3c4:	4825      	ldr	r0, [pc, #148]	@ (800c45c <pbuf_copy_partial+0xdc>)
 800c3c6:	f00b fc4f 	bl	8017c68 <iprintf>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e03e      	b.n	800c44c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	61fb      	str	r3, [r7, #28]
 800c3d2:	e034      	b.n	800c43e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c3d4:	88bb      	ldrh	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <pbuf_copy_partial+0x70>
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	895b      	ldrh	r3, [r3, #10]
 800c3de:	88ba      	ldrh	r2, [r7, #4]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d305      	bcc.n	800c3f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	895b      	ldrh	r3, [r3, #10]
 800c3e8:	88ba      	ldrh	r2, [r7, #4]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	80bb      	strh	r3, [r7, #4]
 800c3ee:	e023      	b.n	800c438 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	895a      	ldrh	r2, [r3, #10]
 800c3f4:	88bb      	ldrh	r3, [r7, #4]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c3fa:	8b3a      	ldrh	r2, [r7, #24]
 800c3fc:	88fb      	ldrh	r3, [r7, #6]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d901      	bls.n	800c406 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c402:	88fb      	ldrh	r3, [r7, #6]
 800c404:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c406:	8b7b      	ldrh	r3, [r7, #26]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	18d0      	adds	r0, r2, r3
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	88bb      	ldrh	r3, [r7, #4]
 800c412:	4413      	add	r3, r2
 800c414:	8b3a      	ldrh	r2, [r7, #24]
 800c416:	4619      	mov	r1, r3
 800c418:	f00b fd5f 	bl	8017eda <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c41c:	8afa      	ldrh	r2, [r7, #22]
 800c41e:	8b3b      	ldrh	r3, [r7, #24]
 800c420:	4413      	add	r3, r2
 800c422:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c424:	8b7a      	ldrh	r2, [r7, #26]
 800c426:	8b3b      	ldrh	r3, [r7, #24]
 800c428:	4413      	add	r3, r2
 800c42a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c42c:	88fa      	ldrh	r2, [r7, #6]
 800c42e:	8b3b      	ldrh	r3, [r7, #24]
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	61fb      	str	r3, [r7, #28]
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <pbuf_copy_partial+0xca>
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1c4      	bne.n	800c3d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c44a:	8afb      	ldrh	r3, [r7, #22]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	080194c8 	.word	0x080194c8
 800c458:	08019810 	.word	0x08019810
 800c45c:	08019528 	.word	0x08019528
 800c460:	08019830 	.word	0x08019830

0800c464 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c464:	b480      	push	{r7}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	460b      	mov	r3, r1
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800c472:	897b      	ldrh	r3, [r7, #10]
 800c474:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c47a:	e007      	b.n	800c48c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	895b      	ldrh	r3, [r3, #10]
 800c480:	8afa      	ldrh	r2, [r7, #22]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d004      	beq.n	800c49c <pbuf_skip_const+0x38>
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	895b      	ldrh	r3, [r3, #10]
 800c496:	8afa      	ldrh	r2, [r7, #22]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d2ef      	bcs.n	800c47c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	8afa      	ldrh	r2, [r7, #22]
 800c4a6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800c4a8:	693b      	ldr	r3, [r7, #16]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	371c      	adds	r7, #28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
	...

0800c4b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	603a      	str	r2, [r7, #0]
 800c4c2:	71fb      	strb	r3, [r7, #7]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	8919      	ldrh	r1, [r3, #8]
 800c4cc:	88ba      	ldrh	r2, [r7, #4]
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff fa6d 	bl	800b9b0 <pbuf_alloc>
 800c4d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <pbuf_clone+0x2a>
    return NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	e011      	b.n	800c506 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7ff fe79 	bl	800c1dc <pbuf_copy>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c4ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d006      	beq.n	800c504 <pbuf_clone+0x4c>
 800c4f6:	4b06      	ldr	r3, [pc, #24]	@ (800c510 <pbuf_clone+0x58>)
 800c4f8:	f240 5224 	movw	r2, #1316	@ 0x524
 800c4fc:	4905      	ldr	r1, [pc, #20]	@ (800c514 <pbuf_clone+0x5c>)
 800c4fe:	4806      	ldr	r0, [pc, #24]	@ (800c518 <pbuf_clone+0x60>)
 800c500:	f00b fbb2 	bl	8017c68 <iprintf>
  return q;
 800c504:	68fb      	ldr	r3, [r7, #12]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	080194c8 	.word	0x080194c8
 800c514:	0801993c 	.word	0x0801993c
 800c518:	08019528 	.word	0x08019528

0800c51c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800c528:	887b      	ldrh	r3, [r7, #2]
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f80c 	bl	800c54a <pbuf_try_get_at>
 800c532:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	db02      	blt.n	800c540 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	e000      	b.n	800c542 <pbuf_get_at+0x26>
  }
  return 0;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	460b      	mov	r3, r1
 800c554:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800c556:	f107 020a 	add.w	r2, r7, #10
 800c55a:	887b      	ldrh	r3, [r7, #2]
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff ff80 	bl	800c464 <pbuf_skip_const>
 800c564:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <pbuf_try_get_at+0x38>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	895a      	ldrh	r2, [r3, #10]
 800c570:	897b      	ldrh	r3, [r7, #10]
 800c572:	429a      	cmp	r2, r3
 800c574:	d905      	bls.n	800c582 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	897a      	ldrh	r2, [r7, #10]
 800c57c:	4413      	add	r3, r2
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	e001      	b.n	800c586 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800c582:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b088      	sub	sp, #32
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	461a      	mov	r2, r3
 800c59a:	460b      	mov	r3, r1
 800c59c:	817b      	strh	r3, [r7, #10]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800c5a2:	897b      	ldrh	r3, [r7, #10]
 800c5a4:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	891b      	ldrh	r3, [r3, #8]
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	897a      	ldrh	r2, [r7, #10]
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	4299      	cmp	r1, r3
 800c5b8:	da0a      	bge.n	800c5d0 <pbuf_memcmp+0x42>
    return 0xffff;
 800c5ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c5be:	e037      	b.n	800c630 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	895b      	ldrh	r3, [r3, #10]
 800c5c4:	8bfa      	ldrh	r2, [r7, #30]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <pbuf_memcmp+0x52>
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	895b      	ldrh	r3, [r3, #10]
 800c5da:	8bfa      	ldrh	r2, [r7, #30]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d2ef      	bcs.n	800c5c0 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	82fb      	strh	r3, [r7, #22]
 800c5e4:	e01f      	b.n	800c626 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800c5e6:	8bfa      	ldrh	r2, [r7, #30]
 800c5e8:	8afb      	ldrh	r3, [r7, #22]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	69b8      	ldr	r0, [r7, #24]
 800c5f2:	f7ff ff93 	bl	800c51c <pbuf_get_at>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800c5fa:	8afb      	ldrh	r3, [r7, #22]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	4413      	add	r3, r2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800c604:	7d7a      	ldrb	r2, [r7, #21]
 800c606:	7d3b      	ldrb	r3, [r7, #20]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d009      	beq.n	800c620 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800c60c:	8afb      	ldrh	r3, [r7, #22]
 800c60e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c612:	4293      	cmp	r3, r2
 800c614:	bf28      	it	cs
 800c616:	4613      	movcs	r3, r2
 800c618:	b29b      	uxth	r3, r3
 800c61a:	3301      	adds	r3, #1
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	e007      	b.n	800c630 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800c620:	8afb      	ldrh	r3, [r7, #22]
 800c622:	3301      	adds	r3, #1
 800c624:	82fb      	strh	r3, [r7, #22]
 800c626:	8afa      	ldrh	r2, [r7, #22]
 800c628:	893b      	ldrh	r3, [r7, #8]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d3db      	bcc.n	800c5e6 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c63c:	f00b fa14 	bl	8017a68 <rand>
 800c640:	4603      	mov	r3, r0
 800c642:	b29b      	uxth	r3, r3
 800c644:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c64e:	b29a      	uxth	r2, r3
 800c650:	4b01      	ldr	r3, [pc, #4]	@ (800c658 <tcp_init+0x20>)
 800c652:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c654:	bf00      	nop
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20000024 	.word	0x20000024

0800c65c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7d1b      	ldrb	r3, [r3, #20]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d105      	bne.n	800c678 <tcp_free+0x1c>
 800c66c:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <tcp_free+0x2c>)
 800c66e:	22d4      	movs	r2, #212	@ 0xd4
 800c670:	4906      	ldr	r1, [pc, #24]	@ (800c68c <tcp_free+0x30>)
 800c672:	4807      	ldr	r0, [pc, #28]	@ (800c690 <tcp_free+0x34>)
 800c674:	f00b faf8 	bl	8017c68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c678:	6879      	ldr	r1, [r7, #4]
 800c67a:	2001      	movs	r0, #1
 800c67c:	f7fe fcfa 	bl	800b074 <memp_free>
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	080199c8 	.word	0x080199c8
 800c68c:	080199f8 	.word	0x080199f8
 800c690:	08019a0c 	.word	0x08019a0c

0800c694 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7d1b      	ldrb	r3, [r3, #20]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d105      	bne.n	800c6b0 <tcp_free_listen+0x1c>
 800c6a4:	4b06      	ldr	r3, [pc, #24]	@ (800c6c0 <tcp_free_listen+0x2c>)
 800c6a6:	22df      	movs	r2, #223	@ 0xdf
 800c6a8:	4906      	ldr	r1, [pc, #24]	@ (800c6c4 <tcp_free_listen+0x30>)
 800c6aa:	4807      	ldr	r0, [pc, #28]	@ (800c6c8 <tcp_free_listen+0x34>)
 800c6ac:	f00b fadc 	bl	8017c68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	2002      	movs	r0, #2
 800c6b4:	f7fe fcde 	bl	800b074 <memp_free>
}
 800c6b8:	bf00      	nop
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	080199c8 	.word	0x080199c8
 800c6c4:	08019a34 	.word	0x08019a34
 800c6c8:	08019a0c 	.word	0x08019a0c

0800c6cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c6d0:	f001 f978 	bl	800d9c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c6d4:	4b07      	ldr	r3, [pc, #28]	@ (800c6f4 <tcp_tmr+0x28>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	4b05      	ldr	r3, [pc, #20]	@ (800c6f4 <tcp_tmr+0x28>)
 800c6de:	701a      	strb	r2, [r3, #0]
 800c6e0:	4b04      	ldr	r3, [pc, #16]	@ (800c6f4 <tcp_tmr+0x28>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c6ec:	f000 fe28 	bl	800d340 <tcp_slowtmr>
  }
}
 800c6f0:	bf00      	nop
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	2001dd09 	.word	0x2001dd09

0800c6f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d105      	bne.n	800c714 <tcp_remove_listener+0x1c>
 800c708:	4b0d      	ldr	r3, [pc, #52]	@ (800c740 <tcp_remove_listener+0x48>)
 800c70a:	22ff      	movs	r2, #255	@ 0xff
 800c70c:	490d      	ldr	r1, [pc, #52]	@ (800c744 <tcp_remove_listener+0x4c>)
 800c70e:	480e      	ldr	r0, [pc, #56]	@ (800c748 <tcp_remove_listener+0x50>)
 800c710:	f00b faaa 	bl	8017c68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	e00a      	b.n	800c730 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d102      	bne.n	800c72a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1f1      	bne.n	800c71a <tcp_remove_listener+0x22>
    }
  }
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	080199c8 	.word	0x080199c8
 800c744:	08019a50 	.word	0x08019a50
 800c748:	08019a0c 	.word	0x08019a0c

0800c74c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <tcp_listen_closed+0x1c>
 800c75a:	4b14      	ldr	r3, [pc, #80]	@ (800c7ac <tcp_listen_closed+0x60>)
 800c75c:	f240 1211 	movw	r2, #273	@ 0x111
 800c760:	4913      	ldr	r1, [pc, #76]	@ (800c7b0 <tcp_listen_closed+0x64>)
 800c762:	4814      	ldr	r0, [pc, #80]	@ (800c7b4 <tcp_listen_closed+0x68>)
 800c764:	f00b fa80 	bl	8017c68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7d1b      	ldrb	r3, [r3, #20]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d006      	beq.n	800c77e <tcp_listen_closed+0x32>
 800c770:	4b0e      	ldr	r3, [pc, #56]	@ (800c7ac <tcp_listen_closed+0x60>)
 800c772:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c776:	4910      	ldr	r1, [pc, #64]	@ (800c7b8 <tcp_listen_closed+0x6c>)
 800c778:	480e      	ldr	r0, [pc, #56]	@ (800c7b4 <tcp_listen_closed+0x68>)
 800c77a:	f00b fa75 	bl	8017c68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c77e:	2301      	movs	r3, #1
 800c780:	60fb      	str	r3, [r7, #12]
 800c782:	e00b      	b.n	800c79c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c784:	4a0d      	ldr	r2, [pc, #52]	@ (800c7bc <tcp_listen_closed+0x70>)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff ffb1 	bl	800c6f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d9f0      	bls.n	800c784 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	080199c8 	.word	0x080199c8
 800c7b0:	08019a78 	.word	0x08019a78
 800c7b4:	08019a0c 	.word	0x08019a0c
 800c7b8:	08019a84 	.word	0x08019a84
 800c7bc:	0801c3c8 	.word	0x0801c3c8

0800c7c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c7c0:	b5b0      	push	{r4, r5, r7, lr}
 800c7c2:	b088      	sub	sp, #32
 800c7c4:	af04      	add	r7, sp, #16
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <tcp_close_shutdown+0x20>
 800c7d2:	4b63      	ldr	r3, [pc, #396]	@ (800c960 <tcp_close_shutdown+0x1a0>)
 800c7d4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c7d8:	4962      	ldr	r1, [pc, #392]	@ (800c964 <tcp_close_shutdown+0x1a4>)
 800c7da:	4863      	ldr	r0, [pc, #396]	@ (800c968 <tcp_close_shutdown+0x1a8>)
 800c7dc:	f00b fa44 	bl	8017c68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c7e0:	78fb      	ldrb	r3, [r7, #3]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d067      	beq.n	800c8b6 <tcp_close_shutdown+0xf6>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d003      	beq.n	800c7f6 <tcp_close_shutdown+0x36>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	7d1b      	ldrb	r3, [r3, #20]
 800c7f2:	2b07      	cmp	r3, #7
 800c7f4:	d15f      	bne.n	800c8b6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d105      	bne.n	800c80a <tcp_close_shutdown+0x4a>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c802:	f244 4270 	movw	r2, #17520	@ 0x4470
 800c806:	4293      	cmp	r3, r2
 800c808:	d055      	beq.n	800c8b6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	8b5b      	ldrh	r3, [r3, #26]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	d106      	bne.n	800c824 <tcp_close_shutdown+0x64>
 800c816:	4b52      	ldr	r3, [pc, #328]	@ (800c960 <tcp_close_shutdown+0x1a0>)
 800c818:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c81c:	4953      	ldr	r1, [pc, #332]	@ (800c96c <tcp_close_shutdown+0x1ac>)
 800c81e:	4852      	ldr	r0, [pc, #328]	@ (800c968 <tcp_close_shutdown+0x1a8>)
 800c820:	f00b fa22 	bl	8017c68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c82c:	687d      	ldr	r5, [r7, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3304      	adds	r3, #4
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	8ad2      	ldrh	r2, [r2, #22]
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	8b09      	ldrh	r1, [r1, #24]
 800c83a:	9102      	str	r1, [sp, #8]
 800c83c:	9201      	str	r2, [sp, #4]
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	462b      	mov	r3, r5
 800c842:	4622      	mov	r2, r4
 800c844:	4601      	mov	r1, r0
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f005 fe8a 	bl	8012560 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f001 fc6b 	bl	800e128 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c852:	4b47      	ldr	r3, [pc, #284]	@ (800c970 <tcp_close_shutdown+0x1b0>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d105      	bne.n	800c868 <tcp_close_shutdown+0xa8>
 800c85c:	4b44      	ldr	r3, [pc, #272]	@ (800c970 <tcp_close_shutdown+0x1b0>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	4a43      	ldr	r2, [pc, #268]	@ (800c970 <tcp_close_shutdown+0x1b0>)
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	e013      	b.n	800c890 <tcp_close_shutdown+0xd0>
 800c868:	4b41      	ldr	r3, [pc, #260]	@ (800c970 <tcp_close_shutdown+0x1b0>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	60fb      	str	r3, [r7, #12]
 800c86e:	e00c      	b.n	800c88a <tcp_close_shutdown+0xca>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	429a      	cmp	r2, r3
 800c878:	d104      	bne.n	800c884 <tcp_close_shutdown+0xc4>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	60da      	str	r2, [r3, #12]
 800c882:	e005      	b.n	800c890 <tcp_close_shutdown+0xd0>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1ef      	bne.n	800c870 <tcp_close_shutdown+0xb0>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	60da      	str	r2, [r3, #12]
 800c896:	4b37      	ldr	r3, [pc, #220]	@ (800c974 <tcp_close_shutdown+0x1b4>)
 800c898:	2201      	movs	r2, #1
 800c89a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c89c:	4b36      	ldr	r3, [pc, #216]	@ (800c978 <tcp_close_shutdown+0x1b8>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d102      	bne.n	800c8ac <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c8a6:	f004 f901 	bl	8010aac <tcp_trigger_input_pcb_close>
 800c8aa:	e002      	b.n	800c8b2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff fed5 	bl	800c65c <tcp_free>
      }
      return ERR_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e050      	b.n	800c958 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	7d1b      	ldrb	r3, [r3, #20]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d03b      	beq.n	800c936 <tcp_close_shutdown+0x176>
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	dc44      	bgt.n	800c94c <tcp_close_shutdown+0x18c>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <tcp_close_shutdown+0x10c>
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d02a      	beq.n	800c920 <tcp_close_shutdown+0x160>
 800c8ca:	e03f      	b.n	800c94c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	8adb      	ldrh	r3, [r3, #22]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d021      	beq.n	800c918 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8d4:	4b29      	ldr	r3, [pc, #164]	@ (800c97c <tcp_close_shutdown+0x1bc>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d105      	bne.n	800c8ea <tcp_close_shutdown+0x12a>
 800c8de:	4b27      	ldr	r3, [pc, #156]	@ (800c97c <tcp_close_shutdown+0x1bc>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	4a25      	ldr	r2, [pc, #148]	@ (800c97c <tcp_close_shutdown+0x1bc>)
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	e013      	b.n	800c912 <tcp_close_shutdown+0x152>
 800c8ea:	4b24      	ldr	r3, [pc, #144]	@ (800c97c <tcp_close_shutdown+0x1bc>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60bb      	str	r3, [r7, #8]
 800c8f0:	e00c      	b.n	800c90c <tcp_close_shutdown+0x14c>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d104      	bne.n	800c906 <tcp_close_shutdown+0x146>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	60da      	str	r2, [r3, #12]
 800c904:	e005      	b.n	800c912 <tcp_close_shutdown+0x152>
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	60bb      	str	r3, [r7, #8]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1ef      	bne.n	800c8f2 <tcp_close_shutdown+0x132>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff fe9f 	bl	800c65c <tcp_free>
      break;
 800c91e:	e01a      	b.n	800c956 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff ff13 	bl	800c74c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	4815      	ldr	r0, [pc, #84]	@ (800c980 <tcp_close_shutdown+0x1c0>)
 800c92a:	f001 fc4d 	bl	800e1c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f7ff feb0 	bl	800c694 <tcp_free_listen>
      break;
 800c934:	e00f      	b.n	800c956 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	480d      	ldr	r0, [pc, #52]	@ (800c970 <tcp_close_shutdown+0x1b0>)
 800c93a:	f001 fc45 	bl	800e1c8 <tcp_pcb_remove>
 800c93e:	4b0d      	ldr	r3, [pc, #52]	@ (800c974 <tcp_close_shutdown+0x1b4>)
 800c940:	2201      	movs	r2, #1
 800c942:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff fe89 	bl	800c65c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c94a:	e004      	b.n	800c956 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f819 	bl	800c984 <tcp_close_shutdown_fin>
 800c952:	4603      	mov	r3, r0
 800c954:	e000      	b.n	800c958 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bdb0      	pop	{r4, r5, r7, pc}
 800c960:	080199c8 	.word	0x080199c8
 800c964:	08019a9c 	.word	0x08019a9c
 800c968:	08019a0c 	.word	0x08019a0c
 800c96c:	08019abc 	.word	0x08019abc
 800c970:	2001dd00 	.word	0x2001dd00
 800c974:	2001dd08 	.word	0x2001dd08
 800c978:	2001dd40 	.word	0x2001dd40
 800c97c:	2001dcf8 	.word	0x2001dcf8
 800c980:	2001dcfc 	.word	0x2001dcfc

0800c984 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <tcp_close_shutdown_fin+0x1c>
 800c992:	4b2e      	ldr	r3, [pc, #184]	@ (800ca4c <tcp_close_shutdown_fin+0xc8>)
 800c994:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c998:	492d      	ldr	r1, [pc, #180]	@ (800ca50 <tcp_close_shutdown_fin+0xcc>)
 800c99a:	482e      	ldr	r0, [pc, #184]	@ (800ca54 <tcp_close_shutdown_fin+0xd0>)
 800c99c:	f00b f964 	bl	8017c68 <iprintf>

  switch (pcb->state) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	7d1b      	ldrb	r3, [r3, #20]
 800c9a4:	2b07      	cmp	r3, #7
 800c9a6:	d020      	beq.n	800c9ea <tcp_close_shutdown_fin+0x66>
 800c9a8:	2b07      	cmp	r3, #7
 800c9aa:	dc2b      	bgt.n	800ca04 <tcp_close_shutdown_fin+0x80>
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d002      	beq.n	800c9b6 <tcp_close_shutdown_fin+0x32>
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	d00d      	beq.n	800c9d0 <tcp_close_shutdown_fin+0x4c>
 800c9b4:	e026      	b.n	800ca04 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f004 fee0 	bl	801177c <tcp_send_fin>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d11f      	bne.n	800ca08 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2205      	movs	r2, #5
 800c9cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9ce:	e01b      	b.n	800ca08 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f004 fed3 	bl	801177c <tcp_send_fin>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d114      	bne.n	800ca0c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2205      	movs	r2, #5
 800c9e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9e8:	e010      	b.n	800ca0c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f004 fec6 	bl	801177c <tcp_send_fin>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d109      	bne.n	800ca10 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2209      	movs	r2, #9
 800ca00:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca02:	e005      	b.n	800ca10 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	e01c      	b.n	800ca42 <tcp_close_shutdown_fin+0xbe>
      break;
 800ca08:	bf00      	nop
 800ca0a:	e002      	b.n	800ca12 <tcp_close_shutdown_fin+0x8e>
      break;
 800ca0c:	bf00      	nop
 800ca0e:	e000      	b.n	800ca12 <tcp_close_shutdown_fin+0x8e>
      break;
 800ca10:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ca12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d103      	bne.n	800ca22 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f004 ffec 	bl	80119f8 <tcp_output>
 800ca20:	e00d      	b.n	800ca3e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ca22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d108      	bne.n	800ca3e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	8b5b      	ldrh	r3, [r3, #26]
 800ca30:	f043 0308 	orr.w	r3, r3, #8
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	e001      	b.n	800ca42 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ca3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	080199c8 	.word	0x080199c8
 800ca50:	08019a78 	.word	0x08019a78
 800ca54:	08019a0c 	.word	0x08019a0c

0800ca58 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <tcp_close+0x22>
 800ca66:	4b0f      	ldr	r3, [pc, #60]	@ (800caa4 <tcp_close+0x4c>)
 800ca68:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ca6c:	490e      	ldr	r1, [pc, #56]	@ (800caa8 <tcp_close+0x50>)
 800ca6e:	480f      	ldr	r0, [pc, #60]	@ (800caac <tcp_close+0x54>)
 800ca70:	f00b f8fa 	bl	8017c68 <iprintf>
 800ca74:	f06f 030f 	mvn.w	r3, #15
 800ca78:	e00f      	b.n	800ca9a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	7d1b      	ldrb	r3, [r3, #20]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d006      	beq.n	800ca90 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8b5b      	ldrh	r3, [r3, #26]
 800ca86:	f043 0310 	orr.w	r3, r3, #16
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ca90:	2101      	movs	r1, #1
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff fe94 	bl	800c7c0 <tcp_close_shutdown>
 800ca98:	4603      	mov	r3, r0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	080199c8 	.word	0x080199c8
 800caa8:	08019ad8 	.word	0x08019ad8
 800caac:	08019a0c 	.word	0x08019a0c

0800cab0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08e      	sub	sp, #56	@ 0x38
 800cab4:	af04      	add	r7, sp, #16
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d107      	bne.n	800cad0 <tcp_abandon+0x20>
 800cac0:	4b52      	ldr	r3, [pc, #328]	@ (800cc0c <tcp_abandon+0x15c>)
 800cac2:	f240 223d 	movw	r2, #573	@ 0x23d
 800cac6:	4952      	ldr	r1, [pc, #328]	@ (800cc10 <tcp_abandon+0x160>)
 800cac8:	4852      	ldr	r0, [pc, #328]	@ (800cc14 <tcp_abandon+0x164>)
 800caca:	f00b f8cd 	bl	8017c68 <iprintf>
 800cace:	e099      	b.n	800cc04 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7d1b      	ldrb	r3, [r3, #20]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d106      	bne.n	800cae6 <tcp_abandon+0x36>
 800cad8:	4b4c      	ldr	r3, [pc, #304]	@ (800cc0c <tcp_abandon+0x15c>)
 800cada:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800cade:	494e      	ldr	r1, [pc, #312]	@ (800cc18 <tcp_abandon+0x168>)
 800cae0:	484c      	ldr	r0, [pc, #304]	@ (800cc14 <tcp_abandon+0x164>)
 800cae2:	f00b f8c1 	bl	8017c68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	7d1b      	ldrb	r3, [r3, #20]
 800caea:	2b0a      	cmp	r3, #10
 800caec:	d107      	bne.n	800cafe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	484a      	ldr	r0, [pc, #296]	@ (800cc1c <tcp_abandon+0x16c>)
 800caf2:	f001 fb69 	bl	800e1c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff fdb0 	bl	800c65c <tcp_free>
 800cafc:	e082      	b.n	800cc04 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cafe:	2300      	movs	r3, #0
 800cb00:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb10:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb18:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7d1b      	ldrb	r3, [r3, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d126      	bne.n	800cb76 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	8adb      	ldrh	r3, [r3, #22]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d02e      	beq.n	800cb8e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb30:	4b3b      	ldr	r3, [pc, #236]	@ (800cc20 <tcp_abandon+0x170>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d105      	bne.n	800cb46 <tcp_abandon+0x96>
 800cb3a:	4b39      	ldr	r3, [pc, #228]	@ (800cc20 <tcp_abandon+0x170>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	4a37      	ldr	r2, [pc, #220]	@ (800cc20 <tcp_abandon+0x170>)
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	e013      	b.n	800cb6e <tcp_abandon+0xbe>
 800cb46:	4b36      	ldr	r3, [pc, #216]	@ (800cc20 <tcp_abandon+0x170>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	e00c      	b.n	800cb68 <tcp_abandon+0xb8>
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d104      	bne.n	800cb62 <tcp_abandon+0xb2>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68da      	ldr	r2, [r3, #12]
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	60da      	str	r2, [r3, #12]
 800cb60:	e005      	b.n	800cb6e <tcp_abandon+0xbe>
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	61fb      	str	r3, [r7, #28]
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1ef      	bne.n	800cb4e <tcp_abandon+0x9e>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	60da      	str	r2, [r3, #12]
 800cb74:	e00b      	b.n	800cb8e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	8adb      	ldrh	r3, [r3, #22]
 800cb7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4828      	ldr	r0, [pc, #160]	@ (800cc24 <tcp_abandon+0x174>)
 800cb84:	f001 fb20 	bl	800e1c8 <tcp_pcb_remove>
 800cb88:	4b27      	ldr	r3, [pc, #156]	@ (800cc28 <tcp_abandon+0x178>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d004      	beq.n	800cba0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 fff4 	bl	800db88 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 ffeb 	bl	800db88 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d004      	beq.n	800cbc4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 ffe2 	bl	800db88 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00e      	beq.n	800cbe8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cbca:	6879      	ldr	r1, [r7, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	8b12      	ldrh	r2, [r2, #24]
 800cbd4:	9202      	str	r2, [sp, #8]
 800cbd6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cbd8:	9201      	str	r2, [sp, #4]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	69b9      	ldr	r1, [r7, #24]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f005 fcbc 	bl	8012560 <tcp_rst>
    }
    last_state = pcb->state;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7d1b      	ldrb	r3, [r3, #20]
 800cbec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fd34 	bl	800c65c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d004      	beq.n	800cc04 <tcp_abandon+0x154>
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	f06f 010c 	mvn.w	r1, #12
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	4798      	blx	r3
  }
}
 800cc04:	3728      	adds	r7, #40	@ 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	080199c8 	.word	0x080199c8
 800cc10:	08019b0c 	.word	0x08019b0c
 800cc14:	08019a0c 	.word	0x08019a0c
 800cc18:	08019b28 	.word	0x08019b28
 800cc1c:	2001dd04 	.word	0x2001dd04
 800cc20:	2001dcf8 	.word	0x2001dcf8
 800cc24:	2001dd00 	.word	0x2001dd00
 800cc28:	2001dd08 	.word	0x2001dd08

0800cc2c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc34:	2101      	movs	r1, #1
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff ff3a 	bl	800cab0 <tcp_abandon>
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cc52:	2304      	movs	r3, #4
 800cc54:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d101      	bne.n	800cc60 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cc5c:	4b3e      	ldr	r3, [pc, #248]	@ (800cd58 <tcp_bind+0x114>)
 800cc5e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d109      	bne.n	800cc7a <tcp_bind+0x36>
 800cc66:	4b3d      	ldr	r3, [pc, #244]	@ (800cd5c <tcp_bind+0x118>)
 800cc68:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800cc6c:	493c      	ldr	r1, [pc, #240]	@ (800cd60 <tcp_bind+0x11c>)
 800cc6e:	483d      	ldr	r0, [pc, #244]	@ (800cd64 <tcp_bind+0x120>)
 800cc70:	f00a fffa 	bl	8017c68 <iprintf>
 800cc74:	f06f 030f 	mvn.w	r3, #15
 800cc78:	e06a      	b.n	800cd50 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	7d1b      	ldrb	r3, [r3, #20]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <tcp_bind+0x52>
 800cc82:	4b36      	ldr	r3, [pc, #216]	@ (800cd5c <tcp_bind+0x118>)
 800cc84:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800cc88:	4937      	ldr	r1, [pc, #220]	@ (800cd68 <tcp_bind+0x124>)
 800cc8a:	4836      	ldr	r0, [pc, #216]	@ (800cd64 <tcp_bind+0x120>)
 800cc8c:	f00a ffec 	bl	8017c68 <iprintf>
 800cc90:	f06f 0305 	mvn.w	r3, #5
 800cc94:	e05c      	b.n	800cd50 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cc96:	88fb      	ldrh	r3, [r7, #6]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d109      	bne.n	800ccb0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cc9c:	f000 f9f2 	bl	800d084 <tcp_new_port>
 800cca0:	4603      	mov	r3, r0
 800cca2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cca4:	88fb      	ldrh	r3, [r7, #6]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d135      	bne.n	800cd16 <tcp_bind+0xd2>
      return ERR_BUF;
 800ccaa:	f06f 0301 	mvn.w	r3, #1
 800ccae:	e04f      	b.n	800cd50 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61fb      	str	r3, [r7, #28]
 800ccb4:	e02b      	b.n	800cd0e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ccb6:	4a2d      	ldr	r2, [pc, #180]	@ (800cd6c <tcp_bind+0x128>)
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	61bb      	str	r3, [r7, #24]
 800ccc2:	e01e      	b.n	800cd02 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	8adb      	ldrh	r3, [r3, #22]
 800ccc8:	88fa      	ldrh	r2, [r7, #6]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d116      	bne.n	800ccfc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ccce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d010      	beq.n	800ccf6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00c      	beq.n	800ccf6 <tcp_bind+0xb2>
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d009      	beq.n	800ccf6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d102      	bne.n	800ccfc <tcp_bind+0xb8>
              return ERR_USE;
 800ccf6:	f06f 0307 	mvn.w	r3, #7
 800ccfa:	e029      	b.n	800cd50 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1dd      	bne.n	800ccc4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	61fb      	str	r3, [r7, #28]
 800cd0e:	69fa      	ldr	r2, [r7, #28]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	dbcf      	blt.n	800ccb6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00c      	beq.n	800cd36 <tcp_bind+0xf2>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d008      	beq.n	800cd36 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <tcp_bind+0xec>
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	e000      	b.n	800cd32 <tcp_bind+0xee>
 800cd30:	2300      	movs	r3, #0
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	88fa      	ldrh	r2, [r7, #6]
 800cd3a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cd3c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd70 <tcp_bind+0x12c>)
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	60da      	str	r2, [r3, #12]
 800cd44:	4a0a      	ldr	r2, [pc, #40]	@ (800cd70 <tcp_bind+0x12c>)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	f005 fdcb 	bl	80128e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3720      	adds	r7, #32
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	0801c400 	.word	0x0801c400
 800cd5c:	080199c8 	.word	0x080199c8
 800cd60:	08019b5c 	.word	0x08019b5c
 800cd64:	08019a0c 	.word	0x08019a0c
 800cd68:	08019b74 	.word	0x08019b74
 800cd6c:	0801c3c8 	.word	0x0801c3c8
 800cd70:	2001dcf8 	.word	0x2001dcf8

0800cd74 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d106      	bne.n	800cd96 <tcp_accept_null+0x22>
 800cd88:	4b07      	ldr	r3, [pc, #28]	@ (800cda8 <tcp_accept_null+0x34>)
 800cd8a:	f240 320f 	movw	r2, #783	@ 0x30f
 800cd8e:	4907      	ldr	r1, [pc, #28]	@ (800cdac <tcp_accept_null+0x38>)
 800cd90:	4807      	ldr	r0, [pc, #28]	@ (800cdb0 <tcp_accept_null+0x3c>)
 800cd92:	f00a ff69 	bl	8017c68 <iprintf>

  tcp_abort(pcb);
 800cd96:	68b8      	ldr	r0, [r7, #8]
 800cd98:	f7ff ff48 	bl	800cc2c <tcp_abort>

  return ERR_ABRT;
 800cd9c:	f06f 030c 	mvn.w	r3, #12
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	080199c8 	.word	0x080199c8
 800cdac:	08019b9c 	.word	0x08019b9c
 800cdb0:	08019a0c 	.word	0x08019a0c

0800cdb4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cdc0:	78fb      	ldrb	r3, [r7, #3]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 f806 	bl	800cdd8 <tcp_listen_with_backlog_and_err>
 800cdcc:	4603      	mov	r3, r0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
	...

0800cdd8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b088      	sub	sp, #32
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	460b      	mov	r3, r1
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d109      	bne.n	800ce04 <tcp_listen_with_backlog_and_err+0x2c>
 800cdf0:	4b47      	ldr	r3, [pc, #284]	@ (800cf10 <tcp_listen_with_backlog_and_err+0x138>)
 800cdf2:	f240 3259 	movw	r2, #857	@ 0x359
 800cdf6:	4947      	ldr	r1, [pc, #284]	@ (800cf14 <tcp_listen_with_backlog_and_err+0x13c>)
 800cdf8:	4847      	ldr	r0, [pc, #284]	@ (800cf18 <tcp_listen_with_backlog_and_err+0x140>)
 800cdfa:	f00a ff35 	bl	8017c68 <iprintf>
 800cdfe:	23f0      	movs	r3, #240	@ 0xf0
 800ce00:	76fb      	strb	r3, [r7, #27]
 800ce02:	e079      	b.n	800cef8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	7d1b      	ldrb	r3, [r3, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <tcp_listen_with_backlog_and_err+0x48>
 800ce0c:	4b40      	ldr	r3, [pc, #256]	@ (800cf10 <tcp_listen_with_backlog_and_err+0x138>)
 800ce0e:	f240 325a 	movw	r2, #858	@ 0x35a
 800ce12:	4942      	ldr	r1, [pc, #264]	@ (800cf1c <tcp_listen_with_backlog_and_err+0x144>)
 800ce14:	4840      	ldr	r0, [pc, #256]	@ (800cf18 <tcp_listen_with_backlog_and_err+0x140>)
 800ce16:	f00a ff27 	bl	8017c68 <iprintf>
 800ce1a:	23f1      	movs	r3, #241	@ 0xf1
 800ce1c:	76fb      	strb	r3, [r7, #27]
 800ce1e:	e06b      	b.n	800cef8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	7d1b      	ldrb	r3, [r3, #20]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d104      	bne.n	800ce32 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ce2c:	23f7      	movs	r3, #247	@ 0xf7
 800ce2e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ce30:	e062      	b.n	800cef8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ce32:	2002      	movs	r0, #2
 800ce34:	f7fe f8a8 	bl	800af88 <memp_malloc>
 800ce38:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d102      	bne.n	800ce46 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ce40:	23ff      	movs	r3, #255	@ 0xff
 800ce42:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ce44:	e058      	b.n	800cef8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	691a      	ldr	r2, [r3, #16]
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	8ada      	ldrh	r2, [r3, #22]
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	7d5a      	ldrb	r2, [r3, #21]
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	7a5a      	ldrb	r2, [r3, #9]
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	7ada      	ldrb	r2, [r3, #11]
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	7a9a      	ldrb	r2, [r3, #10]
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	8adb      	ldrh	r3, [r3, #22]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d021      	beq.n	800ced6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce92:	4b23      	ldr	r3, [pc, #140]	@ (800cf20 <tcp_listen_with_backlog_and_err+0x148>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d105      	bne.n	800cea8 <tcp_listen_with_backlog_and_err+0xd0>
 800ce9c:	4b20      	ldr	r3, [pc, #128]	@ (800cf20 <tcp_listen_with_backlog_and_err+0x148>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	4a1f      	ldr	r2, [pc, #124]	@ (800cf20 <tcp_listen_with_backlog_and_err+0x148>)
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	e013      	b.n	800ced0 <tcp_listen_with_backlog_and_err+0xf8>
 800cea8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf20 <tcp_listen_with_backlog_and_err+0x148>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	e00c      	b.n	800ceca <tcp_listen_with_backlog_and_err+0xf2>
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d104      	bne.n	800cec4 <tcp_listen_with_backlog_and_err+0xec>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	60da      	str	r2, [r3, #12]
 800cec2:	e005      	b.n	800ced0 <tcp_listen_with_backlog_and_err+0xf8>
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1ef      	bne.n	800ceb0 <tcp_listen_with_backlog_and_err+0xd8>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff fbc0 	bl	800c65c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	4a11      	ldr	r2, [pc, #68]	@ (800cf24 <tcp_listen_with_backlog_and_err+0x14c>)
 800cee0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800cee2:	4b11      	ldr	r3, [pc, #68]	@ (800cf28 <tcp_listen_with_backlog_and_err+0x150>)
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	60da      	str	r2, [r3, #12]
 800ceea:	4a0f      	ldr	r2, [pc, #60]	@ (800cf28 <tcp_listen_with_backlog_and_err+0x150>)
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	f005 fcf8 	bl	80128e4 <tcp_timer_needed>
  res = ERR_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	7efa      	ldrb	r2, [r7, #27]
 800cf02:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cf04:	69fb      	ldr	r3, [r7, #28]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3720      	adds	r7, #32
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	080199c8 	.word	0x080199c8
 800cf14:	08019bbc 	.word	0x08019bbc
 800cf18:	08019a0c 	.word	0x08019a0c
 800cf1c:	08019bec 	.word	0x08019bec
 800cf20:	2001dcf8 	.word	0x2001dcf8
 800cf24:	0800cd75 	.word	0x0800cd75
 800cf28:	2001dcfc 	.word	0x2001dcfc

0800cf2c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <tcp_update_rcv_ann_wnd+0x1c>
 800cf3a:	4b25      	ldr	r3, [pc, #148]	@ (800cfd0 <tcp_update_rcv_ann_wnd+0xa4>)
 800cf3c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cf40:	4924      	ldr	r1, [pc, #144]	@ (800cfd4 <tcp_update_rcv_ann_wnd+0xa8>)
 800cf42:	4825      	ldr	r0, [pc, #148]	@ (800cfd8 <tcp_update_rcv_ann_wnd+0xac>)
 800cf44:	f00a fe90 	bl	8017c68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cf50:	4413      	add	r3, r2
 800cf52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cf5c:	f242 2138 	movw	r1, #8760	@ 0x2238
 800cf60:	428a      	cmp	r2, r1
 800cf62:	bf28      	it	cs
 800cf64:	460a      	movcs	r2, r1
 800cf66:	b292      	uxth	r2, r2
 800cf68:	4413      	add	r3, r2
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	db08      	blt.n	800cf84 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	e020      	b.n	800cfc6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	dd03      	ble.n	800cf9a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cf98:	e014      	b.n	800cfc4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfac:	d306      	bcc.n	800cfbc <tcp_update_rcv_ann_wnd+0x90>
 800cfae:	4b08      	ldr	r3, [pc, #32]	@ (800cfd0 <tcp_update_rcv_ann_wnd+0xa4>)
 800cfb0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800cfb4:	4909      	ldr	r1, [pc, #36]	@ (800cfdc <tcp_update_rcv_ann_wnd+0xb0>)
 800cfb6:	4808      	ldr	r0, [pc, #32]	@ (800cfd8 <tcp_update_rcv_ann_wnd+0xac>)
 800cfb8:	f00a fe56 	bl	8017c68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800cfc4:	2300      	movs	r3, #0
  }
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	080199c8 	.word	0x080199c8
 800cfd4:	08019c24 	.word	0x08019c24
 800cfd8:	08019a0c 	.word	0x08019a0c
 800cfdc:	08019c48 	.word	0x08019c48

0800cfe0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d107      	bne.n	800d002 <tcp_recved+0x22>
 800cff2:	4b20      	ldr	r3, [pc, #128]	@ (800d074 <tcp_recved+0x94>)
 800cff4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800cff8:	491f      	ldr	r1, [pc, #124]	@ (800d078 <tcp_recved+0x98>)
 800cffa:	4820      	ldr	r0, [pc, #128]	@ (800d07c <tcp_recved+0x9c>)
 800cffc:	f00a fe34 	bl	8017c68 <iprintf>
 800d000:	e034      	b.n	800d06c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7d1b      	ldrb	r3, [r3, #20]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d106      	bne.n	800d018 <tcp_recved+0x38>
 800d00a:	4b1a      	ldr	r3, [pc, #104]	@ (800d074 <tcp_recved+0x94>)
 800d00c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d010:	491b      	ldr	r1, [pc, #108]	@ (800d080 <tcp_recved+0xa0>)
 800d012:	481a      	ldr	r0, [pc, #104]	@ (800d07c <tcp_recved+0x9c>)
 800d014:	f00a fe28 	bl	8017c68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d01c:	887b      	ldrh	r3, [r7, #2]
 800d01e:	4413      	add	r3, r2
 800d020:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d022:	89fb      	ldrh	r3, [r7, #14]
 800d024:	f244 4270 	movw	r2, #17520	@ 0x4470
 800d028:	4293      	cmp	r3, r2
 800d02a:	d804      	bhi.n	800d036 <tcp_recved+0x56>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d030:	89fa      	ldrh	r2, [r7, #14]
 800d032:	429a      	cmp	r2, r3
 800d034:	d204      	bcs.n	800d040 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f244 4270 	movw	r2, #17520	@ 0x4470
 800d03c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d03e:	e002      	b.n	800d046 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	89fa      	ldrh	r2, [r7, #14]
 800d044:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7ff ff70 	bl	800cf2c <tcp_update_rcv_ann_wnd>
 800d04c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	f241 121b 	movw	r2, #4379	@ 0x111b
 800d054:	4293      	cmp	r3, r2
 800d056:	d909      	bls.n	800d06c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	8b5b      	ldrh	r3, [r3, #26]
 800d05c:	f043 0302 	orr.w	r3, r3, #2
 800d060:	b29a      	uxth	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f004 fcc6 	bl	80119f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	080199c8 	.word	0x080199c8
 800d078:	08019c64 	.word	0x08019c64
 800d07c:	08019a0c 	.word	0x08019a0c
 800d080:	08019c7c 	.word	0x08019c7c

0800d084 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d08e:	4b1e      	ldr	r3, [pc, #120]	@ (800d108 <tcp_new_port+0x84>)
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	3301      	adds	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	4b1c      	ldr	r3, [pc, #112]	@ (800d108 <tcp_new_port+0x84>)
 800d098:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d09a:	4b1b      	ldr	r3, [pc, #108]	@ (800d108 <tcp_new_port+0x84>)
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d103      	bne.n	800d0ae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d0a6:	4b18      	ldr	r3, [pc, #96]	@ (800d108 <tcp_new_port+0x84>)
 800d0a8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d0ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	71fb      	strb	r3, [r7, #7]
 800d0b2:	e01e      	b.n	800d0f2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	4a15      	ldr	r2, [pc, #84]	@ (800d10c <tcp_new_port+0x88>)
 800d0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	e011      	b.n	800d0e6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	8ada      	ldrh	r2, [r3, #22]
 800d0c6:	4b10      	ldr	r3, [pc, #64]	@ (800d108 <tcp_new_port+0x84>)
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d108      	bne.n	800d0e0 <tcp_new_port+0x5c>
        n++;
 800d0ce:	88bb      	ldrh	r3, [r7, #4]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d0d4:	88bb      	ldrh	r3, [r7, #4]
 800d0d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d0da:	d3d8      	bcc.n	800d08e <tcp_new_port+0xa>
          return 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e00d      	b.n	800d0fc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	603b      	str	r3, [r7, #0]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1ea      	bne.n	800d0c2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	71fb      	strb	r3, [r7, #7]
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d9dd      	bls.n	800d0b4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d0f8:	4b03      	ldr	r3, [pc, #12]	@ (800d108 <tcp_new_port+0x84>)
 800d0fa:	881b      	ldrh	r3, [r3, #0]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	20000024 	.word	0x20000024
 800d10c:	0801c3c8 	.word	0x0801c3c8

0800d110 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08a      	sub	sp, #40	@ 0x28
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	4613      	mov	r3, r2
 800d11e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d120:	2300      	movs	r3, #0
 800d122:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d109      	bne.n	800d13e <tcp_connect+0x2e>
 800d12a:	4b7d      	ldr	r3, [pc, #500]	@ (800d320 <tcp_connect+0x210>)
 800d12c:	f240 4235 	movw	r2, #1077	@ 0x435
 800d130:	497c      	ldr	r1, [pc, #496]	@ (800d324 <tcp_connect+0x214>)
 800d132:	487d      	ldr	r0, [pc, #500]	@ (800d328 <tcp_connect+0x218>)
 800d134:	f00a fd98 	bl	8017c68 <iprintf>
 800d138:	f06f 030f 	mvn.w	r3, #15
 800d13c:	e0ec      	b.n	800d318 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d109      	bne.n	800d158 <tcp_connect+0x48>
 800d144:	4b76      	ldr	r3, [pc, #472]	@ (800d320 <tcp_connect+0x210>)
 800d146:	f240 4236 	movw	r2, #1078	@ 0x436
 800d14a:	4978      	ldr	r1, [pc, #480]	@ (800d32c <tcp_connect+0x21c>)
 800d14c:	4876      	ldr	r0, [pc, #472]	@ (800d328 <tcp_connect+0x218>)
 800d14e:	f00a fd8b 	bl	8017c68 <iprintf>
 800d152:	f06f 030f 	mvn.w	r3, #15
 800d156:	e0df      	b.n	800d318 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	7d1b      	ldrb	r3, [r3, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d009      	beq.n	800d174 <tcp_connect+0x64>
 800d160:	4b6f      	ldr	r3, [pc, #444]	@ (800d320 <tcp_connect+0x210>)
 800d162:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800d166:	4972      	ldr	r1, [pc, #456]	@ (800d330 <tcp_connect+0x220>)
 800d168:	486f      	ldr	r0, [pc, #444]	@ (800d328 <tcp_connect+0x218>)
 800d16a:	f00a fd7d 	bl	8017c68 <iprintf>
 800d16e:	f06f 0309 	mvn.w	r3, #9
 800d172:	e0d1      	b.n	800d318 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <tcp_connect+0x70>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	e000      	b.n	800d182 <tcp_connect+0x72>
 800d180:	2300      	movs	r3, #0
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	88fa      	ldrh	r2, [r7, #6]
 800d18a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	7a1b      	ldrb	r3, [r3, #8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d006      	beq.n	800d1a2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	7a1b      	ldrb	r3, [r3, #8]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fb31 	bl	800b800 <netif_get_by_index>
 800d19e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1a0:	e005      	b.n	800d1ae <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f009 f93e 	bl	8016428 <ip4_route>
 800d1ac:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d102      	bne.n	800d1ba <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d1b4:	f06f 0303 	mvn.w	r3, #3
 800d1b8:	e0ae      	b.n	800d318 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <tcp_connect+0xb8>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d111      	bne.n	800d1ec <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d002      	beq.n	800d1d4 <tcp_connect+0xc4>
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	e000      	b.n	800d1d6 <tcp_connect+0xc6>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <tcp_connect+0xd4>
      return ERR_RTE;
 800d1de:	f06f 0303 	mvn.w	r3, #3
 800d1e2:	e099      	b.n	800d318 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	8adb      	ldrh	r3, [r3, #22]
 800d1f0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	8adb      	ldrh	r3, [r3, #22]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10c      	bne.n	800d214 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d1fa:	f7ff ff43 	bl	800d084 <tcp_new_port>
 800d1fe:	4603      	mov	r3, r0
 800d200:	461a      	mov	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8adb      	ldrh	r3, [r3, #22]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <tcp_connect+0x104>
      return ERR_BUF;
 800d20e:	f06f 0301 	mvn.w	r3, #1
 800d212:	e081      	b.n	800d318 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f001 f86b 	bl	800e2f0 <tcp_next_iss>
 800d21a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	1e5a      	subs	r2, r3, #1
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	1e5a      	subs	r2, r3, #1
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	1e5a      	subs	r2, r3, #1
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f244 4270 	movw	r2, #17520	@ 0x4470
 800d246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f244 4270 	movw	r2, #17520	@ 0x4470
 800d25e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d268:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3304      	adds	r3, #4
 800d272:	461a      	mov	r2, r3
 800d274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d276:	f001 f861 	bl	800e33c <tcp_eff_send_mss_netif>
 800d27a:	4603      	mov	r3, r0
 800d27c:	461a      	mov	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d292:	2102      	movs	r1, #2
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f004 fac1 	bl	801181c <tcp_enqueue_flags>
 800d29a:	4603      	mov	r3, r0
 800d29c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d29e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d136      	bne.n	800d314 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d2ac:	8b7b      	ldrh	r3, [r7, #26]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d021      	beq.n	800d2f6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d2b2:	4b20      	ldr	r3, [pc, #128]	@ (800d334 <tcp_connect+0x224>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d105      	bne.n	800d2c8 <tcp_connect+0x1b8>
 800d2bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d334 <tcp_connect+0x224>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d334 <tcp_connect+0x224>)
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	e013      	b.n	800d2f0 <tcp_connect+0x1e0>
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d334 <tcp_connect+0x224>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	623b      	str	r3, [r7, #32]
 800d2ce:	e00c      	b.n	800d2ea <tcp_connect+0x1da>
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d104      	bne.n	800d2e4 <tcp_connect+0x1d4>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68da      	ldr	r2, [r3, #12]
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	60da      	str	r2, [r3, #12]
 800d2e2:	e005      	b.n	800d2f0 <tcp_connect+0x1e0>
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	623b      	str	r3, [r7, #32]
 800d2ea:	6a3b      	ldr	r3, [r7, #32]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1ef      	bne.n	800d2d0 <tcp_connect+0x1c0>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d2f6:	4b10      	ldr	r3, [pc, #64]	@ (800d338 <tcp_connect+0x228>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	60da      	str	r2, [r3, #12]
 800d2fe:	4a0e      	ldr	r2, [pc, #56]	@ (800d338 <tcp_connect+0x228>)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6013      	str	r3, [r2, #0]
 800d304:	f005 faee 	bl	80128e4 <tcp_timer_needed>
 800d308:	4b0c      	ldr	r3, [pc, #48]	@ (800d33c <tcp_connect+0x22c>)
 800d30a:	2201      	movs	r2, #1
 800d30c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f004 fb72 	bl	80119f8 <tcp_output>
  }
  return ret;
 800d314:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3728      	adds	r7, #40	@ 0x28
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	080199c8 	.word	0x080199c8
 800d324:	08019ca4 	.word	0x08019ca4
 800d328:	08019a0c 	.word	0x08019a0c
 800d32c:	08019cc0 	.word	0x08019cc0
 800d330:	08019cdc 	.word	0x08019cdc
 800d334:	2001dcf8 	.word	0x2001dcf8
 800d338:	2001dd00 	.word	0x2001dd00
 800d33c:	2001dd08 	.word	0x2001dd08

0800d340 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d340:	b5b0      	push	{r4, r5, r7, lr}
 800d342:	b090      	sub	sp, #64	@ 0x40
 800d344:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d346:	2300      	movs	r3, #0
 800d348:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d34c:	4b95      	ldr	r3, [pc, #596]	@ (800d5a4 <tcp_slowtmr+0x264>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3301      	adds	r3, #1
 800d352:	4a94      	ldr	r2, [pc, #592]	@ (800d5a4 <tcp_slowtmr+0x264>)
 800d354:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d356:	4b94      	ldr	r3, [pc, #592]	@ (800d5a8 <tcp_slowtmr+0x268>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	4b92      	ldr	r3, [pc, #584]	@ (800d5a8 <tcp_slowtmr+0x268>)
 800d360:	701a      	strb	r2, [r3, #0]
 800d362:	e000      	b.n	800d366 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d364:	bf00      	nop
  prev = NULL;
 800d366:	2300      	movs	r3, #0
 800d368:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d36a:	4b90      	ldr	r3, [pc, #576]	@ (800d5ac <tcp_slowtmr+0x26c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d370:	e29d      	b.n	800d8ae <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d374:	7d1b      	ldrb	r3, [r3, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d106      	bne.n	800d388 <tcp_slowtmr+0x48>
 800d37a:	4b8d      	ldr	r3, [pc, #564]	@ (800d5b0 <tcp_slowtmr+0x270>)
 800d37c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d380:	498c      	ldr	r1, [pc, #560]	@ (800d5b4 <tcp_slowtmr+0x274>)
 800d382:	488d      	ldr	r0, [pc, #564]	@ (800d5b8 <tcp_slowtmr+0x278>)
 800d384:	f00a fc70 	bl	8017c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	7d1b      	ldrb	r3, [r3, #20]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d106      	bne.n	800d39e <tcp_slowtmr+0x5e>
 800d390:	4b87      	ldr	r3, [pc, #540]	@ (800d5b0 <tcp_slowtmr+0x270>)
 800d392:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d396:	4989      	ldr	r1, [pc, #548]	@ (800d5bc <tcp_slowtmr+0x27c>)
 800d398:	4887      	ldr	r0, [pc, #540]	@ (800d5b8 <tcp_slowtmr+0x278>)
 800d39a:	f00a fc65 	bl	8017c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a0:	7d1b      	ldrb	r3, [r3, #20]
 800d3a2:	2b0a      	cmp	r3, #10
 800d3a4:	d106      	bne.n	800d3b4 <tcp_slowtmr+0x74>
 800d3a6:	4b82      	ldr	r3, [pc, #520]	@ (800d5b0 <tcp_slowtmr+0x270>)
 800d3a8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d3ac:	4984      	ldr	r1, [pc, #528]	@ (800d5c0 <tcp_slowtmr+0x280>)
 800d3ae:	4882      	ldr	r0, [pc, #520]	@ (800d5b8 <tcp_slowtmr+0x278>)
 800d3b0:	f00a fc5a 	bl	8017c68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b6:	7f9a      	ldrb	r2, [r3, #30]
 800d3b8:	4b7b      	ldr	r3, [pc, #492]	@ (800d5a8 <tcp_slowtmr+0x268>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d105      	bne.n	800d3cc <tcp_slowtmr+0x8c>
      prev = pcb;
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d3ca:	e270      	b.n	800d8ae <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800d3cc:	4b76      	ldr	r3, [pc, #472]	@ (800d5a8 <tcp_slowtmr+0x268>)
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	7d1b      	ldrb	r3, [r3, #20]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d10a      	bne.n	800d3fe <tcp_slowtmr+0xbe>
 800d3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3ee:	2b05      	cmp	r3, #5
 800d3f0:	d905      	bls.n	800d3fe <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3fc:	e11e      	b.n	800d63c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d400:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d404:	2b0b      	cmp	r3, #11
 800d406:	d905      	bls.n	800d414 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d40c:	3301      	adds	r3, #1
 800d40e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d412:	e113      	b.n	800d63c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d416:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d075      	beq.n	800d50a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d422:	2b00      	cmp	r3, #0
 800d424:	d006      	beq.n	800d434 <tcp_slowtmr+0xf4>
 800d426:	4b62      	ldr	r3, [pc, #392]	@ (800d5b0 <tcp_slowtmr+0x270>)
 800d428:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d42c:	4965      	ldr	r1, [pc, #404]	@ (800d5c4 <tcp_slowtmr+0x284>)
 800d42e:	4862      	ldr	r0, [pc, #392]	@ (800d5b8 <tcp_slowtmr+0x278>)
 800d430:	f00a fc1a 	bl	8017c68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <tcp_slowtmr+0x10a>
 800d43c:	4b5c      	ldr	r3, [pc, #368]	@ (800d5b0 <tcp_slowtmr+0x270>)
 800d43e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d442:	4961      	ldr	r1, [pc, #388]	@ (800d5c8 <tcp_slowtmr+0x288>)
 800d444:	485c      	ldr	r0, [pc, #368]	@ (800d5b8 <tcp_slowtmr+0x278>)
 800d446:	f00a fc0f 	bl	8017c68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d450:	2b0b      	cmp	r3, #11
 800d452:	d905      	bls.n	800d460 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d458:	3301      	adds	r3, #1
 800d45a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d45e:	e0ed      	b.n	800d63c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d462:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d466:	3b01      	subs	r3, #1
 800d468:	4a58      	ldr	r2, [pc, #352]	@ (800d5cc <tcp_slowtmr+0x28c>)
 800d46a:	5cd3      	ldrb	r3, [r2, r3]
 800d46c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d470:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d474:	7c7a      	ldrb	r2, [r7, #17]
 800d476:	429a      	cmp	r2, r3
 800d478:	d907      	bls.n	800d48a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d47c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d480:	3301      	adds	r3, #1
 800d482:	b2da      	uxtb	r2, r3
 800d484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d486:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d490:	7c7a      	ldrb	r2, [r7, #17]
 800d492:	429a      	cmp	r2, r3
 800d494:	f200 80d2 	bhi.w	800d63c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d498:	2301      	movs	r3, #1
 800d49a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d108      	bne.n	800d4b8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d4a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4a8:	f005 f94e 	bl	8012748 <tcp_zero_window_probe>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d014      	beq.n	800d4dc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	623b      	str	r3, [r7, #32]
 800d4b6:	e011      	b.n	800d4dc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4c2:	f004 f813 	bl	80114ec <tcp_split_unsent_seg>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d107      	bne.n	800d4dc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d4cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4ce:	f004 fa93 	bl	80119f8 <tcp_output>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d101      	bne.n	800d4dc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 80ac 	beq.w	800d63c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d4f2:	2b06      	cmp	r3, #6
 800d4f4:	f200 80a2 	bhi.w	800d63c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d4fe:	3301      	adds	r3, #1
 800d500:	b2da      	uxtb	r2, r3
 800d502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d504:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d508:	e098      	b.n	800d63c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d50c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d510:	2b00      	cmp	r3, #0
 800d512:	db0f      	blt.n	800d534 <tcp_slowtmr+0x1f4>
 800d514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d516:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d51a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d51e:	4293      	cmp	r3, r2
 800d520:	d008      	beq.n	800d534 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d528:	b29b      	uxth	r3, r3
 800d52a:	3301      	adds	r3, #1
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	b21a      	sxth	r2, r3
 800d530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d532:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d540:	429a      	cmp	r2, r3
 800d542:	db7b      	blt.n	800d63c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d544:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d546:	f004 fd4b 	bl	8011fe0 <tcp_rexmit_rto_prepare>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d007      	beq.n	800d560 <tcp_slowtmr+0x220>
 800d550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d554:	2b00      	cmp	r3, #0
 800d556:	d171      	bne.n	800d63c <tcp_slowtmr+0x2fc>
 800d558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d06d      	beq.n	800d63c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d562:	7d1b      	ldrb	r3, [r3, #20]
 800d564:	2b02      	cmp	r3, #2
 800d566:	d03a      	beq.n	800d5de <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d56e:	2b0c      	cmp	r3, #12
 800d570:	bf28      	it	cs
 800d572:	230c      	movcs	r3, #12
 800d574:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d578:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d57c:	10db      	asrs	r3, r3, #3
 800d57e:	b21b      	sxth	r3, r3
 800d580:	461a      	mov	r2, r3
 800d582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d584:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d588:	4413      	add	r3, r2
 800d58a:	7efa      	ldrb	r2, [r7, #27]
 800d58c:	4910      	ldr	r1, [pc, #64]	@ (800d5d0 <tcp_slowtmr+0x290>)
 800d58e:	5c8a      	ldrb	r2, [r1, r2]
 800d590:	4093      	lsls	r3, r2
 800d592:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d59a:	4293      	cmp	r3, r2
 800d59c:	dc1a      	bgt.n	800d5d4 <tcp_slowtmr+0x294>
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	b21a      	sxth	r2, r3
 800d5a2:	e019      	b.n	800d5d8 <tcp_slowtmr+0x298>
 800d5a4:	2001dcf4 	.word	0x2001dcf4
 800d5a8:	2001dd0a 	.word	0x2001dd0a
 800d5ac:	2001dd00 	.word	0x2001dd00
 800d5b0:	080199c8 	.word	0x080199c8
 800d5b4:	08019d0c 	.word	0x08019d0c
 800d5b8:	08019a0c 	.word	0x08019a0c
 800d5bc:	08019d38 	.word	0x08019d38
 800d5c0:	08019d64 	.word	0x08019d64
 800d5c4:	08019d94 	.word	0x08019d94
 800d5c8:	08019dc8 	.word	0x08019dc8
 800d5cc:	0801c3c0 	.word	0x0801c3c0
 800d5d0:	0801c3b0 	.word	0x0801c3b0
 800d5d4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	bf28      	it	cs
 800d5f4:	4613      	movcs	r3, r2
 800d5f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d5f8:	8a7b      	ldrh	r3, [r7, #18]
 800d5fa:	085b      	lsrs	r3, r3, #1
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d600:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d606:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d60c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	b29b      	uxth	r3, r3
 800d612:	429a      	cmp	r2, r3
 800d614:	d206      	bcs.n	800d624 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d620:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d626:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d630:	2200      	movs	r2, #0
 800d632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d638:	f004 fd42 	bl	80120c0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63e:	7d1b      	ldrb	r3, [r3, #20]
 800d640:	2b06      	cmp	r3, #6
 800d642:	d111      	bne.n	800d668 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	8b5b      	ldrh	r3, [r3, #26]
 800d648:	f003 0310 	and.w	r3, r3, #16
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d650:	4b9c      	ldr	r3, [pc, #624]	@ (800d8c4 <tcp_slowtmr+0x584>)
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	6a1b      	ldr	r3, [r3, #32]
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	2b28      	cmp	r3, #40	@ 0x28
 800d65c:	d904      	bls.n	800d668 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d65e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d662:	3301      	adds	r3, #1
 800d664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66a:	7a5b      	ldrb	r3, [r3, #9]
 800d66c:	f003 0308 	and.w	r3, r3, #8
 800d670:	2b00      	cmp	r3, #0
 800d672:	d04a      	beq.n	800d70a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d676:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d678:	2b04      	cmp	r3, #4
 800d67a:	d003      	beq.n	800d684 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d680:	2b07      	cmp	r3, #7
 800d682:	d142      	bne.n	800d70a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d684:	4b8f      	ldr	r3, [pc, #572]	@ (800d8c4 <tcp_slowtmr+0x584>)
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d690:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d694:	4b8c      	ldr	r3, [pc, #560]	@ (800d8c8 <tcp_slowtmr+0x588>)
 800d696:	440b      	add	r3, r1
 800d698:	498c      	ldr	r1, [pc, #560]	@ (800d8cc <tcp_slowtmr+0x58c>)
 800d69a:	fba1 1303 	umull	r1, r3, r1, r3
 800d69e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d90a      	bls.n	800d6ba <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d6ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d6b8:	e027      	b.n	800d70a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6ba:	4b82      	ldr	r3, [pc, #520]	@ (800d8c4 <tcp_slowtmr+0x584>)
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	4b7f      	ldr	r3, [pc, #508]	@ (800d8d0 <tcp_slowtmr+0x590>)
 800d6d4:	fb00 f303 	mul.w	r3, r0, r3
 800d6d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d6da:	497c      	ldr	r1, [pc, #496]	@ (800d8cc <tcp_slowtmr+0x58c>)
 800d6dc:	fba1 1303 	umull	r1, r3, r1, r3
 800d6e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d911      	bls.n	800d70a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d6e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6e8:	f004 ffee 	bl	80126c8 <tcp_keepalive>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d6f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d107      	bne.n	800d70a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d700:	3301      	adds	r3, #1
 800d702:	b2da      	uxtb	r2, r3
 800d704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d706:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d011      	beq.n	800d736 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d712:	4b6c      	ldr	r3, [pc, #432]	@ (800d8c4 <tcp_slowtmr+0x584>)
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	1ad2      	subs	r2, r2, r3
 800d71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d722:	4619      	mov	r1, r3
 800d724:	460b      	mov	r3, r1
 800d726:	005b      	lsls	r3, r3, #1
 800d728:	440b      	add	r3, r1
 800d72a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d302      	bcc.n	800d736 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800d730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d732:	f000 fead 	bl	800e490 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d738:	7d1b      	ldrb	r3, [r3, #20]
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d10b      	bne.n	800d756 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d73e:	4b61      	ldr	r3, [pc, #388]	@ (800d8c4 <tcp_slowtmr+0x584>)
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	1ad3      	subs	r3, r2, r3
 800d748:	2b28      	cmp	r3, #40	@ 0x28
 800d74a:	d904      	bls.n	800d756 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800d74c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d750:	3301      	adds	r3, #1
 800d752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d758:	7d1b      	ldrb	r3, [r3, #20]
 800d75a:	2b09      	cmp	r3, #9
 800d75c:	d10b      	bne.n	800d776 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d75e:	4b59      	ldr	r3, [pc, #356]	@ (800d8c4 <tcp_slowtmr+0x584>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d764:	6a1b      	ldr	r3, [r3, #32]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	2bf0      	cmp	r3, #240	@ 0xf0
 800d76a:	d904      	bls.n	800d776 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d76c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d770:	3301      	adds	r3, #1
 800d772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d060      	beq.n	800d840 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800d77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d784:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d788:	f000 fcce 	bl	800e128 <tcp_pcb_purge>
      if (prev != NULL) {
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d010      	beq.n	800d7b4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d792:	4b50      	ldr	r3, [pc, #320]	@ (800d8d4 <tcp_slowtmr+0x594>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d798:	429a      	cmp	r2, r3
 800d79a:	d106      	bne.n	800d7aa <tcp_slowtmr+0x46a>
 800d79c:	4b4e      	ldr	r3, [pc, #312]	@ (800d8d8 <tcp_slowtmr+0x598>)
 800d79e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d7a2:	494e      	ldr	r1, [pc, #312]	@ (800d8dc <tcp_slowtmr+0x59c>)
 800d7a4:	484e      	ldr	r0, [pc, #312]	@ (800d8e0 <tcp_slowtmr+0x5a0>)
 800d7a6:	f00a fa5f 	bl	8017c68 <iprintf>
        prev->next = pcb->next;
 800d7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ac:	68da      	ldr	r2, [r3, #12]
 800d7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b0:	60da      	str	r2, [r3, #12]
 800d7b2:	e00f      	b.n	800d7d4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d7b4:	4b47      	ldr	r3, [pc, #284]	@ (800d8d4 <tcp_slowtmr+0x594>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d006      	beq.n	800d7cc <tcp_slowtmr+0x48c>
 800d7be:	4b46      	ldr	r3, [pc, #280]	@ (800d8d8 <tcp_slowtmr+0x598>)
 800d7c0:	f240 5271 	movw	r2, #1393	@ 0x571
 800d7c4:	4947      	ldr	r1, [pc, #284]	@ (800d8e4 <tcp_slowtmr+0x5a4>)
 800d7c6:	4846      	ldr	r0, [pc, #280]	@ (800d8e0 <tcp_slowtmr+0x5a0>)
 800d7c8:	f00a fa4e 	bl	8017c68 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	4a40      	ldr	r2, [pc, #256]	@ (800d8d4 <tcp_slowtmr+0x594>)
 800d7d2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d7d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d013      	beq.n	800d804 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7de:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d7e4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7ec:	8ad2      	ldrh	r2, [r2, #22]
 800d7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7f0:	8b09      	ldrh	r1, [r1, #24]
 800d7f2:	9102      	str	r1, [sp, #8]
 800d7f4:	9201      	str	r2, [sp, #4]
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	462b      	mov	r3, r5
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	4601      	mov	r1, r0
 800d7fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d800:	f004 feae 	bl	8012560 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80c:	7d1b      	ldrb	r3, [r3, #20]
 800d80e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d812:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d81a:	6838      	ldr	r0, [r7, #0]
 800d81c:	f7fe ff1e 	bl	800c65c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d820:	4b31      	ldr	r3, [pc, #196]	@ (800d8e8 <tcp_slowtmr+0x5a8>)
 800d822:	2200      	movs	r2, #0
 800d824:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d004      	beq.n	800d836 <tcp_slowtmr+0x4f6>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f06f 010c 	mvn.w	r1, #12
 800d832:	68b8      	ldr	r0, [r7, #8]
 800d834:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d836:	4b2c      	ldr	r3, [pc, #176]	@ (800d8e8 <tcp_slowtmr+0x5a8>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d037      	beq.n	800d8ae <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d83e:	e592      	b.n	800d366 <tcp_slowtmr+0x26>
      prev = pcb;
 800d840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d842:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84c:	7f1b      	ldrb	r3, [r3, #28]
 800d84e:	3301      	adds	r3, #1
 800d850:	b2da      	uxtb	r2, r3
 800d852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d854:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d858:	7f1a      	ldrb	r2, [r3, #28]
 800d85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85c:	7f5b      	ldrb	r3, [r3, #29]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d325      	bcc.n	800d8ae <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d864:	2200      	movs	r2, #0
 800d866:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d868:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e8 <tcp_slowtmr+0x5a8>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <tcp_slowtmr+0x550>
 800d878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d87e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d880:	6912      	ldr	r2, [r2, #16]
 800d882:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d884:	4610      	mov	r0, r2
 800d886:	4798      	blx	r3
 800d888:	4603      	mov	r3, r0
 800d88a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d88e:	e002      	b.n	800d896 <tcp_slowtmr+0x556>
 800d890:	2300      	movs	r3, #0
 800d892:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d896:	4b14      	ldr	r3, [pc, #80]	@ (800d8e8 <tcp_slowtmr+0x5a8>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f47f ad62 	bne.w	800d364 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d8a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8aa:	f004 f8a5 	bl	80119f8 <tcp_output>
  while (pcb != NULL) {
 800d8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f47f ad5e 	bne.w	800d372 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d8ec <tcp_slowtmr+0x5ac>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d8c0:	e069      	b.n	800d996 <tcp_slowtmr+0x656>
 800d8c2:	bf00      	nop
 800d8c4:	2001dcf4 	.word	0x2001dcf4
 800d8c8:	000a4cb8 	.word	0x000a4cb8
 800d8cc:	10624dd3 	.word	0x10624dd3
 800d8d0:	000124f8 	.word	0x000124f8
 800d8d4:	2001dd00 	.word	0x2001dd00
 800d8d8:	080199c8 	.word	0x080199c8
 800d8dc:	08019e00 	.word	0x08019e00
 800d8e0:	08019a0c 	.word	0x08019a0c
 800d8e4:	08019e2c 	.word	0x08019e2c
 800d8e8:	2001dd08 	.word	0x2001dd08
 800d8ec:	2001dd04 	.word	0x2001dd04
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f2:	7d1b      	ldrb	r3, [r3, #20]
 800d8f4:	2b0a      	cmp	r3, #10
 800d8f6:	d006      	beq.n	800d906 <tcp_slowtmr+0x5c6>
 800d8f8:	4b2b      	ldr	r3, [pc, #172]	@ (800d9a8 <tcp_slowtmr+0x668>)
 800d8fa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d8fe:	492b      	ldr	r1, [pc, #172]	@ (800d9ac <tcp_slowtmr+0x66c>)
 800d900:	482b      	ldr	r0, [pc, #172]	@ (800d9b0 <tcp_slowtmr+0x670>)
 800d902:	f00a f9b1 	bl	8017c68 <iprintf>
    pcb_remove = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d90c:	4b29      	ldr	r3, [pc, #164]	@ (800d9b4 <tcp_slowtmr+0x674>)
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d912:	6a1b      	ldr	r3, [r3, #32]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	2bf0      	cmp	r3, #240	@ 0xf0
 800d918:	d904      	bls.n	800d924 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d91a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d91e:	3301      	adds	r3, #1
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d02f      	beq.n	800d98c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d92c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d92e:	f000 fbfb 	bl	800e128 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d934:	2b00      	cmp	r3, #0
 800d936:	d010      	beq.n	800d95a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d938:	4b1f      	ldr	r3, [pc, #124]	@ (800d9b8 <tcp_slowtmr+0x678>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d93e:	429a      	cmp	r2, r3
 800d940:	d106      	bne.n	800d950 <tcp_slowtmr+0x610>
 800d942:	4b19      	ldr	r3, [pc, #100]	@ (800d9a8 <tcp_slowtmr+0x668>)
 800d944:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d948:	491c      	ldr	r1, [pc, #112]	@ (800d9bc <tcp_slowtmr+0x67c>)
 800d94a:	4819      	ldr	r0, [pc, #100]	@ (800d9b0 <tcp_slowtmr+0x670>)
 800d94c:	f00a f98c 	bl	8017c68 <iprintf>
        prev->next = pcb->next;
 800d950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d956:	60da      	str	r2, [r3, #12]
 800d958:	e00f      	b.n	800d97a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d95a:	4b17      	ldr	r3, [pc, #92]	@ (800d9b8 <tcp_slowtmr+0x678>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d960:	429a      	cmp	r2, r3
 800d962:	d006      	beq.n	800d972 <tcp_slowtmr+0x632>
 800d964:	4b10      	ldr	r3, [pc, #64]	@ (800d9a8 <tcp_slowtmr+0x668>)
 800d966:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d96a:	4915      	ldr	r1, [pc, #84]	@ (800d9c0 <tcp_slowtmr+0x680>)
 800d96c:	4810      	ldr	r0, [pc, #64]	@ (800d9b0 <tcp_slowtmr+0x670>)
 800d96e:	f00a f97b 	bl	8017c68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	4a10      	ldr	r2, [pc, #64]	@ (800d9b8 <tcp_slowtmr+0x678>)
 800d978:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d984:	69f8      	ldr	r0, [r7, #28]
 800d986:	f7fe fe69 	bl	800c65c <tcp_free>
 800d98a:	e004      	b.n	800d996 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1a9      	bne.n	800d8f0 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d99c:	bf00      	nop
 800d99e:	bf00      	nop
 800d9a0:	3730      	adds	r7, #48	@ 0x30
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	080199c8 	.word	0x080199c8
 800d9ac:	08019e58 	.word	0x08019e58
 800d9b0:	08019a0c 	.word	0x08019a0c
 800d9b4:	2001dcf4 	.word	0x2001dcf4
 800d9b8:	2001dd04 	.word	0x2001dd04
 800d9bc:	08019e88 	.word	0x08019e88
 800d9c0:	08019eb0 	.word	0x08019eb0

0800d9c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d9ca:	4b2d      	ldr	r3, [pc, #180]	@ (800da80 <tcp_fasttmr+0xbc>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	4b2b      	ldr	r3, [pc, #172]	@ (800da80 <tcp_fasttmr+0xbc>)
 800d9d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d9d6:	4b2b      	ldr	r3, [pc, #172]	@ (800da84 <tcp_fasttmr+0xc0>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d9dc:	e048      	b.n	800da70 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7f9a      	ldrb	r2, [r3, #30]
 800d9e2:	4b27      	ldr	r3, [pc, #156]	@ (800da80 <tcp_fasttmr+0xbc>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d03f      	beq.n	800da6a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d9ea:	4b25      	ldr	r3, [pc, #148]	@ (800da80 <tcp_fasttmr+0xbc>)
 800d9ec:	781a      	ldrb	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	8b5b      	ldrh	r3, [r3, #26]
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d010      	beq.n	800da20 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	8b5b      	ldrh	r3, [r3, #26]
 800da02:	f043 0302 	orr.w	r3, r3, #2
 800da06:	b29a      	uxth	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f003 fff3 	bl	80119f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	8b5b      	ldrh	r3, [r3, #26]
 800da16:	f023 0303 	bic.w	r3, r3, #3
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8b5b      	ldrh	r3, [r3, #26]
 800da24:	f003 0308 	and.w	r3, r3, #8
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d009      	beq.n	800da40 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8b5b      	ldrh	r3, [r3, #26]
 800da30:	f023 0308 	bic.w	r3, r3, #8
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7fe ffa2 	bl	800c984 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00a      	beq.n	800da64 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800da4e:	4b0e      	ldr	r3, [pc, #56]	@ (800da88 <tcp_fasttmr+0xc4>)
 800da50:	2200      	movs	r2, #0
 800da52:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 f819 	bl	800da8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800da5a:	4b0b      	ldr	r3, [pc, #44]	@ (800da88 <tcp_fasttmr+0xc4>)
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d000      	beq.n	800da64 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800da62:	e7b8      	b.n	800d9d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	607b      	str	r3, [r7, #4]
 800da68:	e002      	b.n	800da70 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1b3      	bne.n	800d9de <tcp_fasttmr+0x1a>
    }
  }
}
 800da76:	bf00      	nop
 800da78:	bf00      	nop
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	2001dd0a 	.word	0x2001dd0a
 800da84:	2001dd00 	.word	0x2001dd00
 800da88:	2001dd08 	.word	0x2001dd08

0800da8c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d109      	bne.n	800daae <tcp_process_refused_data+0x22>
 800da9a:	4b38      	ldr	r3, [pc, #224]	@ (800db7c <tcp_process_refused_data+0xf0>)
 800da9c:	f240 6209 	movw	r2, #1545	@ 0x609
 800daa0:	4937      	ldr	r1, [pc, #220]	@ (800db80 <tcp_process_refused_data+0xf4>)
 800daa2:	4838      	ldr	r0, [pc, #224]	@ (800db84 <tcp_process_refused_data+0xf8>)
 800daa4:	f00a f8e0 	bl	8017c68 <iprintf>
 800daa8:	f06f 030f 	mvn.w	r3, #15
 800daac:	e061      	b.n	800db72 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dab2:	7b5b      	ldrb	r3, [r3, #13]
 800dab4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800daba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <tcp_process_refused_data+0x58>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6918      	ldr	r0, [r3, #16]
 800dad6:	2300      	movs	r3, #0
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	47a0      	blx	r4
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]
 800dae2:	e007      	b.n	800daf4 <tcp_process_refused_data+0x68>
 800dae4:	2300      	movs	r3, #0
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	6879      	ldr	r1, [r7, #4]
 800daea:	2000      	movs	r0, #0
 800daec:	f000 f8a6 	bl	800dc3c <tcp_recv_null>
 800daf0:	4603      	mov	r3, r0
 800daf2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800daf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d12b      	bne.n	800db54 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
 800dafe:	f003 0320 	and.w	r3, r3, #32
 800db02:	2b00      	cmp	r3, #0
 800db04:	d034      	beq.n	800db70 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db0a:	f244 4270 	movw	r2, #17520	@ 0x4470
 800db0e:	4293      	cmp	r3, r2
 800db10:	d005      	beq.n	800db1e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db16:	3301      	adds	r3, #1
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00b      	beq.n	800db40 <tcp_process_refused_data+0xb4>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6918      	ldr	r0, [r3, #16]
 800db32:	2300      	movs	r3, #0
 800db34:	2200      	movs	r2, #0
 800db36:	6879      	ldr	r1, [r7, #4]
 800db38:	47a0      	blx	r4
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]
 800db3e:	e001      	b.n	800db44 <tcp_process_refused_data+0xb8>
 800db40:	2300      	movs	r3, #0
 800db42:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800db44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db48:	f113 0f0d 	cmn.w	r3, #13
 800db4c:	d110      	bne.n	800db70 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800db4e:	f06f 030c 	mvn.w	r3, #12
 800db52:	e00e      	b.n	800db72 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800db54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db58:	f113 0f0d 	cmn.w	r3, #13
 800db5c:	d102      	bne.n	800db64 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800db5e:	f06f 030c 	mvn.w	r3, #12
 800db62:	e006      	b.n	800db72 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800db6a:	f06f 0304 	mvn.w	r3, #4
 800db6e:	e000      	b.n	800db72 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3714      	adds	r7, #20
 800db76:	46bd      	mov	sp, r7
 800db78:	bd90      	pop	{r4, r7, pc}
 800db7a:	bf00      	nop
 800db7c:	080199c8 	.word	0x080199c8
 800db80:	08019ed8 	.word	0x08019ed8
 800db84:	08019a0c 	.word	0x08019a0c

0800db88 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800db90:	e007      	b.n	800dba2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f80a 	bl	800dbb2 <tcp_seg_free>
    seg = next;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1f4      	bne.n	800db92 <tcp_segs_free+0xa>
  }
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b082      	sub	sp, #8
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00c      	beq.n	800dbda <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fe f9d1 	bl	800bf74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	2003      	movs	r0, #3
 800dbd6:	f7fd fa4d 	bl	800b074 <memp_free>
  }
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
	...

0800dbe4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <tcp_seg_copy+0x1c>
 800dbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800dc30 <tcp_seg_copy+0x4c>)
 800dbf4:	f240 6282 	movw	r2, #1666	@ 0x682
 800dbf8:	490e      	ldr	r1, [pc, #56]	@ (800dc34 <tcp_seg_copy+0x50>)
 800dbfa:	480f      	ldr	r0, [pc, #60]	@ (800dc38 <tcp_seg_copy+0x54>)
 800dbfc:	f00a f834 	bl	8017c68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dc00:	2003      	movs	r0, #3
 800dc02:	f7fd f9c1 	bl	800af88 <memp_malloc>
 800dc06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d101      	bne.n	800dc12 <tcp_seg_copy+0x2e>
    return NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e00a      	b.n	800dc28 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dc12:	2210      	movs	r2, #16
 800dc14:	6879      	ldr	r1, [r7, #4]
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f00a f95f 	bl	8017eda <memcpy>
  pbuf_ref(cseg->p);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fe fa4d 	bl	800c0c0 <pbuf_ref>
  return cseg;
 800dc26:	68fb      	ldr	r3, [r7, #12]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	080199c8 	.word	0x080199c8
 800dc34:	08019f1c 	.word	0x08019f1c
 800dc38:	08019a0c 	.word	0x08019a0c

0800dc3c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d109      	bne.n	800dc64 <tcp_recv_null+0x28>
 800dc50:	4b12      	ldr	r3, [pc, #72]	@ (800dc9c <tcp_recv_null+0x60>)
 800dc52:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800dc56:	4912      	ldr	r1, [pc, #72]	@ (800dca0 <tcp_recv_null+0x64>)
 800dc58:	4812      	ldr	r0, [pc, #72]	@ (800dca4 <tcp_recv_null+0x68>)
 800dc5a:	f00a f805 	bl	8017c68 <iprintf>
 800dc5e:	f06f 030f 	mvn.w	r3, #15
 800dc62:	e016      	b.n	800dc92 <tcp_recv_null+0x56>

  if (p != NULL) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d009      	beq.n	800dc7e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	891b      	ldrh	r3, [r3, #8]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68b8      	ldr	r0, [r7, #8]
 800dc72:	f7ff f9b5 	bl	800cfe0 <tcp_recved>
    pbuf_free(p);
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7fe f97c 	bl	800bf74 <pbuf_free>
 800dc7c:	e008      	b.n	800dc90 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dc7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d104      	bne.n	800dc90 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dc86:	68b8      	ldr	r0, [r7, #8]
 800dc88:	f7fe fee6 	bl	800ca58 <tcp_close>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	e000      	b.n	800dc92 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	080199c8 	.word	0x080199c8
 800dca0:	08019f38 	.word	0x08019f38
 800dca4:	08019a0c 	.word	0x08019a0c

0800dca8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	4603      	mov	r3, r0
 800dcb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dcb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	db01      	blt.n	800dcbe <tcp_kill_prio+0x16>
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	e000      	b.n	800dcc0 <tcp_kill_prio+0x18>
 800dcbe:	237f      	movs	r3, #127	@ 0x7f
 800dcc0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dcc2:	7afb      	ldrb	r3, [r7, #11]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d034      	beq.n	800dd32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcd6:	4b19      	ldr	r3, [pc, #100]	@ (800dd3c <tcp_kill_prio+0x94>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	617b      	str	r3, [r7, #20]
 800dcdc:	e01f      	b.n	800dd1e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	7d5b      	ldrb	r3, [r3, #21]
 800dce2:	7afa      	ldrb	r2, [r7, #11]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d80c      	bhi.n	800dd02 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dcec:	7afa      	ldrb	r2, [r7, #11]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d112      	bne.n	800dd18 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dcf2:	4b13      	ldr	r3, [pc, #76]	@ (800dd40 <tcp_kill_prio+0x98>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d80a      	bhi.n	800dd18 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dd02:	4b0f      	ldr	r3, [pc, #60]	@ (800dd40 <tcp_kill_prio+0x98>)
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	7d5b      	ldrb	r3, [r3, #21]
 800dd16:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	617b      	str	r3, [r7, #20]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1dc      	bne.n	800dcde <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d004      	beq.n	800dd34 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd2a:	6938      	ldr	r0, [r7, #16]
 800dd2c:	f7fe ff7e 	bl	800cc2c <tcp_abort>
 800dd30:	e000      	b.n	800dd34 <tcp_kill_prio+0x8c>
    return;
 800dd32:	bf00      	nop
  }
}
 800dd34:	3718      	adds	r7, #24
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	2001dd00 	.word	0x2001dd00
 800dd40:	2001dcf4 	.word	0x2001dcf4

0800dd44 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	2b08      	cmp	r3, #8
 800dd52:	d009      	beq.n	800dd68 <tcp_kill_state+0x24>
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	2b09      	cmp	r3, #9
 800dd58:	d006      	beq.n	800dd68 <tcp_kill_state+0x24>
 800dd5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ddc4 <tcp_kill_state+0x80>)
 800dd5c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800dd60:	4919      	ldr	r1, [pc, #100]	@ (800ddc8 <tcp_kill_state+0x84>)
 800dd62:	481a      	ldr	r0, [pc, #104]	@ (800ddcc <tcp_kill_state+0x88>)
 800dd64:	f009 ff80 	bl	8017c68 <iprintf>

  inactivity = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd70:	4b17      	ldr	r3, [pc, #92]	@ (800ddd0 <tcp_kill_state+0x8c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	617b      	str	r3, [r7, #20]
 800dd76:	e017      	b.n	800dda8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	7d1b      	ldrb	r3, [r3, #20]
 800dd7c:	79fa      	ldrb	r2, [r7, #7]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d10f      	bne.n	800dda2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd82:	4b14      	ldr	r3, [pc, #80]	@ (800ddd4 <tcp_kill_state+0x90>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	6a1b      	ldr	r3, [r3, #32]
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d807      	bhi.n	800dda2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dd92:	4b10      	ldr	r3, [pc, #64]	@ (800ddd4 <tcp_kill_state+0x90>)
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	6a1b      	ldr	r3, [r3, #32]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1e4      	bne.n	800dd78 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d003      	beq.n	800ddbc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	6938      	ldr	r0, [r7, #16]
 800ddb8:	f7fe fe7a 	bl	800cab0 <tcp_abandon>
  }
}
 800ddbc:	bf00      	nop
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	080199c8 	.word	0x080199c8
 800ddc8:	08019f54 	.word	0x08019f54
 800ddcc:	08019a0c 	.word	0x08019a0c
 800ddd0:	2001dd00 	.word	0x2001dd00
 800ddd4:	2001dcf4 	.word	0x2001dcf4

0800ddd8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dde6:	4b12      	ldr	r3, [pc, #72]	@ (800de30 <tcp_kill_timewait+0x58>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	60fb      	str	r3, [r7, #12]
 800ddec:	e012      	b.n	800de14 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ddee:	4b11      	ldr	r3, [pc, #68]	@ (800de34 <tcp_kill_timewait+0x5c>)
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d807      	bhi.n	800de0e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ddfe:	4b0d      	ldr	r3, [pc, #52]	@ (800de34 <tcp_kill_timewait+0x5c>)
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1e9      	bne.n	800ddee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de20:	68b8      	ldr	r0, [r7, #8]
 800de22:	f7fe ff03 	bl	800cc2c <tcp_abort>
  }
}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	2001dd04 	.word	0x2001dd04
 800de34:	2001dcf4 	.word	0x2001dcf4

0800de38 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800de3e:	4b10      	ldr	r3, [pc, #64]	@ (800de80 <tcp_handle_closepend+0x48>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800de44:	e014      	b.n	800de70 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f003 0308 	and.w	r3, r3, #8
 800de54:	2b00      	cmp	r3, #0
 800de56:	d009      	beq.n	800de6c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8b5b      	ldrh	r3, [r3, #26]
 800de5c:	f023 0308 	bic.w	r3, r3, #8
 800de60:	b29a      	uxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7fe fd8c 	bl	800c984 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e7      	bne.n	800de46 <tcp_handle_closepend+0xe>
  }
}
 800de76:	bf00      	nop
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	2001dd00 	.word	0x2001dd00

0800de84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	4603      	mov	r3, r0
 800de8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de8e:	2001      	movs	r0, #1
 800de90:	f7fd f87a 	bl	800af88 <memp_malloc>
 800de94:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d126      	bne.n	800deea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800de9c:	f7ff ffcc 	bl	800de38 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dea0:	f7ff ff9a 	bl	800ddd8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dea4:	2001      	movs	r0, #1
 800dea6:	f7fd f86f 	bl	800af88 <memp_malloc>
 800deaa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d11b      	bne.n	800deea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800deb2:	2009      	movs	r0, #9
 800deb4:	f7ff ff46 	bl	800dd44 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800deb8:	2001      	movs	r0, #1
 800deba:	f7fd f865 	bl	800af88 <memp_malloc>
 800debe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d111      	bne.n	800deea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dec6:	2008      	movs	r0, #8
 800dec8:	f7ff ff3c 	bl	800dd44 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800decc:	2001      	movs	r0, #1
 800dece:	f7fd f85b 	bl	800af88 <memp_malloc>
 800ded2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d107      	bne.n	800deea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff fee3 	bl	800dca8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dee2:	2001      	movs	r0, #1
 800dee4:	f7fd f850 	bl	800af88 <memp_malloc>
 800dee8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d03f      	beq.n	800df70 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800def0:	229c      	movs	r2, #156	@ 0x9c
 800def2:	2100      	movs	r1, #0
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f009 ff1c 	bl	8017d32 <memset>
    pcb->prio = prio;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	79fa      	ldrb	r2, [r7, #7]
 800defe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f244 4270 	movw	r2, #17520	@ 0x4470
 800df06:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f244 4270 	movw	r2, #17520	@ 0x4470
 800df10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	22ff      	movs	r2, #255	@ 0xff
 800df1e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800df26:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2206      	movs	r2, #6
 800df2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2206      	movs	r2, #6
 800df34:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df3c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2201      	movs	r2, #1
 800df42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800df46:	4b0d      	ldr	r3, [pc, #52]	@ (800df7c <tcp_alloc+0xf8>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800df4e:	4b0c      	ldr	r3, [pc, #48]	@ (800df80 <tcp_alloc+0xfc>)
 800df50:	781a      	ldrb	r2, [r3, #0]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f244 4270 	movw	r2, #17520	@ 0x4470
 800df5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	4a08      	ldr	r2, [pc, #32]	@ (800df84 <tcp_alloc+0x100>)
 800df64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	4a07      	ldr	r2, [pc, #28]	@ (800df88 <tcp_alloc+0x104>)
 800df6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800df70:	68fb      	ldr	r3, [r7, #12]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	2001dcf4 	.word	0x2001dcf4
 800df80:	2001dd0a 	.word	0x2001dd0a
 800df84:	0800dc3d 	.word	0x0800dc3d
 800df88:	006ddd00 	.word	0x006ddd00

0800df8c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800df96:	2040      	movs	r0, #64	@ 0x40
 800df98:	f7ff ff74 	bl	800de84 <tcp_alloc>
 800df9c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800df9e:	68fb      	ldr	r3, [r7, #12]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	611a      	str	r2, [r3, #16]
  }
}
 800dfbe:	bf00      	nop
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
	...

0800dfcc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00e      	beq.n	800dffa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	7d1b      	ldrb	r3, [r3, #20]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d106      	bne.n	800dff2 <tcp_recv+0x26>
 800dfe4:	4b07      	ldr	r3, [pc, #28]	@ (800e004 <tcp_recv+0x38>)
 800dfe6:	f240 72df 	movw	r2, #2015	@ 0x7df
 800dfea:	4907      	ldr	r1, [pc, #28]	@ (800e008 <tcp_recv+0x3c>)
 800dfec:	4807      	ldr	r0, [pc, #28]	@ (800e00c <tcp_recv+0x40>)
 800dfee:	f009 fe3b 	bl	8017c68 <iprintf>
    pcb->recv = recv;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	080199c8 	.word	0x080199c8
 800e008:	08019f64 	.word	0x08019f64
 800e00c:	08019a0c 	.word	0x08019a0c

0800e010 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00e      	beq.n	800e03e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	7d1b      	ldrb	r3, [r3, #20]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d106      	bne.n	800e036 <tcp_sent+0x26>
 800e028:	4b07      	ldr	r3, [pc, #28]	@ (800e048 <tcp_sent+0x38>)
 800e02a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800e02e:	4907      	ldr	r1, [pc, #28]	@ (800e04c <tcp_sent+0x3c>)
 800e030:	4807      	ldr	r0, [pc, #28]	@ (800e050 <tcp_sent+0x40>)
 800e032:	f009 fe19 	bl	8017c68 <iprintf>
    pcb->sent = sent;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	683a      	ldr	r2, [r7, #0]
 800e03a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800e03e:	bf00      	nop
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	080199c8 	.word	0x080199c8
 800e04c:	08019f8c 	.word	0x08019f8c
 800e050:	08019a0c 	.word	0x08019a0c

0800e054 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00e      	beq.n	800e082 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d106      	bne.n	800e07a <tcp_err+0x26>
 800e06c:	4b07      	ldr	r3, [pc, #28]	@ (800e08c <tcp_err+0x38>)
 800e06e:	f640 020d 	movw	r2, #2061	@ 0x80d
 800e072:	4907      	ldr	r1, [pc, #28]	@ (800e090 <tcp_err+0x3c>)
 800e074:	4807      	ldr	r0, [pc, #28]	@ (800e094 <tcp_err+0x40>)
 800e076:	f009 fdf7 	bl	8017c68 <iprintf>
    pcb->errf = err;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800e082:	bf00      	nop
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	080199c8 	.word	0x080199c8
 800e090:	08019fb4 	.word	0x08019fb4
 800e094:	08019a0c 	.word	0x08019a0c

0800e098 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d008      	beq.n	800e0ba <tcp_accept+0x22>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7d1b      	ldrb	r3, [r3, #20]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d104      	bne.n	800e0ba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	619a      	str	r2, [r3, #24]
  }
}
 800e0ba:	bf00      	nop
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
	...

0800e0c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d107      	bne.n	800e0ec <tcp_poll+0x24>
 800e0dc:	4b0e      	ldr	r3, [pc, #56]	@ (800e118 <tcp_poll+0x50>)
 800e0de:	f640 023d 	movw	r2, #2109	@ 0x83d
 800e0e2:	490e      	ldr	r1, [pc, #56]	@ (800e11c <tcp_poll+0x54>)
 800e0e4:	480e      	ldr	r0, [pc, #56]	@ (800e120 <tcp_poll+0x58>)
 800e0e6:	f009 fdbf 	bl	8017c68 <iprintf>
 800e0ea:	e011      	b.n	800e110 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	7d1b      	ldrb	r3, [r3, #20]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d106      	bne.n	800e102 <tcp_poll+0x3a>
 800e0f4:	4b08      	ldr	r3, [pc, #32]	@ (800e118 <tcp_poll+0x50>)
 800e0f6:	f640 023e 	movw	r2, #2110	@ 0x83e
 800e0fa:	490a      	ldr	r1, [pc, #40]	@ (800e124 <tcp_poll+0x5c>)
 800e0fc:	4808      	ldr	r0, [pc, #32]	@ (800e120 <tcp_poll+0x58>)
 800e0fe:	f009 fdb3 	bl	8017c68 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	79fa      	ldrb	r2, [r7, #7]
 800e10e:	775a      	strb	r2, [r3, #29]
}
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	080199c8 	.word	0x080199c8
 800e11c:	08019fdc 	.word	0x08019fdc
 800e120:	08019a0c 	.word	0x08019a0c
 800e124:	08019ff4 	.word	0x08019ff4

0800e128 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d107      	bne.n	800e146 <tcp_pcb_purge+0x1e>
 800e136:	4b21      	ldr	r3, [pc, #132]	@ (800e1bc <tcp_pcb_purge+0x94>)
 800e138:	f640 0251 	movw	r2, #2129	@ 0x851
 800e13c:	4920      	ldr	r1, [pc, #128]	@ (800e1c0 <tcp_pcb_purge+0x98>)
 800e13e:	4821      	ldr	r0, [pc, #132]	@ (800e1c4 <tcp_pcb_purge+0x9c>)
 800e140:	f009 fd92 	bl	8017c68 <iprintf>
 800e144:	e037      	b.n	800e1b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	7d1b      	ldrb	r3, [r3, #20]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d033      	beq.n	800e1b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e152:	2b0a      	cmp	r3, #10
 800e154:	d02f      	beq.n	800e1b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d02b      	beq.n	800e1b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e162:	2b00      	cmp	r3, #0
 800e164:	d007      	beq.n	800e176 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fd ff02 	bl	800bf74 <pbuf_free>
      pcb->refused_data = NULL;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d002      	beq.n	800e184 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f986 	bl	800e490 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e18a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff fcf9 	bl	800db88 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff fcf4 	bl	800db88 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	080199c8 	.word	0x080199c8
 800e1c0:	0801a014 	.word	0x0801a014
 800e1c4:	08019a0c 	.word	0x08019a0c

0800e1c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d106      	bne.n	800e1e6 <tcp_pcb_remove+0x1e>
 800e1d8:	4b3e      	ldr	r3, [pc, #248]	@ (800e2d4 <tcp_pcb_remove+0x10c>)
 800e1da:	f640 0283 	movw	r2, #2179	@ 0x883
 800e1de:	493e      	ldr	r1, [pc, #248]	@ (800e2d8 <tcp_pcb_remove+0x110>)
 800e1e0:	483e      	ldr	r0, [pc, #248]	@ (800e2dc <tcp_pcb_remove+0x114>)
 800e1e2:	f009 fd41 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d106      	bne.n	800e1fa <tcp_pcb_remove+0x32>
 800e1ec:	4b39      	ldr	r3, [pc, #228]	@ (800e2d4 <tcp_pcb_remove+0x10c>)
 800e1ee:	f640 0284 	movw	r2, #2180	@ 0x884
 800e1f2:	493b      	ldr	r1, [pc, #236]	@ (800e2e0 <tcp_pcb_remove+0x118>)
 800e1f4:	4839      	ldr	r0, [pc, #228]	@ (800e2dc <tcp_pcb_remove+0x114>)
 800e1f6:	f009 fd37 	bl	8017c68 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	429a      	cmp	r2, r3
 800e202:	d105      	bne.n	800e210 <tcp_pcb_remove+0x48>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68da      	ldr	r2, [r3, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	601a      	str	r2, [r3, #0]
 800e20e:	e013      	b.n	800e238 <tcp_pcb_remove+0x70>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	60fb      	str	r3, [r7, #12]
 800e216:	e00c      	b.n	800e232 <tcp_pcb_remove+0x6a>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d104      	bne.n	800e22c <tcp_pcb_remove+0x64>
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	68da      	ldr	r2, [r3, #12]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	60da      	str	r2, [r3, #12]
 800e22a:	e005      	b.n	800e238 <tcp_pcb_remove+0x70>
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	60fb      	str	r3, [r7, #12]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1ef      	bne.n	800e218 <tcp_pcb_remove+0x50>
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2200      	movs	r2, #0
 800e23c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e23e:	6838      	ldr	r0, [r7, #0]
 800e240:	f7ff ff72 	bl	800e128 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	7d1b      	ldrb	r3, [r3, #20]
 800e248:	2b0a      	cmp	r3, #10
 800e24a:	d013      	beq.n	800e274 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e250:	2b01      	cmp	r3, #1
 800e252:	d00f      	beq.n	800e274 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	8b5b      	ldrh	r3, [r3, #26]
 800e258:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d009      	beq.n	800e274 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	8b5b      	ldrh	r3, [r3, #26]
 800e264:	f043 0302 	orr.w	r3, r3, #2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e26e:	6838      	ldr	r0, [r7, #0]
 800e270:	f003 fbc2 	bl	80119f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	7d1b      	ldrb	r3, [r3, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d020      	beq.n	800e2be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d006      	beq.n	800e292 <tcp_pcb_remove+0xca>
 800e284:	4b13      	ldr	r3, [pc, #76]	@ (800e2d4 <tcp_pcb_remove+0x10c>)
 800e286:	f640 0293 	movw	r2, #2195	@ 0x893
 800e28a:	4916      	ldr	r1, [pc, #88]	@ (800e2e4 <tcp_pcb_remove+0x11c>)
 800e28c:	4813      	ldr	r0, [pc, #76]	@ (800e2dc <tcp_pcb_remove+0x114>)
 800e28e:	f009 fceb 	bl	8017c68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e296:	2b00      	cmp	r3, #0
 800e298:	d006      	beq.n	800e2a8 <tcp_pcb_remove+0xe0>
 800e29a:	4b0e      	ldr	r3, [pc, #56]	@ (800e2d4 <tcp_pcb_remove+0x10c>)
 800e29c:	f640 0294 	movw	r2, #2196	@ 0x894
 800e2a0:	4911      	ldr	r1, [pc, #68]	@ (800e2e8 <tcp_pcb_remove+0x120>)
 800e2a2:	480e      	ldr	r0, [pc, #56]	@ (800e2dc <tcp_pcb_remove+0x114>)
 800e2a4:	f009 fce0 	bl	8017c68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d006      	beq.n	800e2be <tcp_pcb_remove+0xf6>
 800e2b0:	4b08      	ldr	r3, [pc, #32]	@ (800e2d4 <tcp_pcb_remove+0x10c>)
 800e2b2:	f640 0296 	movw	r2, #2198	@ 0x896
 800e2b6:	490d      	ldr	r1, [pc, #52]	@ (800e2ec <tcp_pcb_remove+0x124>)
 800e2b8:	4808      	ldr	r0, [pc, #32]	@ (800e2dc <tcp_pcb_remove+0x114>)
 800e2ba:	f009 fcd5 	bl	8017c68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e2ca:	bf00      	nop
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	080199c8 	.word	0x080199c8
 800e2d8:	0801a030 	.word	0x0801a030
 800e2dc:	08019a0c 	.word	0x08019a0c
 800e2e0:	0801a04c 	.word	0x0801a04c
 800e2e4:	0801a06c 	.word	0x0801a06c
 800e2e8:	0801a084 	.word	0x0801a084
 800e2ec:	0801a0a0 	.word	0x0801a0a0

0800e2f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <tcp_next_iss+0x1c>
 800e2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e328 <tcp_next_iss+0x38>)
 800e300:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e304:	4909      	ldr	r1, [pc, #36]	@ (800e32c <tcp_next_iss+0x3c>)
 800e306:	480a      	ldr	r0, [pc, #40]	@ (800e330 <tcp_next_iss+0x40>)
 800e308:	f009 fcae 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e30c:	4b09      	ldr	r3, [pc, #36]	@ (800e334 <tcp_next_iss+0x44>)
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	4b09      	ldr	r3, [pc, #36]	@ (800e338 <tcp_next_iss+0x48>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4413      	add	r3, r2
 800e316:	4a07      	ldr	r2, [pc, #28]	@ (800e334 <tcp_next_iss+0x44>)
 800e318:	6013      	str	r3, [r2, #0]
  return iss;
 800e31a:	4b06      	ldr	r3, [pc, #24]	@ (800e334 <tcp_next_iss+0x44>)
 800e31c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3708      	adds	r7, #8
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	080199c8 	.word	0x080199c8
 800e32c:	0801a0b8 	.word	0x0801a0b8
 800e330:	08019a0c 	.word	0x08019a0c
 800e334:	20000028 	.word	0x20000028
 800e338:	2001dcf4 	.word	0x2001dcf4

0800e33c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	4603      	mov	r3, r0
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <tcp_eff_send_mss_netif+0x22>
 800e350:	4b14      	ldr	r3, [pc, #80]	@ (800e3a4 <tcp_eff_send_mss_netif+0x68>)
 800e352:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e356:	4914      	ldr	r1, [pc, #80]	@ (800e3a8 <tcp_eff_send_mss_netif+0x6c>)
 800e358:	4814      	ldr	r0, [pc, #80]	@ (800e3ac <tcp_eff_send_mss_netif+0x70>)
 800e35a:	f009 fc85 	bl	8017c68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e364:	89fb      	ldrh	r3, [r7, #14]
 800e366:	e019      	b.n	800e39c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e36c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e36e:	8afb      	ldrh	r3, [r7, #22]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d012      	beq.n	800e39a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e374:	2328      	movs	r3, #40	@ 0x28
 800e376:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e378:	8afa      	ldrh	r2, [r7, #22]
 800e37a:	8abb      	ldrh	r3, [r7, #20]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d904      	bls.n	800e38a <tcp_eff_send_mss_netif+0x4e>
 800e380:	8afa      	ldrh	r2, [r7, #22]
 800e382:	8abb      	ldrh	r3, [r7, #20]
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	b29b      	uxth	r3, r3
 800e388:	e000      	b.n	800e38c <tcp_eff_send_mss_netif+0x50>
 800e38a:	2300      	movs	r3, #0
 800e38c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e38e:	8a7a      	ldrh	r2, [r7, #18]
 800e390:	89fb      	ldrh	r3, [r7, #14]
 800e392:	4293      	cmp	r3, r2
 800e394:	bf28      	it	cs
 800e396:	4613      	movcs	r3, r2
 800e398:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e39a:	89fb      	ldrh	r3, [r7, #14]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	080199c8 	.word	0x080199c8
 800e3a8:	0801a0d4 	.word	0x0801a0d4
 800e3ac:	08019a0c 	.word	0x08019a0c

0800e3b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d119      	bne.n	800e3f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e3c4:	4b10      	ldr	r3, [pc, #64]	@ (800e408 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e3c6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e3ca:	4910      	ldr	r1, [pc, #64]	@ (800e40c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e3cc:	4810      	ldr	r0, [pc, #64]	@ (800e410 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e3ce:	f009 fc4b 	bl	8017c68 <iprintf>

  while (pcb != NULL) {
 800e3d2:	e011      	b.n	800e3f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d108      	bne.n	800e3f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7fe fc20 	bl	800cc2c <tcp_abort>
      pcb = next;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	60fb      	str	r3, [r7, #12]
 800e3f0:	e002      	b.n	800e3f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1ea      	bne.n	800e3d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e3fe:	bf00      	nop
 800e400:	bf00      	nop
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	080199c8 	.word	0x080199c8
 800e40c:	0801a0fc 	.word	0x0801a0fc
 800e410:	08019a0c 	.word	0x08019a0c

0800e414 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d02a      	beq.n	800e47a <tcp_netif_ip_addr_changed+0x66>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d026      	beq.n	800e47a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e42c:	4b15      	ldr	r3, [pc, #84]	@ (800e484 <tcp_netif_ip_addr_changed+0x70>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff ffbc 	bl	800e3b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e438:	4b13      	ldr	r3, [pc, #76]	@ (800e488 <tcp_netif_ip_addr_changed+0x74>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7ff ffb6 	bl	800e3b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d017      	beq.n	800e47a <tcp_netif_ip_addr_changed+0x66>
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d013      	beq.n	800e47a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e452:	4b0e      	ldr	r3, [pc, #56]	@ (800e48c <tcp_netif_ip_addr_changed+0x78>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	e00c      	b.n	800e474 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	d103      	bne.n	800e46e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1ef      	bne.n	800e45a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e47a:	bf00      	nop
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	2001dd00 	.word	0x2001dd00
 800e488:	2001dcf8 	.word	0x2001dcf8
 800e48c:	2001dcfc 	.word	0x2001dcfc

0800e490 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d007      	beq.n	800e4b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff fb6f 	bl	800db88 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e4b0:	bf00      	nop
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e4b8:	b590      	push	{r4, r7, lr}
 800e4ba:	b08d      	sub	sp, #52	@ 0x34
 800e4bc:	af04      	add	r7, sp, #16
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d105      	bne.n	800e4d4 <tcp_input+0x1c>
 800e4c8:	4b9b      	ldr	r3, [pc, #620]	@ (800e738 <tcp_input+0x280>)
 800e4ca:	2283      	movs	r2, #131	@ 0x83
 800e4cc:	499b      	ldr	r1, [pc, #620]	@ (800e73c <tcp_input+0x284>)
 800e4ce:	489c      	ldr	r0, [pc, #624]	@ (800e740 <tcp_input+0x288>)
 800e4d0:	f009 fbca 	bl	8017c68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	4a9a      	ldr	r2, [pc, #616]	@ (800e744 <tcp_input+0x28c>)
 800e4da:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	895b      	ldrh	r3, [r3, #10]
 800e4e0:	2b13      	cmp	r3, #19
 800e4e2:	f240 83d1 	bls.w	800ec88 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e4e6:	4b98      	ldr	r3, [pc, #608]	@ (800e748 <tcp_input+0x290>)
 800e4e8:	695b      	ldr	r3, [r3, #20]
 800e4ea:	4a97      	ldr	r2, [pc, #604]	@ (800e748 <tcp_input+0x290>)
 800e4ec:	6812      	ldr	r2, [r2, #0]
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f008 fa4d 	bl	8016990 <ip4_addr_isbroadcast_u32>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f040 83c7 	bne.w	800ec8c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e4fe:	4b92      	ldr	r3, [pc, #584]	@ (800e748 <tcp_input+0x290>)
 800e500:	695b      	ldr	r3, [r3, #20]
 800e502:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e506:	2be0      	cmp	r3, #224	@ 0xe0
 800e508:	f000 83c0 	beq.w	800ec8c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e50c:	4b8d      	ldr	r3, [pc, #564]	@ (800e744 <tcp_input+0x28c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	899b      	ldrh	r3, [r3, #12]
 800e512:	b29b      	uxth	r3, r3
 800e514:	4618      	mov	r0, r3
 800e516:	f7fc f87b 	bl	800a610 <lwip_htons>
 800e51a:	4603      	mov	r3, r0
 800e51c:	0b1b      	lsrs	r3, r3, #12
 800e51e:	b29b      	uxth	r3, r3
 800e520:	b2db      	uxtb	r3, r3
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e526:	7cbb      	ldrb	r3, [r7, #18]
 800e528:	2b13      	cmp	r3, #19
 800e52a:	f240 83b1 	bls.w	800ec90 <tcp_input+0x7d8>
 800e52e:	7cbb      	ldrb	r3, [r7, #18]
 800e530:	b29a      	uxth	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	891b      	ldrh	r3, [r3, #8]
 800e536:	429a      	cmp	r2, r3
 800e538:	f200 83aa 	bhi.w	800ec90 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e53c:	7cbb      	ldrb	r3, [r7, #18]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	3b14      	subs	r3, #20
 800e542:	b29a      	uxth	r2, r3
 800e544:	4b81      	ldr	r3, [pc, #516]	@ (800e74c <tcp_input+0x294>)
 800e546:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e548:	4b81      	ldr	r3, [pc, #516]	@ (800e750 <tcp_input+0x298>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	895a      	ldrh	r2, [r3, #10]
 800e552:	7cbb      	ldrb	r3, [r7, #18]
 800e554:	b29b      	uxth	r3, r3
 800e556:	429a      	cmp	r2, r3
 800e558:	d309      	bcc.n	800e56e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e55a:	4b7c      	ldr	r3, [pc, #496]	@ (800e74c <tcp_input+0x294>)
 800e55c:	881a      	ldrh	r2, [r3, #0]
 800e55e:	4b7d      	ldr	r3, [pc, #500]	@ (800e754 <tcp_input+0x29c>)
 800e560:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e562:	7cbb      	ldrb	r3, [r7, #18]
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7fd fc7e 	bl	800be68 <pbuf_remove_header>
 800e56c:	e04e      	b.n	800e60c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d105      	bne.n	800e582 <tcp_input+0xca>
 800e576:	4b70      	ldr	r3, [pc, #448]	@ (800e738 <tcp_input+0x280>)
 800e578:	22c2      	movs	r2, #194	@ 0xc2
 800e57a:	4977      	ldr	r1, [pc, #476]	@ (800e758 <tcp_input+0x2a0>)
 800e57c:	4870      	ldr	r0, [pc, #448]	@ (800e740 <tcp_input+0x288>)
 800e57e:	f009 fb73 	bl	8017c68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e582:	2114      	movs	r1, #20
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7fd fc6f 	bl	800be68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	895a      	ldrh	r2, [r3, #10]
 800e58e:	4b71      	ldr	r3, [pc, #452]	@ (800e754 <tcp_input+0x29c>)
 800e590:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e592:	4b6e      	ldr	r3, [pc, #440]	@ (800e74c <tcp_input+0x294>)
 800e594:	881a      	ldrh	r2, [r3, #0]
 800e596:	4b6f      	ldr	r3, [pc, #444]	@ (800e754 <tcp_input+0x29c>)
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e59e:	4b6d      	ldr	r3, [pc, #436]	@ (800e754 <tcp_input+0x29c>)
 800e5a0:	881b      	ldrh	r3, [r3, #0]
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7fd fc5f 	bl	800be68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	895b      	ldrh	r3, [r3, #10]
 800e5b0:	8a3a      	ldrh	r2, [r7, #16]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	f200 836e 	bhi.w	800ec94 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	4a64      	ldr	r2, [pc, #400]	@ (800e750 <tcp_input+0x298>)
 800e5c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	8a3a      	ldrh	r2, [r7, #16]
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fd fc4c 	bl	800be68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	891a      	ldrh	r2, [r3, #8]
 800e5d4:	8a3b      	ldrh	r3, [r7, #16]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	895b      	ldrh	r3, [r3, #10]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d005      	beq.n	800e5f2 <tcp_input+0x13a>
 800e5e6:	4b54      	ldr	r3, [pc, #336]	@ (800e738 <tcp_input+0x280>)
 800e5e8:	22df      	movs	r2, #223	@ 0xdf
 800e5ea:	495c      	ldr	r1, [pc, #368]	@ (800e75c <tcp_input+0x2a4>)
 800e5ec:	4854      	ldr	r0, [pc, #336]	@ (800e740 <tcp_input+0x288>)
 800e5ee:	f009 fb3b 	bl	8017c68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	891a      	ldrh	r2, [r3, #8]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	891b      	ldrh	r3, [r3, #8]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d005      	beq.n	800e60c <tcp_input+0x154>
 800e600:	4b4d      	ldr	r3, [pc, #308]	@ (800e738 <tcp_input+0x280>)
 800e602:	22e0      	movs	r2, #224	@ 0xe0
 800e604:	4956      	ldr	r1, [pc, #344]	@ (800e760 <tcp_input+0x2a8>)
 800e606:	484e      	ldr	r0, [pc, #312]	@ (800e740 <tcp_input+0x288>)
 800e608:	f009 fb2e 	bl	8017c68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e60c:	4b4d      	ldr	r3, [pc, #308]	@ (800e744 <tcp_input+0x28c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	b29b      	uxth	r3, r3
 800e614:	4a4b      	ldr	r2, [pc, #300]	@ (800e744 <tcp_input+0x28c>)
 800e616:	6814      	ldr	r4, [r2, #0]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fb fff9 	bl	800a610 <lwip_htons>
 800e61e:	4603      	mov	r3, r0
 800e620:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e622:	4b48      	ldr	r3, [pc, #288]	@ (800e744 <tcp_input+0x28c>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	885b      	ldrh	r3, [r3, #2]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	4a46      	ldr	r2, [pc, #280]	@ (800e744 <tcp_input+0x28c>)
 800e62c:	6814      	ldr	r4, [r2, #0]
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fb ffee 	bl	800a610 <lwip_htons>
 800e634:	4603      	mov	r3, r0
 800e636:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e638:	4b42      	ldr	r3, [pc, #264]	@ (800e744 <tcp_input+0x28c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	4a41      	ldr	r2, [pc, #260]	@ (800e744 <tcp_input+0x28c>)
 800e640:	6814      	ldr	r4, [r2, #0]
 800e642:	4618      	mov	r0, r3
 800e644:	f7fb fffa 	bl	800a63c <lwip_htonl>
 800e648:	4603      	mov	r3, r0
 800e64a:	6063      	str	r3, [r4, #4]
 800e64c:	6863      	ldr	r3, [r4, #4]
 800e64e:	4a45      	ldr	r2, [pc, #276]	@ (800e764 <tcp_input+0x2ac>)
 800e650:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e652:	4b3c      	ldr	r3, [pc, #240]	@ (800e744 <tcp_input+0x28c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	4a3a      	ldr	r2, [pc, #232]	@ (800e744 <tcp_input+0x28c>)
 800e65a:	6814      	ldr	r4, [r2, #0]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fb ffed 	bl	800a63c <lwip_htonl>
 800e662:	4603      	mov	r3, r0
 800e664:	60a3      	str	r3, [r4, #8]
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	4a3f      	ldr	r2, [pc, #252]	@ (800e768 <tcp_input+0x2b0>)
 800e66a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e66c:	4b35      	ldr	r3, [pc, #212]	@ (800e744 <tcp_input+0x28c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	89db      	ldrh	r3, [r3, #14]
 800e672:	b29b      	uxth	r3, r3
 800e674:	4a33      	ldr	r2, [pc, #204]	@ (800e744 <tcp_input+0x28c>)
 800e676:	6814      	ldr	r4, [r2, #0]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fb ffc9 	bl	800a610 <lwip_htons>
 800e67e:	4603      	mov	r3, r0
 800e680:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e682:	4b30      	ldr	r3, [pc, #192]	@ (800e744 <tcp_input+0x28c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	899b      	ldrh	r3, [r3, #12]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fb ffc0 	bl	800a610 <lwip_htons>
 800e690:	4603      	mov	r3, r0
 800e692:	b2db      	uxtb	r3, r3
 800e694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	4b34      	ldr	r3, [pc, #208]	@ (800e76c <tcp_input+0x2b4>)
 800e69c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	891a      	ldrh	r2, [r3, #8]
 800e6a2:	4b33      	ldr	r3, [pc, #204]	@ (800e770 <tcp_input+0x2b8>)
 800e6a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e6a6:	4b31      	ldr	r3, [pc, #196]	@ (800e76c <tcp_input+0x2b4>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 0303 	and.w	r3, r3, #3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00c      	beq.n	800e6cc <tcp_input+0x214>
    tcplen++;
 800e6b2:	4b2f      	ldr	r3, [pc, #188]	@ (800e770 <tcp_input+0x2b8>)
 800e6b4:	881b      	ldrh	r3, [r3, #0]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	4b2d      	ldr	r3, [pc, #180]	@ (800e770 <tcp_input+0x2b8>)
 800e6bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	891a      	ldrh	r2, [r3, #8]
 800e6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800e770 <tcp_input+0x2b8>)
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	f200 82e6 	bhi.w	800ec98 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6d0:	4b28      	ldr	r3, [pc, #160]	@ (800e774 <tcp_input+0x2bc>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	61fb      	str	r3, [r7, #28]
 800e6d6:	e09d      	b.n	800e814 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	7d1b      	ldrb	r3, [r3, #20]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d105      	bne.n	800e6ec <tcp_input+0x234>
 800e6e0:	4b15      	ldr	r3, [pc, #84]	@ (800e738 <tcp_input+0x280>)
 800e6e2:	22fb      	movs	r2, #251	@ 0xfb
 800e6e4:	4924      	ldr	r1, [pc, #144]	@ (800e778 <tcp_input+0x2c0>)
 800e6e6:	4816      	ldr	r0, [pc, #88]	@ (800e740 <tcp_input+0x288>)
 800e6e8:	f009 fabe 	bl	8017c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
 800e6f0:	2b0a      	cmp	r3, #10
 800e6f2:	d105      	bne.n	800e700 <tcp_input+0x248>
 800e6f4:	4b10      	ldr	r3, [pc, #64]	@ (800e738 <tcp_input+0x280>)
 800e6f6:	22fc      	movs	r2, #252	@ 0xfc
 800e6f8:	4920      	ldr	r1, [pc, #128]	@ (800e77c <tcp_input+0x2c4>)
 800e6fa:	4811      	ldr	r0, [pc, #68]	@ (800e740 <tcp_input+0x288>)
 800e6fc:	f009 fab4 	bl	8017c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	7d1b      	ldrb	r3, [r3, #20]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d105      	bne.n	800e714 <tcp_input+0x25c>
 800e708:	4b0b      	ldr	r3, [pc, #44]	@ (800e738 <tcp_input+0x280>)
 800e70a:	22fd      	movs	r2, #253	@ 0xfd
 800e70c:	491c      	ldr	r1, [pc, #112]	@ (800e780 <tcp_input+0x2c8>)
 800e70e:	480c      	ldr	r0, [pc, #48]	@ (800e740 <tcp_input+0x288>)
 800e710:	f009 faaa 	bl	8017c68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	7a1b      	ldrb	r3, [r3, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d033      	beq.n	800e784 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	7a1a      	ldrb	r2, [r3, #8]
 800e720:	4b09      	ldr	r3, [pc, #36]	@ (800e748 <tcp_input+0x290>)
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e728:	3301      	adds	r3, #1
 800e72a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d029      	beq.n	800e784 <tcp_input+0x2cc>
      prev = pcb;
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	61bb      	str	r3, [r7, #24]
      continue;
 800e734:	e06b      	b.n	800e80e <tcp_input+0x356>
 800e736:	bf00      	nop
 800e738:	0801a130 	.word	0x0801a130
 800e73c:	0801a164 	.word	0x0801a164
 800e740:	0801a17c 	.word	0x0801a17c
 800e744:	2001dd1c 	.word	0x2001dd1c
 800e748:	20010dd0 	.word	0x20010dd0
 800e74c:	2001dd20 	.word	0x2001dd20
 800e750:	2001dd24 	.word	0x2001dd24
 800e754:	2001dd22 	.word	0x2001dd22
 800e758:	0801a1a4 	.word	0x0801a1a4
 800e75c:	0801a1b4 	.word	0x0801a1b4
 800e760:	0801a1c0 	.word	0x0801a1c0
 800e764:	2001dd2c 	.word	0x2001dd2c
 800e768:	2001dd30 	.word	0x2001dd30
 800e76c:	2001dd38 	.word	0x2001dd38
 800e770:	2001dd36 	.word	0x2001dd36
 800e774:	2001dd00 	.word	0x2001dd00
 800e778:	0801a1e0 	.word	0x0801a1e0
 800e77c:	0801a208 	.word	0x0801a208
 800e780:	0801a234 	.word	0x0801a234
    }

    if (pcb->remote_port == tcphdr->src &&
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	8b1a      	ldrh	r2, [r3, #24]
 800e788:	4b72      	ldr	r3, [pc, #456]	@ (800e954 <tcp_input+0x49c>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	b29b      	uxth	r3, r3
 800e790:	429a      	cmp	r2, r3
 800e792:	d13a      	bne.n	800e80a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	8ada      	ldrh	r2, [r3, #22]
 800e798:	4b6e      	ldr	r3, [pc, #440]	@ (800e954 <tcp_input+0x49c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	885b      	ldrh	r3, [r3, #2]
 800e79e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d132      	bne.n	800e80a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	4b6b      	ldr	r3, [pc, #428]	@ (800e958 <tcp_input+0x4a0>)
 800e7aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d12c      	bne.n	800e80a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	4b68      	ldr	r3, [pc, #416]	@ (800e958 <tcp_input+0x4a0>)
 800e7b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d126      	bne.n	800e80a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	69fa      	ldr	r2, [r7, #28]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d106      	bne.n	800e7d4 <tcp_input+0x31c>
 800e7c6:	4b65      	ldr	r3, [pc, #404]	@ (800e95c <tcp_input+0x4a4>)
 800e7c8:	f240 120d 	movw	r2, #269	@ 0x10d
 800e7cc:	4964      	ldr	r1, [pc, #400]	@ (800e960 <tcp_input+0x4a8>)
 800e7ce:	4865      	ldr	r0, [pc, #404]	@ (800e964 <tcp_input+0x4ac>)
 800e7d0:	f009 fa4a 	bl	8017c68 <iprintf>
      if (prev != NULL) {
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00a      	beq.n	800e7f0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	68da      	ldr	r2, [r3, #12]
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e7e2:	4b61      	ldr	r3, [pc, #388]	@ (800e968 <tcp_input+0x4b0>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e7ea:	4a5f      	ldr	r2, [pc, #380]	@ (800e968 <tcp_input+0x4b0>)
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	69fa      	ldr	r2, [r7, #28]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d111      	bne.n	800e81e <tcp_input+0x366>
 800e7fa:	4b58      	ldr	r3, [pc, #352]	@ (800e95c <tcp_input+0x4a4>)
 800e7fc:	f240 1215 	movw	r2, #277	@ 0x115
 800e800:	495a      	ldr	r1, [pc, #360]	@ (800e96c <tcp_input+0x4b4>)
 800e802:	4858      	ldr	r0, [pc, #352]	@ (800e964 <tcp_input+0x4ac>)
 800e804:	f009 fa30 	bl	8017c68 <iprintf>
      break;
 800e808:	e009      	b.n	800e81e <tcp_input+0x366>
    }
    prev = pcb;
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	61fb      	str	r3, [r7, #28]
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f47f af5e 	bne.w	800e6d8 <tcp_input+0x220>
 800e81c:	e000      	b.n	800e820 <tcp_input+0x368>
      break;
 800e81e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	2b00      	cmp	r3, #0
 800e824:	f040 80aa 	bne.w	800e97c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e828:	4b51      	ldr	r3, [pc, #324]	@ (800e970 <tcp_input+0x4b8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	61fb      	str	r3, [r7, #28]
 800e82e:	e03f      	b.n	800e8b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d006      	beq.n	800e846 <tcp_input+0x38e>
 800e838:	4b48      	ldr	r3, [pc, #288]	@ (800e95c <tcp_input+0x4a4>)
 800e83a:	f240 121f 	movw	r2, #287	@ 0x11f
 800e83e:	494d      	ldr	r1, [pc, #308]	@ (800e974 <tcp_input+0x4bc>)
 800e840:	4848      	ldr	r0, [pc, #288]	@ (800e964 <tcp_input+0x4ac>)
 800e842:	f009 fa11 	bl	8017c68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	7a1b      	ldrb	r3, [r3, #8]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d009      	beq.n	800e862 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	7a1a      	ldrb	r2, [r3, #8]
 800e852:	4b41      	ldr	r3, [pc, #260]	@ (800e958 <tcp_input+0x4a0>)
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e85a:	3301      	adds	r3, #1
 800e85c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e85e:	429a      	cmp	r2, r3
 800e860:	d122      	bne.n	800e8a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	8b1a      	ldrh	r2, [r3, #24]
 800e866:	4b3b      	ldr	r3, [pc, #236]	@ (800e954 <tcp_input+0x49c>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	429a      	cmp	r2, r3
 800e870:	d11b      	bne.n	800e8aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	8ada      	ldrh	r2, [r3, #22]
 800e876:	4b37      	ldr	r3, [pc, #220]	@ (800e954 <tcp_input+0x49c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	885b      	ldrh	r3, [r3, #2]
 800e87c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e87e:	429a      	cmp	r2, r3
 800e880:	d113      	bne.n	800e8aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	4b34      	ldr	r3, [pc, #208]	@ (800e958 <tcp_input+0x4a0>)
 800e888:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d10d      	bne.n	800e8aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	4b31      	ldr	r3, [pc, #196]	@ (800e958 <tcp_input+0x4a0>)
 800e894:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e896:	429a      	cmp	r2, r3
 800e898:	d107      	bne.n	800e8aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e89a:	69f8      	ldr	r0, [r7, #28]
 800e89c:	f000 fb56 	bl	800ef4c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7fd fb67 	bl	800bf74 <pbuf_free>
        return;
 800e8a6:	e1fd      	b.n	800eca4 <tcp_input+0x7ec>
        continue;
 800e8a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	61fb      	str	r3, [r7, #28]
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1bc      	bne.n	800e830 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e978 <tcp_input+0x4c0>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e02a      	b.n	800e918 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	7a1b      	ldrb	r3, [r3, #8]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00c      	beq.n	800e8e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	7a1a      	ldrb	r2, [r3, #8]
 800e8ce:	4b22      	ldr	r3, [pc, #136]	@ (800e958 <tcp_input+0x4a0>)
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d002      	beq.n	800e8e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	61bb      	str	r3, [r7, #24]
        continue;
 800e8e2:	e016      	b.n	800e912 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	8ada      	ldrh	r2, [r3, #22]
 800e8e8:	4b1a      	ldr	r3, [pc, #104]	@ (800e954 <tcp_input+0x49c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	885b      	ldrh	r3, [r3, #2]
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d10c      	bne.n	800e90e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	4b17      	ldr	r3, [pc, #92]	@ (800e958 <tcp_input+0x4a0>)
 800e8fa:	695b      	ldr	r3, [r3, #20]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d00f      	beq.n	800e920 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00d      	beq.n	800e922 <tcp_input+0x46a>
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d009      	beq.n	800e922 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	617b      	str	r3, [r7, #20]
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1d1      	bne.n	800e8c2 <tcp_input+0x40a>
 800e91e:	e000      	b.n	800e922 <tcp_input+0x46a>
            break;
 800e920:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d029      	beq.n	800e97c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00a      	beq.n	800e944 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	68da      	ldr	r2, [r3, #12]
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e936:	4b10      	ldr	r3, [pc, #64]	@ (800e978 <tcp_input+0x4c0>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e93e:	4a0e      	ldr	r2, [pc, #56]	@ (800e978 <tcp_input+0x4c0>)
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e944:	6978      	ldr	r0, [r7, #20]
 800e946:	f000 fa03 	bl	800ed50 <tcp_listen_input>
      }
      pbuf_free(p);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7fd fb12 	bl	800bf74 <pbuf_free>
      return;
 800e950:	e1a8      	b.n	800eca4 <tcp_input+0x7ec>
 800e952:	bf00      	nop
 800e954:	2001dd1c 	.word	0x2001dd1c
 800e958:	20010dd0 	.word	0x20010dd0
 800e95c:	0801a130 	.word	0x0801a130
 800e960:	0801a25c 	.word	0x0801a25c
 800e964:	0801a17c 	.word	0x0801a17c
 800e968:	2001dd00 	.word	0x2001dd00
 800e96c:	0801a288 	.word	0x0801a288
 800e970:	2001dd04 	.word	0x2001dd04
 800e974:	0801a2b4 	.word	0x0801a2b4
 800e978:	2001dcfc 	.word	0x2001dcfc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 8158 	beq.w	800ec34 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e984:	4b95      	ldr	r3, [pc, #596]	@ (800ebdc <tcp_input+0x724>)
 800e986:	2200      	movs	r2, #0
 800e988:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	891a      	ldrh	r2, [r3, #8]
 800e98e:	4b93      	ldr	r3, [pc, #588]	@ (800ebdc <tcp_input+0x724>)
 800e990:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e992:	4a92      	ldr	r2, [pc, #584]	@ (800ebdc <tcp_input+0x724>)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e998:	4b91      	ldr	r3, [pc, #580]	@ (800ebe0 <tcp_input+0x728>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a8f      	ldr	r2, [pc, #572]	@ (800ebdc <tcp_input+0x724>)
 800e99e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e9a0:	4b90      	ldr	r3, [pc, #576]	@ (800ebe4 <tcp_input+0x72c>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e9a6:	4b90      	ldr	r3, [pc, #576]	@ (800ebe8 <tcp_input+0x730>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e9ac:	4b8f      	ldr	r3, [pc, #572]	@ (800ebec <tcp_input+0x734>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e9b2:	4b8f      	ldr	r3, [pc, #572]	@ (800ebf0 <tcp_input+0x738>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	f003 0308 	and.w	r3, r3, #8
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d006      	beq.n	800e9cc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7b5b      	ldrb	r3, [r3, #13]
 800e9c2:	f043 0301 	orr.w	r3, r3, #1
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d017      	beq.n	800ea04 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e9d4:	69f8      	ldr	r0, [r7, #28]
 800e9d6:	f7ff f859 	bl	800da8c <tcp_process_refused_data>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	f113 0f0d 	cmn.w	r3, #13
 800e9e0:	d007      	beq.n	800e9f2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00c      	beq.n	800ea04 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e9ea:	4b82      	ldr	r3, [pc, #520]	@ (800ebf4 <tcp_input+0x73c>)
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d008      	beq.n	800ea04 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f040 80e4 	bne.w	800ebc4 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e9fc:	69f8      	ldr	r0, [r7, #28]
 800e9fe:	f003 fe01 	bl	8012604 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ea02:	e0df      	b.n	800ebc4 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800ea04:	4a7c      	ldr	r2, [pc, #496]	@ (800ebf8 <tcp_input+0x740>)
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ea0a:	69f8      	ldr	r0, [r7, #28]
 800ea0c:	f000 fb18 	bl	800f040 <tcp_process>
 800ea10:	4603      	mov	r3, r0
 800ea12:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ea14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea18:	f113 0f0d 	cmn.w	r3, #13
 800ea1c:	f000 80d4 	beq.w	800ebc8 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800ea20:	4b71      	ldr	r3, [pc, #452]	@ (800ebe8 <tcp_input+0x730>)
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	f003 0308 	and.w	r3, r3, #8
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d015      	beq.n	800ea58 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d008      	beq.n	800ea48 <tcp_input+0x590>
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	6912      	ldr	r2, [r2, #16]
 800ea40:	f06f 010d 	mvn.w	r1, #13
 800ea44:	4610      	mov	r0, r2
 800ea46:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	486c      	ldr	r0, [pc, #432]	@ (800ebfc <tcp_input+0x744>)
 800ea4c:	f7ff fbbc 	bl	800e1c8 <tcp_pcb_remove>
        tcp_free(pcb);
 800ea50:	69f8      	ldr	r0, [r7, #28]
 800ea52:	f7fd fe03 	bl	800c65c <tcp_free>
 800ea56:	e0da      	b.n	800ec0e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ea5c:	4b63      	ldr	r3, [pc, #396]	@ (800ebec <tcp_input+0x734>)
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d01d      	beq.n	800eaa0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ea64:	4b61      	ldr	r3, [pc, #388]	@ (800ebec <tcp_input+0x734>)
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00a      	beq.n	800ea8a <tcp_input+0x5d2>
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea7a:	69fa      	ldr	r2, [r7, #28]
 800ea7c:	6910      	ldr	r0, [r2, #16]
 800ea7e:	89fa      	ldrh	r2, [r7, #14]
 800ea80:	69f9      	ldr	r1, [r7, #28]
 800ea82:	4798      	blx	r3
 800ea84:	4603      	mov	r3, r0
 800ea86:	74fb      	strb	r3, [r7, #19]
 800ea88:	e001      	b.n	800ea8e <tcp_input+0x5d6>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ea8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea92:	f113 0f0d 	cmn.w	r3, #13
 800ea96:	f000 8099 	beq.w	800ebcc <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ea9a:	4b54      	ldr	r3, [pc, #336]	@ (800ebec <tcp_input+0x734>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eaa0:	69f8      	ldr	r0, [r7, #28]
 800eaa2:	f000 f915 	bl	800ecd0 <tcp_input_delayed_close>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f040 8091 	bne.w	800ebd0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eaae:	4b4d      	ldr	r3, [pc, #308]	@ (800ebe4 <tcp_input+0x72c>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d041      	beq.n	800eb3a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d006      	beq.n	800eacc <tcp_input+0x614>
 800eabe:	4b50      	ldr	r3, [pc, #320]	@ (800ec00 <tcp_input+0x748>)
 800eac0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800eac4:	494f      	ldr	r1, [pc, #316]	@ (800ec04 <tcp_input+0x74c>)
 800eac6:	4850      	ldr	r0, [pc, #320]	@ (800ec08 <tcp_input+0x750>)
 800eac8:	f009 f8ce 	bl	8017c68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	8b5b      	ldrh	r3, [r3, #26]
 800ead0:	f003 0310 	and.w	r3, r3, #16
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d008      	beq.n	800eaea <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ead8:	4b42      	ldr	r3, [pc, #264]	@ (800ebe4 <tcp_input+0x72c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fd fa49 	bl	800bf74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800eae2:	69f8      	ldr	r0, [r7, #28]
 800eae4:	f7fe f8a2 	bl	800cc2c <tcp_abort>
            goto aborted;
 800eae8:	e091      	b.n	800ec0e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00c      	beq.n	800eb0e <tcp_input+0x656>
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	6918      	ldr	r0, [r3, #16]
 800eafe:	4b39      	ldr	r3, [pc, #228]	@ (800ebe4 <tcp_input+0x72c>)
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	2300      	movs	r3, #0
 800eb04:	69f9      	ldr	r1, [r7, #28]
 800eb06:	47a0      	blx	r4
 800eb08:	4603      	mov	r3, r0
 800eb0a:	74fb      	strb	r3, [r7, #19]
 800eb0c:	e008      	b.n	800eb20 <tcp_input+0x668>
 800eb0e:	4b35      	ldr	r3, [pc, #212]	@ (800ebe4 <tcp_input+0x72c>)
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	2300      	movs	r3, #0
 800eb14:	69f9      	ldr	r1, [r7, #28]
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7ff f890 	bl	800dc3c <tcp_recv_null>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800eb20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb24:	f113 0f0d 	cmn.w	r3, #13
 800eb28:	d054      	beq.n	800ebd4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800eb2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d003      	beq.n	800eb3a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800eb32:	4b2c      	ldr	r3, [pc, #176]	@ (800ebe4 <tcp_input+0x72c>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800eb3a:	4b2b      	ldr	r3, [pc, #172]	@ (800ebe8 <tcp_input+0x730>)
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	f003 0320 	and.w	r3, r3, #32
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d031      	beq.n	800ebaa <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d009      	beq.n	800eb62 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb52:	7b5a      	ldrb	r2, [r3, #13]
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb58:	f042 0220 	orr.w	r2, r2, #32
 800eb5c:	b2d2      	uxtb	r2, r2
 800eb5e:	735a      	strb	r2, [r3, #13]
 800eb60:	e023      	b.n	800ebaa <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb66:	f244 4270 	movw	r2, #17520	@ 0x4470
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d005      	beq.n	800eb7a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb72:	3301      	adds	r3, #1
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00b      	beq.n	800eb9c <tcp_input+0x6e4>
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	6918      	ldr	r0, [r3, #16]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	2200      	movs	r2, #0
 800eb92:	69f9      	ldr	r1, [r7, #28]
 800eb94:	47a0      	blx	r4
 800eb96:	4603      	mov	r3, r0
 800eb98:	74fb      	strb	r3, [r7, #19]
 800eb9a:	e001      	b.n	800eba0 <tcp_input+0x6e8>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eba4:	f113 0f0d 	cmn.w	r3, #13
 800eba8:	d016      	beq.n	800ebd8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ebaa:	4b13      	ldr	r3, [pc, #76]	@ (800ebf8 <tcp_input+0x740>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ebb0:	69f8      	ldr	r0, [r7, #28]
 800ebb2:	f000 f88d 	bl	800ecd0 <tcp_input_delayed_close>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d127      	bne.n	800ec0c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ebbc:	69f8      	ldr	r0, [r7, #28]
 800ebbe:	f002 ff1b 	bl	80119f8 <tcp_output>
 800ebc2:	e024      	b.n	800ec0e <tcp_input+0x756>
        goto aborted;
 800ebc4:	bf00      	nop
 800ebc6:	e022      	b.n	800ec0e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ebc8:	bf00      	nop
 800ebca:	e020      	b.n	800ec0e <tcp_input+0x756>
              goto aborted;
 800ebcc:	bf00      	nop
 800ebce:	e01e      	b.n	800ec0e <tcp_input+0x756>
          goto aborted;
 800ebd0:	bf00      	nop
 800ebd2:	e01c      	b.n	800ec0e <tcp_input+0x756>
            goto aborted;
 800ebd4:	bf00      	nop
 800ebd6:	e01a      	b.n	800ec0e <tcp_input+0x756>
              goto aborted;
 800ebd8:	bf00      	nop
 800ebda:	e018      	b.n	800ec0e <tcp_input+0x756>
 800ebdc:	2001dd0c 	.word	0x2001dd0c
 800ebe0:	2001dd1c 	.word	0x2001dd1c
 800ebe4:	2001dd3c 	.word	0x2001dd3c
 800ebe8:	2001dd39 	.word	0x2001dd39
 800ebec:	2001dd34 	.word	0x2001dd34
 800ebf0:	2001dd38 	.word	0x2001dd38
 800ebf4:	2001dd36 	.word	0x2001dd36
 800ebf8:	2001dd40 	.word	0x2001dd40
 800ebfc:	2001dd00 	.word	0x2001dd00
 800ec00:	0801a130 	.word	0x0801a130
 800ec04:	0801a2e4 	.word	0x0801a2e4
 800ec08:	0801a17c 	.word	0x0801a17c
          goto aborted;
 800ec0c:	bf00      	nop
    tcp_input_pcb = NULL;
 800ec0e:	4b27      	ldr	r3, [pc, #156]	@ (800ecac <tcp_input+0x7f4>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ec14:	4b26      	ldr	r3, [pc, #152]	@ (800ecb0 <tcp_input+0x7f8>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ec1a:	4b26      	ldr	r3, [pc, #152]	@ (800ecb4 <tcp_input+0x7fc>)
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d03f      	beq.n	800eca2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ec22:	4b24      	ldr	r3, [pc, #144]	@ (800ecb4 <tcp_input+0x7fc>)
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fd f9a4 	bl	800bf74 <pbuf_free>
      inseg.p = NULL;
 800ec2c:	4b21      	ldr	r3, [pc, #132]	@ (800ecb4 <tcp_input+0x7fc>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ec32:	e036      	b.n	800eca2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ec34:	4b20      	ldr	r3, [pc, #128]	@ (800ecb8 <tcp_input+0x800>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	899b      	ldrh	r3, [r3, #12]
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fb fce7 	bl	800a610 <lwip_htons>
 800ec42:	4603      	mov	r3, r0
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	f003 0304 	and.w	r3, r3, #4
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d118      	bne.n	800ec80 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec4e:	4b1b      	ldr	r3, [pc, #108]	@ (800ecbc <tcp_input+0x804>)
 800ec50:	6819      	ldr	r1, [r3, #0]
 800ec52:	4b1b      	ldr	r3, [pc, #108]	@ (800ecc0 <tcp_input+0x808>)
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	4b1a      	ldr	r3, [pc, #104]	@ (800ecc4 <tcp_input+0x80c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec5e:	4b16      	ldr	r3, [pc, #88]	@ (800ecb8 <tcp_input+0x800>)
 800ec60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec62:	885b      	ldrh	r3, [r3, #2]
 800ec64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec66:	4a14      	ldr	r2, [pc, #80]	@ (800ecb8 <tcp_input+0x800>)
 800ec68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec6a:	8812      	ldrh	r2, [r2, #0]
 800ec6c:	b292      	uxth	r2, r2
 800ec6e:	9202      	str	r2, [sp, #8]
 800ec70:	9301      	str	r3, [sp, #4]
 800ec72:	4b15      	ldr	r3, [pc, #84]	@ (800ecc8 <tcp_input+0x810>)
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	4b15      	ldr	r3, [pc, #84]	@ (800eccc <tcp_input+0x814>)
 800ec78:	4602      	mov	r2, r0
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	f003 fc70 	bl	8012560 <tcp_rst>
    pbuf_free(p);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7fd f977 	bl	800bf74 <pbuf_free>
  return;
 800ec86:	e00c      	b.n	800eca2 <tcp_input+0x7ea>
    goto dropped;
 800ec88:	bf00      	nop
 800ec8a:	e006      	b.n	800ec9a <tcp_input+0x7e2>
    goto dropped;
 800ec8c:	bf00      	nop
 800ec8e:	e004      	b.n	800ec9a <tcp_input+0x7e2>
    goto dropped;
 800ec90:	bf00      	nop
 800ec92:	e002      	b.n	800ec9a <tcp_input+0x7e2>
      goto dropped;
 800ec94:	bf00      	nop
 800ec96:	e000      	b.n	800ec9a <tcp_input+0x7e2>
      goto dropped;
 800ec98:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7fd f96a 	bl	800bf74 <pbuf_free>
 800eca0:	e000      	b.n	800eca4 <tcp_input+0x7ec>
  return;
 800eca2:	bf00      	nop
}
 800eca4:	3724      	adds	r7, #36	@ 0x24
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd90      	pop	{r4, r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	2001dd40 	.word	0x2001dd40
 800ecb0:	2001dd3c 	.word	0x2001dd3c
 800ecb4:	2001dd0c 	.word	0x2001dd0c
 800ecb8:	2001dd1c 	.word	0x2001dd1c
 800ecbc:	2001dd30 	.word	0x2001dd30
 800ecc0:	2001dd36 	.word	0x2001dd36
 800ecc4:	2001dd2c 	.word	0x2001dd2c
 800ecc8:	20010de0 	.word	0x20010de0
 800eccc:	20010de4 	.word	0x20010de4

0800ecd0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <tcp_input_delayed_close+0x1c>
 800ecde:	4b17      	ldr	r3, [pc, #92]	@ (800ed3c <tcp_input_delayed_close+0x6c>)
 800ece0:	f240 225a 	movw	r2, #602	@ 0x25a
 800ece4:	4916      	ldr	r1, [pc, #88]	@ (800ed40 <tcp_input_delayed_close+0x70>)
 800ece6:	4817      	ldr	r0, [pc, #92]	@ (800ed44 <tcp_input_delayed_close+0x74>)
 800ece8:	f008 ffbe 	bl	8017c68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ecec:	4b16      	ldr	r3, [pc, #88]	@ (800ed48 <tcp_input_delayed_close+0x78>)
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	f003 0310 	and.w	r3, r3, #16
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d01c      	beq.n	800ed32 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	8b5b      	ldrh	r3, [r3, #26]
 800ecfc:	f003 0310 	and.w	r3, r3, #16
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10d      	bne.n	800ed20 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d008      	beq.n	800ed20 <tcp_input_delayed_close+0x50>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	6912      	ldr	r2, [r2, #16]
 800ed18:	f06f 010e 	mvn.w	r1, #14
 800ed1c:	4610      	mov	r0, r2
 800ed1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ed20:	6879      	ldr	r1, [r7, #4]
 800ed22:	480a      	ldr	r0, [pc, #40]	@ (800ed4c <tcp_input_delayed_close+0x7c>)
 800ed24:	f7ff fa50 	bl	800e1c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7fd fc97 	bl	800c65c <tcp_free>
    return 1;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e000      	b.n	800ed34 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ed32:	2300      	movs	r3, #0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	0801a130 	.word	0x0801a130
 800ed40:	0801a300 	.word	0x0801a300
 800ed44:	0801a17c 	.word	0x0801a17c
 800ed48:	2001dd39 	.word	0x2001dd39
 800ed4c:	2001dd00 	.word	0x2001dd00

0800ed50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ed50:	b590      	push	{r4, r7, lr}
 800ed52:	b08b      	sub	sp, #44	@ 0x2c
 800ed54:	af04      	add	r7, sp, #16
 800ed56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ed58:	4b6f      	ldr	r3, [pc, #444]	@ (800ef18 <tcp_listen_input+0x1c8>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	f003 0304 	and.w	r3, r3, #4
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f040 80d2 	bne.w	800ef0a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <tcp_listen_input+0x2a>
 800ed6c:	4b6b      	ldr	r3, [pc, #428]	@ (800ef1c <tcp_listen_input+0x1cc>)
 800ed6e:	f240 2281 	movw	r2, #641	@ 0x281
 800ed72:	496b      	ldr	r1, [pc, #428]	@ (800ef20 <tcp_listen_input+0x1d0>)
 800ed74:	486b      	ldr	r0, [pc, #428]	@ (800ef24 <tcp_listen_input+0x1d4>)
 800ed76:	f008 ff77 	bl	8017c68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ed7a:	4b67      	ldr	r3, [pc, #412]	@ (800ef18 <tcp_listen_input+0x1c8>)
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	f003 0310 	and.w	r3, r3, #16
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d019      	beq.n	800edba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed86:	4b68      	ldr	r3, [pc, #416]	@ (800ef28 <tcp_listen_input+0x1d8>)
 800ed88:	6819      	ldr	r1, [r3, #0]
 800ed8a:	4b68      	ldr	r3, [pc, #416]	@ (800ef2c <tcp_listen_input+0x1dc>)
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	4b67      	ldr	r3, [pc, #412]	@ (800ef30 <tcp_listen_input+0x1e0>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed96:	4b67      	ldr	r3, [pc, #412]	@ (800ef34 <tcp_listen_input+0x1e4>)
 800ed98:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed9a:	885b      	ldrh	r3, [r3, #2]
 800ed9c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed9e:	4a65      	ldr	r2, [pc, #404]	@ (800ef34 <tcp_listen_input+0x1e4>)
 800eda0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda2:	8812      	ldrh	r2, [r2, #0]
 800eda4:	b292      	uxth	r2, r2
 800eda6:	9202      	str	r2, [sp, #8]
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	4b63      	ldr	r3, [pc, #396]	@ (800ef38 <tcp_listen_input+0x1e8>)
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4b63      	ldr	r3, [pc, #396]	@ (800ef3c <tcp_listen_input+0x1ec>)
 800edb0:	4602      	mov	r2, r0
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f003 fbd4 	bl	8012560 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800edb8:	e0a9      	b.n	800ef0e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800edba:	4b57      	ldr	r3, [pc, #348]	@ (800ef18 <tcp_listen_input+0x1c8>)
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	f003 0302 	and.w	r3, r3, #2
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f000 80a3 	beq.w	800ef0e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	7d5b      	ldrb	r3, [r3, #21]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff f859 	bl	800de84 <tcp_alloc>
 800edd2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d111      	bne.n	800edfe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	699b      	ldr	r3, [r3, #24]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00a      	beq.n	800edf8 <tcp_listen_input+0xa8>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	699b      	ldr	r3, [r3, #24]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	6910      	ldr	r0, [r2, #16]
 800edea:	f04f 32ff 	mov.w	r2, #4294967295
 800edee:	2100      	movs	r1, #0
 800edf0:	4798      	blx	r3
 800edf2:	4603      	mov	r3, r0
 800edf4:	73bb      	strb	r3, [r7, #14]
      return;
 800edf6:	e08b      	b.n	800ef10 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800edf8:	23f0      	movs	r3, #240	@ 0xf0
 800edfa:	73bb      	strb	r3, [r7, #14]
      return;
 800edfc:	e088      	b.n	800ef10 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800edfe:	4b50      	ldr	r3, [pc, #320]	@ (800ef40 <tcp_listen_input+0x1f0>)
 800ee00:	695a      	ldr	r2, [r3, #20]
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ee06:	4b4e      	ldr	r3, [pc, #312]	@ (800ef40 <tcp_listen_input+0x1f0>)
 800ee08:	691a      	ldr	r2, [r3, #16]
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	8ada      	ldrh	r2, [r3, #22]
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ee16:	4b47      	ldr	r3, [pc, #284]	@ (800ef34 <tcp_listen_input+0x1e4>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	2203      	movs	r2, #3
 800ee26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ee28:	4b41      	ldr	r3, [pc, #260]	@ (800ef30 <tcp_listen_input+0x1e0>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	1c5a      	adds	r2, r3, #1
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ee3a:	6978      	ldr	r0, [r7, #20]
 800ee3c:	f7ff fa58 	bl	800e2f0 <tcp_next_iss>
 800ee40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	693a      	ldr	r2, [r7, #16]
 800ee46:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	693a      	ldr	r2, [r7, #16]
 800ee4c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ee5a:	4b35      	ldr	r3, [pc, #212]	@ (800ef30 <tcp_listen_input+0x1e0>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	1e5a      	subs	r2, r3, #1
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	691a      	ldr	r2, [r3, #16]
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	7a5b      	ldrb	r3, [r3, #9]
 800ee76:	f003 030c 	and.w	r3, r3, #12
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	7a1a      	ldrb	r2, [r3, #8]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ee88:	4b2e      	ldr	r3, [pc, #184]	@ (800ef44 <tcp_listen_input+0x1f4>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	60da      	str	r2, [r3, #12]
 800ee90:	4a2c      	ldr	r2, [pc, #176]	@ (800ef44 <tcp_listen_input+0x1f4>)
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	6013      	str	r3, [r2, #0]
 800ee96:	f003 fd25 	bl	80128e4 <tcp_timer_needed>
 800ee9a:	4b2b      	ldr	r3, [pc, #172]	@ (800ef48 <tcp_listen_input+0x1f8>)
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800eea0:	6978      	ldr	r0, [r7, #20]
 800eea2:	f001 fd8b 	bl	80109bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800eea6:	4b23      	ldr	r3, [pc, #140]	@ (800ef34 <tcp_listen_input+0x1e4>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	89db      	ldrh	r3, [r3, #14]
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	3304      	adds	r3, #4
 800eec8:	4618      	mov	r0, r3
 800eeca:	f007 faad 	bl	8016428 <ip4_route>
 800eece:	4601      	mov	r1, r0
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	3304      	adds	r3, #4
 800eed4:	461a      	mov	r2, r3
 800eed6:	4620      	mov	r0, r4
 800eed8:	f7ff fa30 	bl	800e33c <tcp_eff_send_mss_netif>
 800eedc:	4603      	mov	r3, r0
 800eede:	461a      	mov	r2, r3
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eee4:	2112      	movs	r1, #18
 800eee6:	6978      	ldr	r0, [r7, #20]
 800eee8:	f002 fc98 	bl	801181c <tcp_enqueue_flags>
 800eeec:	4603      	mov	r3, r0
 800eeee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d004      	beq.n	800ef02 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800eef8:	2100      	movs	r1, #0
 800eefa:	6978      	ldr	r0, [r7, #20]
 800eefc:	f7fd fdd8 	bl	800cab0 <tcp_abandon>
      return;
 800ef00:	e006      	b.n	800ef10 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ef02:	6978      	ldr	r0, [r7, #20]
 800ef04:	f002 fd78 	bl	80119f8 <tcp_output>
  return;
 800ef08:	e001      	b.n	800ef0e <tcp_listen_input+0x1be>
    return;
 800ef0a:	bf00      	nop
 800ef0c:	e000      	b.n	800ef10 <tcp_listen_input+0x1c0>
  return;
 800ef0e:	bf00      	nop
}
 800ef10:	371c      	adds	r7, #28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd90      	pop	{r4, r7, pc}
 800ef16:	bf00      	nop
 800ef18:	2001dd38 	.word	0x2001dd38
 800ef1c:	0801a130 	.word	0x0801a130
 800ef20:	0801a328 	.word	0x0801a328
 800ef24:	0801a17c 	.word	0x0801a17c
 800ef28:	2001dd30 	.word	0x2001dd30
 800ef2c:	2001dd36 	.word	0x2001dd36
 800ef30:	2001dd2c 	.word	0x2001dd2c
 800ef34:	2001dd1c 	.word	0x2001dd1c
 800ef38:	20010de0 	.word	0x20010de0
 800ef3c:	20010de4 	.word	0x20010de4
 800ef40:	20010dd0 	.word	0x20010dd0
 800ef44:	2001dd00 	.word	0x2001dd00
 800ef48:	2001dd08 	.word	0x2001dd08

0800ef4c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af04      	add	r7, sp, #16
 800ef52:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ef54:	4b2f      	ldr	r3, [pc, #188]	@ (800f014 <tcp_timewait_input+0xc8>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	f003 0304 	and.w	r3, r3, #4
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d153      	bne.n	800f008 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d106      	bne.n	800ef74 <tcp_timewait_input+0x28>
 800ef66:	4b2c      	ldr	r3, [pc, #176]	@ (800f018 <tcp_timewait_input+0xcc>)
 800ef68:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ef6c:	492b      	ldr	r1, [pc, #172]	@ (800f01c <tcp_timewait_input+0xd0>)
 800ef6e:	482c      	ldr	r0, [pc, #176]	@ (800f020 <tcp_timewait_input+0xd4>)
 800ef70:	f008 fe7a 	bl	8017c68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ef74:	4b27      	ldr	r3, [pc, #156]	@ (800f014 <tcp_timewait_input+0xc8>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d02a      	beq.n	800efd6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ef80:	4b28      	ldr	r3, [pc, #160]	@ (800f024 <tcp_timewait_input+0xd8>)
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	db2d      	blt.n	800efea <tcp_timewait_input+0x9e>
 800ef8e:	4b25      	ldr	r3, [pc, #148]	@ (800f024 <tcp_timewait_input+0xd8>)
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ef9a:	440b      	add	r3, r1
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	dc23      	bgt.n	800efea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efa2:	4b21      	ldr	r3, [pc, #132]	@ (800f028 <tcp_timewait_input+0xdc>)
 800efa4:	6819      	ldr	r1, [r3, #0]
 800efa6:	4b21      	ldr	r3, [pc, #132]	@ (800f02c <tcp_timewait_input+0xe0>)
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	461a      	mov	r2, r3
 800efac:	4b1d      	ldr	r3, [pc, #116]	@ (800f024 <tcp_timewait_input+0xd8>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efb2:	4b1f      	ldr	r3, [pc, #124]	@ (800f030 <tcp_timewait_input+0xe4>)
 800efb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efb6:	885b      	ldrh	r3, [r3, #2]
 800efb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efba:	4a1d      	ldr	r2, [pc, #116]	@ (800f030 <tcp_timewait_input+0xe4>)
 800efbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efbe:	8812      	ldrh	r2, [r2, #0]
 800efc0:	b292      	uxth	r2, r2
 800efc2:	9202      	str	r2, [sp, #8]
 800efc4:	9301      	str	r3, [sp, #4]
 800efc6:	4b1b      	ldr	r3, [pc, #108]	@ (800f034 <tcp_timewait_input+0xe8>)
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	4b1b      	ldr	r3, [pc, #108]	@ (800f038 <tcp_timewait_input+0xec>)
 800efcc:	4602      	mov	r2, r0
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f003 fac6 	bl	8012560 <tcp_rst>
      return;
 800efd4:	e01b      	b.n	800f00e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800efd6:	4b0f      	ldr	r3, [pc, #60]	@ (800f014 <tcp_timewait_input+0xc8>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d003      	beq.n	800efea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800efe2:	4b16      	ldr	r3, [pc, #88]	@ (800f03c <tcp_timewait_input+0xf0>)
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800efea:	4b10      	ldr	r3, [pc, #64]	@ (800f02c <tcp_timewait_input+0xe0>)
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00c      	beq.n	800f00c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	8b5b      	ldrh	r3, [r3, #26]
 800eff6:	f043 0302 	orr.w	r3, r3, #2
 800effa:	b29a      	uxth	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f002 fcf9 	bl	80119f8 <tcp_output>
  }
  return;
 800f006:	e001      	b.n	800f00c <tcp_timewait_input+0xc0>
    return;
 800f008:	bf00      	nop
 800f00a:	e000      	b.n	800f00e <tcp_timewait_input+0xc2>
  return;
 800f00c:	bf00      	nop
}
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	2001dd38 	.word	0x2001dd38
 800f018:	0801a130 	.word	0x0801a130
 800f01c:	0801a348 	.word	0x0801a348
 800f020:	0801a17c 	.word	0x0801a17c
 800f024:	2001dd2c 	.word	0x2001dd2c
 800f028:	2001dd30 	.word	0x2001dd30
 800f02c:	2001dd36 	.word	0x2001dd36
 800f030:	2001dd1c 	.word	0x2001dd1c
 800f034:	20010de0 	.word	0x20010de0
 800f038:	20010de4 	.word	0x20010de4
 800f03c:	2001dcf4 	.word	0x2001dcf4

0800f040 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f040:	b590      	push	{r4, r7, lr}
 800f042:	b08d      	sub	sp, #52	@ 0x34
 800f044:	af04      	add	r7, sp, #16
 800f046:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f048:	2300      	movs	r3, #0
 800f04a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d106      	bne.n	800f064 <tcp_process+0x24>
 800f056:	4b9d      	ldr	r3, [pc, #628]	@ (800f2cc <tcp_process+0x28c>)
 800f058:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f05c:	499c      	ldr	r1, [pc, #624]	@ (800f2d0 <tcp_process+0x290>)
 800f05e:	489d      	ldr	r0, [pc, #628]	@ (800f2d4 <tcp_process+0x294>)
 800f060:	f008 fe02 	bl	8017c68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f064:	4b9c      	ldr	r3, [pc, #624]	@ (800f2d8 <tcp_process+0x298>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	f003 0304 	and.w	r3, r3, #4
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d04e      	beq.n	800f10e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	7d1b      	ldrb	r3, [r3, #20]
 800f074:	2b02      	cmp	r3, #2
 800f076:	d108      	bne.n	800f08a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f07c:	4b97      	ldr	r3, [pc, #604]	@ (800f2dc <tcp_process+0x29c>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	429a      	cmp	r2, r3
 800f082:	d123      	bne.n	800f0cc <tcp_process+0x8c>
        acceptable = 1;
 800f084:	2301      	movs	r3, #1
 800f086:	76fb      	strb	r3, [r7, #27]
 800f088:	e020      	b.n	800f0cc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f08e:	4b94      	ldr	r3, [pc, #592]	@ (800f2e0 <tcp_process+0x2a0>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	429a      	cmp	r2, r3
 800f094:	d102      	bne.n	800f09c <tcp_process+0x5c>
        acceptable = 1;
 800f096:	2301      	movs	r3, #1
 800f098:	76fb      	strb	r3, [r7, #27]
 800f09a:	e017      	b.n	800f0cc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f09c:	4b90      	ldr	r3, [pc, #576]	@ (800f2e0 <tcp_process+0x2a0>)
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	db10      	blt.n	800f0cc <tcp_process+0x8c>
 800f0aa:	4b8d      	ldr	r3, [pc, #564]	@ (800f2e0 <tcp_process+0x2a0>)
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f0b6:	440b      	add	r3, r1
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	dc06      	bgt.n	800f0cc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8b5b      	ldrh	r3, [r3, #26]
 800f0c2:	f043 0302 	orr.w	r3, r3, #2
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f0cc:	7efb      	ldrb	r3, [r7, #27]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d01b      	beq.n	800f10a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	7d1b      	ldrb	r3, [r3, #20]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <tcp_process+0xa8>
 800f0da:	4b7c      	ldr	r3, [pc, #496]	@ (800f2cc <tcp_process+0x28c>)
 800f0dc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f0e0:	4980      	ldr	r1, [pc, #512]	@ (800f2e4 <tcp_process+0x2a4>)
 800f0e2:	487c      	ldr	r0, [pc, #496]	@ (800f2d4 <tcp_process+0x294>)
 800f0e4:	f008 fdc0 	bl	8017c68 <iprintf>
      recv_flags |= TF_RESET;
 800f0e8:	4b7f      	ldr	r3, [pc, #508]	@ (800f2e8 <tcp_process+0x2a8>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f043 0308 	orr.w	r3, r3, #8
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	4b7d      	ldr	r3, [pc, #500]	@ (800f2e8 <tcp_process+0x2a8>)
 800f0f4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	8b5b      	ldrh	r3, [r3, #26]
 800f0fa:	f023 0301 	bic.w	r3, r3, #1
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f104:	f06f 030d 	mvn.w	r3, #13
 800f108:	e37a      	b.n	800f800 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	e378      	b.n	800f800 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f10e:	4b72      	ldr	r3, [pc, #456]	@ (800f2d8 <tcp_process+0x298>)
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b00      	cmp	r3, #0
 800f118:	d010      	beq.n	800f13c <tcp_process+0xfc>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7d1b      	ldrb	r3, [r3, #20]
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d00c      	beq.n	800f13c <tcp_process+0xfc>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7d1b      	ldrb	r3, [r3, #20]
 800f126:	2b03      	cmp	r3, #3
 800f128:	d008      	beq.n	800f13c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8b5b      	ldrh	r3, [r3, #26]
 800f12e:	f043 0302 	orr.w	r3, r3, #2
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	e361      	b.n	800f800 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	8b5b      	ldrh	r3, [r3, #26]
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	2b00      	cmp	r3, #0
 800f146:	d103      	bne.n	800f150 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f148:	4b68      	ldr	r3, [pc, #416]	@ (800f2ec <tcp_process+0x2ac>)
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f001 fc2b 	bl	80109bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	7d1b      	ldrb	r3, [r3, #20]
 800f16a:	3b02      	subs	r3, #2
 800f16c:	2b07      	cmp	r3, #7
 800f16e:	f200 8337 	bhi.w	800f7e0 <tcp_process+0x7a0>
 800f172:	a201      	add	r2, pc, #4	@ (adr r2, 800f178 <tcp_process+0x138>)
 800f174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f178:	0800f199 	.word	0x0800f199
 800f17c:	0800f3c9 	.word	0x0800f3c9
 800f180:	0800f541 	.word	0x0800f541
 800f184:	0800f56b 	.word	0x0800f56b
 800f188:	0800f68f 	.word	0x0800f68f
 800f18c:	0800f541 	.word	0x0800f541
 800f190:	0800f71b 	.word	0x0800f71b
 800f194:	0800f7ab 	.word	0x0800f7ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f198:	4b4f      	ldr	r3, [pc, #316]	@ (800f2d8 <tcp_process+0x298>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	f003 0310 	and.w	r3, r3, #16
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 80e4 	beq.w	800f36e <tcp_process+0x32e>
 800f1a6:	4b4c      	ldr	r3, [pc, #304]	@ (800f2d8 <tcp_process+0x298>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 80dd 	beq.w	800f36e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1b8:	1c5a      	adds	r2, r3, #1
 800f1ba:	4b48      	ldr	r3, [pc, #288]	@ (800f2dc <tcp_process+0x29c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	f040 80d5 	bne.w	800f36e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f1c4:	4b46      	ldr	r3, [pc, #280]	@ (800f2e0 <tcp_process+0x2a0>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	1c5a      	adds	r2, r3, #1
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f1d6:	4b41      	ldr	r3, [pc, #260]	@ (800f2dc <tcp_process+0x29c>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f1de:	4b44      	ldr	r3, [pc, #272]	@ (800f2f0 <tcp_process+0x2b0>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	89db      	ldrh	r3, [r3, #14]
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f1f8:	4b39      	ldr	r3, [pc, #228]	@ (800f2e0 <tcp_process+0x2a0>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	1e5a      	subs	r2, r3, #1
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2204      	movs	r2, #4
 800f206:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3304      	adds	r3, #4
 800f210:	4618      	mov	r0, r3
 800f212:	f007 f909 	bl	8016428 <ip4_route>
 800f216:	4601      	mov	r1, r0
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3304      	adds	r3, #4
 800f21c:	461a      	mov	r2, r3
 800f21e:	4620      	mov	r0, r4
 800f220:	f7ff f88c 	bl	800e33c <tcp_eff_send_mss_netif>
 800f224:	4603      	mov	r3, r0
 800f226:	461a      	mov	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f230:	009a      	lsls	r2, r3, #2
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f23c:	428b      	cmp	r3, r1
 800f23e:	bf38      	it	cc
 800f240:	460b      	movcc	r3, r1
 800f242:	429a      	cmp	r2, r3
 800f244:	d204      	bcs.n	800f250 <tcp_process+0x210>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	e00d      	b.n	800f26c <tcp_process+0x22c>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d904      	bls.n	800f268 <tcp_process+0x228>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	b29b      	uxth	r3, r3
 800f266:	e001      	b.n	800f26c <tcp_process+0x22c>
 800f268:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d106      	bne.n	800f28a <tcp_process+0x24a>
 800f27c:	4b13      	ldr	r3, [pc, #76]	@ (800f2cc <tcp_process+0x28c>)
 800f27e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f282:	491c      	ldr	r1, [pc, #112]	@ (800f2f4 <tcp_process+0x2b4>)
 800f284:	4813      	ldr	r0, [pc, #76]	@ (800f2d4 <tcp_process+0x294>)
 800f286:	f008 fcef 	bl	8017c68 <iprintf>
        --pcb->snd_queuelen;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f290:	3b01      	subs	r3, #1
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f29e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d12a      	bne.n	800f2fc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2aa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d106      	bne.n	800f2c0 <tcp_process+0x280>
 800f2b2:	4b06      	ldr	r3, [pc, #24]	@ (800f2cc <tcp_process+0x28c>)
 800f2b4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f2b8:	490f      	ldr	r1, [pc, #60]	@ (800f2f8 <tcp_process+0x2b8>)
 800f2ba:	4806      	ldr	r0, [pc, #24]	@ (800f2d4 <tcp_process+0x294>)
 800f2bc:	f008 fcd4 	bl	8017c68 <iprintf>
          pcb->unsent = rseg->next;
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f2c8:	e01c      	b.n	800f304 <tcp_process+0x2c4>
 800f2ca:	bf00      	nop
 800f2cc:	0801a130 	.word	0x0801a130
 800f2d0:	0801a368 	.word	0x0801a368
 800f2d4:	0801a17c 	.word	0x0801a17c
 800f2d8:	2001dd38 	.word	0x2001dd38
 800f2dc:	2001dd30 	.word	0x2001dd30
 800f2e0:	2001dd2c 	.word	0x2001dd2c
 800f2e4:	0801a384 	.word	0x0801a384
 800f2e8:	2001dd39 	.word	0x2001dd39
 800f2ec:	2001dcf4 	.word	0x2001dcf4
 800f2f0:	2001dd1c 	.word	0x2001dd1c
 800f2f4:	0801a3a4 	.word	0x0801a3a4
 800f2f8:	0801a3bc 	.word	0x0801a3bc
        } else {
          pcb->unacked = rseg->next;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f304:	69f8      	ldr	r0, [r7, #28]
 800f306:	f7fe fc54 	bl	800dbb2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d104      	bne.n	800f31c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f318:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f31a:	e006      	b.n	800f32a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00a      	beq.n	800f34a <tcp_process+0x30a>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	6910      	ldr	r0, [r2, #16]
 800f33e:	2200      	movs	r2, #0
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	4798      	blx	r3
 800f344:	4603      	mov	r3, r0
 800f346:	76bb      	strb	r3, [r7, #26]
 800f348:	e001      	b.n	800f34e <tcp_process+0x30e>
 800f34a:	2300      	movs	r3, #0
 800f34c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f34e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f352:	f113 0f0d 	cmn.w	r3, #13
 800f356:	d102      	bne.n	800f35e <tcp_process+0x31e>
          return ERR_ABRT;
 800f358:	f06f 030c 	mvn.w	r3, #12
 800f35c:	e250      	b.n	800f800 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	8b5b      	ldrh	r3, [r3, #26]
 800f362:	f043 0302 	orr.w	r3, r3, #2
 800f366:	b29a      	uxth	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f36c:	e23a      	b.n	800f7e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f36e:	4b98      	ldr	r3, [pc, #608]	@ (800f5d0 <tcp_process+0x590>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	f003 0310 	and.w	r3, r3, #16
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 8234 	beq.w	800f7e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f37c:	4b95      	ldr	r3, [pc, #596]	@ (800f5d4 <tcp_process+0x594>)
 800f37e:	6819      	ldr	r1, [r3, #0]
 800f380:	4b95      	ldr	r3, [pc, #596]	@ (800f5d8 <tcp_process+0x598>)
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	461a      	mov	r2, r3
 800f386:	4b95      	ldr	r3, [pc, #596]	@ (800f5dc <tcp_process+0x59c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38c:	4b94      	ldr	r3, [pc, #592]	@ (800f5e0 <tcp_process+0x5a0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f390:	885b      	ldrh	r3, [r3, #2]
 800f392:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f394:	4a92      	ldr	r2, [pc, #584]	@ (800f5e0 <tcp_process+0x5a0>)
 800f396:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f398:	8812      	ldrh	r2, [r2, #0]
 800f39a:	b292      	uxth	r2, r2
 800f39c:	9202      	str	r2, [sp, #8]
 800f39e:	9301      	str	r3, [sp, #4]
 800f3a0:	4b90      	ldr	r3, [pc, #576]	@ (800f5e4 <tcp_process+0x5a4>)
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	4b90      	ldr	r3, [pc, #576]	@ (800f5e8 <tcp_process+0x5a8>)
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f003 f8d9 	bl	8012560 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f3b4:	2b05      	cmp	r3, #5
 800f3b6:	f200 8215 	bhi.w	800f7e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f002 fea5 	bl	8012110 <tcp_rexmit_rto>
      break;
 800f3c6:	e20d      	b.n	800f7e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f3c8:	4b81      	ldr	r3, [pc, #516]	@ (800f5d0 <tcp_process+0x590>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	f003 0310 	and.w	r3, r3, #16
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f000 80a1 	beq.w	800f518 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3d6:	4b7f      	ldr	r3, [pc, #508]	@ (800f5d4 <tcp_process+0x594>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	db7e      	blt.n	800f4e4 <tcp_process+0x4a4>
 800f3e6:	4b7b      	ldr	r3, [pc, #492]	@ (800f5d4 <tcp_process+0x594>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3ee:	1ad3      	subs	r3, r2, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	dc77      	bgt.n	800f4e4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2204      	movs	r2, #4
 800f3f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d102      	bne.n	800f408 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f402:	23fa      	movs	r3, #250	@ 0xfa
 800f404:	76bb      	strb	r3, [r7, #26]
 800f406:	e01d      	b.n	800f444 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f40c:	699b      	ldr	r3, [r3, #24]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <tcp_process+0x3e0>
 800f412:	4b76      	ldr	r3, [pc, #472]	@ (800f5ec <tcp_process+0x5ac>)
 800f414:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f418:	4975      	ldr	r1, [pc, #468]	@ (800f5f0 <tcp_process+0x5b0>)
 800f41a:	4876      	ldr	r0, [pc, #472]	@ (800f5f4 <tcp_process+0x5b4>)
 800f41c:	f008 fc24 	bl	8017c68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00a      	beq.n	800f440 <tcp_process+0x400>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f42e:	699b      	ldr	r3, [r3, #24]
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	6910      	ldr	r0, [r2, #16]
 800f434:	2200      	movs	r2, #0
 800f436:	6879      	ldr	r1, [r7, #4]
 800f438:	4798      	blx	r3
 800f43a:	4603      	mov	r3, r0
 800f43c:	76bb      	strb	r3, [r7, #26]
 800f43e:	e001      	b.n	800f444 <tcp_process+0x404>
 800f440:	23f0      	movs	r3, #240	@ 0xf0
 800f442:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f444:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00a      	beq.n	800f462 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f44c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f450:	f113 0f0d 	cmn.w	r3, #13
 800f454:	d002      	beq.n	800f45c <tcp_process+0x41c>
              tcp_abort(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fd fbe8 	bl	800cc2c <tcp_abort>
            }
            return ERR_ABRT;
 800f45c:	f06f 030c 	mvn.w	r3, #12
 800f460:	e1ce      	b.n	800f800 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fae0 	bl	800fa28 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f468:	4b63      	ldr	r3, [pc, #396]	@ (800f5f8 <tcp_process+0x5b8>)
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d005      	beq.n	800f47c <tcp_process+0x43c>
            recv_acked--;
 800f470:	4b61      	ldr	r3, [pc, #388]	@ (800f5f8 <tcp_process+0x5b8>)
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	3b01      	subs	r3, #1
 800f476:	b29a      	uxth	r2, r3
 800f478:	4b5f      	ldr	r3, [pc, #380]	@ (800f5f8 <tcp_process+0x5b8>)
 800f47a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f480:	009a      	lsls	r2, r3, #2
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f486:	005b      	lsls	r3, r3, #1
 800f488:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f48c:	428b      	cmp	r3, r1
 800f48e:	bf38      	it	cc
 800f490:	460b      	movcc	r3, r1
 800f492:	429a      	cmp	r2, r3
 800f494:	d204      	bcs.n	800f4a0 <tcp_process+0x460>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	e00d      	b.n	800f4bc <tcp_process+0x47c>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d904      	bls.n	800f4b8 <tcp_process+0x478>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f4b2:	005b      	lsls	r3, r3, #1
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	e001      	b.n	800f4bc <tcp_process+0x47c>
 800f4b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f4c2:	4b4e      	ldr	r3, [pc, #312]	@ (800f5fc <tcp_process+0x5bc>)
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	f003 0320 	and.w	r3, r3, #32
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d037      	beq.n	800f53e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	8b5b      	ldrh	r3, [r3, #26]
 800f4d2:	f043 0302 	orr.w	r3, r3, #2
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2207      	movs	r2, #7
 800f4e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f4e2:	e02c      	b.n	800f53e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4e4:	4b3b      	ldr	r3, [pc, #236]	@ (800f5d4 <tcp_process+0x594>)
 800f4e6:	6819      	ldr	r1, [r3, #0]
 800f4e8:	4b3b      	ldr	r3, [pc, #236]	@ (800f5d8 <tcp_process+0x598>)
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4b3b      	ldr	r3, [pc, #236]	@ (800f5dc <tcp_process+0x59c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4f4:	4b3a      	ldr	r3, [pc, #232]	@ (800f5e0 <tcp_process+0x5a0>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4f8:	885b      	ldrh	r3, [r3, #2]
 800f4fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4fc:	4a38      	ldr	r2, [pc, #224]	@ (800f5e0 <tcp_process+0x5a0>)
 800f4fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f500:	8812      	ldrh	r2, [r2, #0]
 800f502:	b292      	uxth	r2, r2
 800f504:	9202      	str	r2, [sp, #8]
 800f506:	9301      	str	r3, [sp, #4]
 800f508:	4b36      	ldr	r3, [pc, #216]	@ (800f5e4 <tcp_process+0x5a4>)
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	4b36      	ldr	r3, [pc, #216]	@ (800f5e8 <tcp_process+0x5a8>)
 800f50e:	4602      	mov	r2, r0
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f003 f825 	bl	8012560 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f516:	e167      	b.n	800f7e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f518:	4b2d      	ldr	r3, [pc, #180]	@ (800f5d0 <tcp_process+0x590>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	f003 0302 	and.w	r3, r3, #2
 800f520:	2b00      	cmp	r3, #0
 800f522:	f000 8161 	beq.w	800f7e8 <tcp_process+0x7a8>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f52a:	1e5a      	subs	r2, r3, #1
 800f52c:	4b2b      	ldr	r3, [pc, #172]	@ (800f5dc <tcp_process+0x59c>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	429a      	cmp	r2, r3
 800f532:	f040 8159 	bne.w	800f7e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f002 fe0c 	bl	8012154 <tcp_rexmit>
      break;
 800f53c:	e154      	b.n	800f7e8 <tcp_process+0x7a8>
 800f53e:	e153      	b.n	800f7e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fa71 	bl	800fa28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f546:	4b2d      	ldr	r3, [pc, #180]	@ (800f5fc <tcp_process+0x5bc>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 814c 	beq.w	800f7ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	8b5b      	ldrh	r3, [r3, #26]
 800f558:	f043 0302 	orr.w	r3, r3, #2
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2207      	movs	r2, #7
 800f566:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f568:	e140      	b.n	800f7ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fa5c 	bl	800fa28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f570:	4b22      	ldr	r3, [pc, #136]	@ (800f5fc <tcp_process+0x5bc>)
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	f003 0320 	and.w	r3, r3, #32
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d071      	beq.n	800f660 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f57c:	4b14      	ldr	r3, [pc, #80]	@ (800f5d0 <tcp_process+0x590>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	f003 0310 	and.w	r3, r3, #16
 800f584:	2b00      	cmp	r3, #0
 800f586:	d060      	beq.n	800f64a <tcp_process+0x60a>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f58c:	4b11      	ldr	r3, [pc, #68]	@ (800f5d4 <tcp_process+0x594>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	429a      	cmp	r2, r3
 800f592:	d15a      	bne.n	800f64a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d156      	bne.n	800f64a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	8b5b      	ldrh	r3, [r3, #26]
 800f5a0:	f043 0302 	orr.w	r3, r3, #2
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7fe fdbc 	bl	800e128 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f5b0:	4b13      	ldr	r3, [pc, #76]	@ (800f600 <tcp_process+0x5c0>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d105      	bne.n	800f5c6 <tcp_process+0x586>
 800f5ba:	4b11      	ldr	r3, [pc, #68]	@ (800f600 <tcp_process+0x5c0>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800f600 <tcp_process+0x5c0>)
 800f5c2:	6013      	str	r3, [r2, #0]
 800f5c4:	e02e      	b.n	800f624 <tcp_process+0x5e4>
 800f5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800f600 <tcp_process+0x5c0>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	617b      	str	r3, [r7, #20]
 800f5cc:	e027      	b.n	800f61e <tcp_process+0x5de>
 800f5ce:	bf00      	nop
 800f5d0:	2001dd38 	.word	0x2001dd38
 800f5d4:	2001dd30 	.word	0x2001dd30
 800f5d8:	2001dd36 	.word	0x2001dd36
 800f5dc:	2001dd2c 	.word	0x2001dd2c
 800f5e0:	2001dd1c 	.word	0x2001dd1c
 800f5e4:	20010de0 	.word	0x20010de0
 800f5e8:	20010de4 	.word	0x20010de4
 800f5ec:	0801a130 	.word	0x0801a130
 800f5f0:	0801a3d0 	.word	0x0801a3d0
 800f5f4:	0801a17c 	.word	0x0801a17c
 800f5f8:	2001dd34 	.word	0x2001dd34
 800f5fc:	2001dd39 	.word	0x2001dd39
 800f600:	2001dd00 	.word	0x2001dd00
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d104      	bne.n	800f618 <tcp_process+0x5d8>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68da      	ldr	r2, [r3, #12]
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	60da      	str	r2, [r3, #12]
 800f616:	e005      	b.n	800f624 <tcp_process+0x5e4>
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	617b      	str	r3, [r7, #20]
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1ef      	bne.n	800f604 <tcp_process+0x5c4>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	60da      	str	r2, [r3, #12]
 800f62a:	4b77      	ldr	r3, [pc, #476]	@ (800f808 <tcp_process+0x7c8>)
 800f62c:	2201      	movs	r2, #1
 800f62e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	220a      	movs	r2, #10
 800f634:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f636:	4b75      	ldr	r3, [pc, #468]	@ (800f80c <tcp_process+0x7cc>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	60da      	str	r2, [r3, #12]
 800f63e:	4a73      	ldr	r2, [pc, #460]	@ (800f80c <tcp_process+0x7cc>)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	f003 f94e 	bl	80128e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f648:	e0d2      	b.n	800f7f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	8b5b      	ldrh	r3, [r3, #26]
 800f64e:	f043 0302 	orr.w	r3, r3, #2
 800f652:	b29a      	uxth	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2208      	movs	r2, #8
 800f65c:	751a      	strb	r2, [r3, #20]
      break;
 800f65e:	e0c7      	b.n	800f7f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f660:	4b6b      	ldr	r3, [pc, #428]	@ (800f810 <tcp_process+0x7d0>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f003 0310 	and.w	r3, r3, #16
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f000 80c1 	beq.w	800f7f0 <tcp_process+0x7b0>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f672:	4b68      	ldr	r3, [pc, #416]	@ (800f814 <tcp_process+0x7d4>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	429a      	cmp	r2, r3
 800f678:	f040 80ba 	bne.w	800f7f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f680:	2b00      	cmp	r3, #0
 800f682:	f040 80b5 	bne.w	800f7f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2206      	movs	r2, #6
 800f68a:	751a      	strb	r2, [r3, #20]
      break;
 800f68c:	e0b0      	b.n	800f7f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 f9ca 	bl	800fa28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f694:	4b60      	ldr	r3, [pc, #384]	@ (800f818 <tcp_process+0x7d8>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	f003 0320 	and.w	r3, r3, #32
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 80a9 	beq.w	800f7f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	8b5b      	ldrh	r3, [r3, #26]
 800f6a6:	f043 0302 	orr.w	r3, r3, #2
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7fe fd39 	bl	800e128 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f6b6:	4b59      	ldr	r3, [pc, #356]	@ (800f81c <tcp_process+0x7dc>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d105      	bne.n	800f6cc <tcp_process+0x68c>
 800f6c0:	4b56      	ldr	r3, [pc, #344]	@ (800f81c <tcp_process+0x7dc>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	4a55      	ldr	r2, [pc, #340]	@ (800f81c <tcp_process+0x7dc>)
 800f6c8:	6013      	str	r3, [r2, #0]
 800f6ca:	e013      	b.n	800f6f4 <tcp_process+0x6b4>
 800f6cc:	4b53      	ldr	r3, [pc, #332]	@ (800f81c <tcp_process+0x7dc>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	613b      	str	r3, [r7, #16]
 800f6d2:	e00c      	b.n	800f6ee <tcp_process+0x6ae>
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d104      	bne.n	800f6e8 <tcp_process+0x6a8>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	68da      	ldr	r2, [r3, #12]
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	60da      	str	r2, [r3, #12]
 800f6e6:	e005      	b.n	800f6f4 <tcp_process+0x6b4>
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	613b      	str	r3, [r7, #16]
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d1ef      	bne.n	800f6d4 <tcp_process+0x694>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	60da      	str	r2, [r3, #12]
 800f6fa:	4b43      	ldr	r3, [pc, #268]	@ (800f808 <tcp_process+0x7c8>)
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	220a      	movs	r2, #10
 800f704:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f706:	4b41      	ldr	r3, [pc, #260]	@ (800f80c <tcp_process+0x7cc>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	60da      	str	r2, [r3, #12]
 800f70e:	4a3f      	ldr	r2, [pc, #252]	@ (800f80c <tcp_process+0x7cc>)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6013      	str	r3, [r2, #0]
 800f714:	f003 f8e6 	bl	80128e4 <tcp_timer_needed>
      }
      break;
 800f718:	e06c      	b.n	800f7f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f984 	bl	800fa28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f720:	4b3b      	ldr	r3, [pc, #236]	@ (800f810 <tcp_process+0x7d0>)
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	f003 0310 	and.w	r3, r3, #16
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d065      	beq.n	800f7f8 <tcp_process+0x7b8>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f730:	4b38      	ldr	r3, [pc, #224]	@ (800f814 <tcp_process+0x7d4>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d15f      	bne.n	800f7f8 <tcp_process+0x7b8>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d15b      	bne.n	800f7f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7fe fcf1 	bl	800e128 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f746:	4b35      	ldr	r3, [pc, #212]	@ (800f81c <tcp_process+0x7dc>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d105      	bne.n	800f75c <tcp_process+0x71c>
 800f750:	4b32      	ldr	r3, [pc, #200]	@ (800f81c <tcp_process+0x7dc>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	4a31      	ldr	r2, [pc, #196]	@ (800f81c <tcp_process+0x7dc>)
 800f758:	6013      	str	r3, [r2, #0]
 800f75a:	e013      	b.n	800f784 <tcp_process+0x744>
 800f75c:	4b2f      	ldr	r3, [pc, #188]	@ (800f81c <tcp_process+0x7dc>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e00c      	b.n	800f77e <tcp_process+0x73e>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d104      	bne.n	800f778 <tcp_process+0x738>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	68da      	ldr	r2, [r3, #12]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	60da      	str	r2, [r3, #12]
 800f776:	e005      	b.n	800f784 <tcp_process+0x744>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	60fb      	str	r3, [r7, #12]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1ef      	bne.n	800f764 <tcp_process+0x724>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	60da      	str	r2, [r3, #12]
 800f78a:	4b1f      	ldr	r3, [pc, #124]	@ (800f808 <tcp_process+0x7c8>)
 800f78c:	2201      	movs	r2, #1
 800f78e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	220a      	movs	r2, #10
 800f794:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f796:	4b1d      	ldr	r3, [pc, #116]	@ (800f80c <tcp_process+0x7cc>)
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	60da      	str	r2, [r3, #12]
 800f79e:	4a1b      	ldr	r2, [pc, #108]	@ (800f80c <tcp_process+0x7cc>)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6013      	str	r3, [r2, #0]
 800f7a4:	f003 f89e 	bl	80128e4 <tcp_timer_needed>
      }
      break;
 800f7a8:	e026      	b.n	800f7f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 f93c 	bl	800fa28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7b0:	4b17      	ldr	r3, [pc, #92]	@ (800f810 <tcp_process+0x7d0>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f003 0310 	and.w	r3, r3, #16
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01f      	beq.n	800f7fc <tcp_process+0x7bc>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f7c0:	4b14      	ldr	r3, [pc, #80]	@ (800f814 <tcp_process+0x7d4>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d119      	bne.n	800f7fc <tcp_process+0x7bc>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d115      	bne.n	800f7fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f7d0:	4b11      	ldr	r3, [pc, #68]	@ (800f818 <tcp_process+0x7d8>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	f043 0310 	orr.w	r3, r3, #16
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	4b0f      	ldr	r3, [pc, #60]	@ (800f818 <tcp_process+0x7d8>)
 800f7dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f7de:	e00d      	b.n	800f7fc <tcp_process+0x7bc>
    default:
      break;
 800f7e0:	bf00      	nop
 800f7e2:	e00c      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7e4:	bf00      	nop
 800f7e6:	e00a      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7e8:	bf00      	nop
 800f7ea:	e008      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7ec:	bf00      	nop
 800f7ee:	e006      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7f0:	bf00      	nop
 800f7f2:	e004      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7f4:	bf00      	nop
 800f7f6:	e002      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7f8:	bf00      	nop
 800f7fa:	e000      	b.n	800f7fe <tcp_process+0x7be>
      break;
 800f7fc:	bf00      	nop
  }
  return ERR_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3724      	adds	r7, #36	@ 0x24
 800f804:	46bd      	mov	sp, r7
 800f806:	bd90      	pop	{r4, r7, pc}
 800f808:	2001dd08 	.word	0x2001dd08
 800f80c:	2001dd04 	.word	0x2001dd04
 800f810:	2001dd38 	.word	0x2001dd38
 800f814:	2001dd30 	.word	0x2001dd30
 800f818:	2001dd39 	.word	0x2001dd39
 800f81c:	2001dd00 	.word	0x2001dd00

0800f820 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f820:	b590      	push	{r4, r7, lr}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d106      	bne.n	800f83e <tcp_oos_insert_segment+0x1e>
 800f830:	4b3b      	ldr	r3, [pc, #236]	@ (800f920 <tcp_oos_insert_segment+0x100>)
 800f832:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f836:	493b      	ldr	r1, [pc, #236]	@ (800f924 <tcp_oos_insert_segment+0x104>)
 800f838:	483b      	ldr	r0, [pc, #236]	@ (800f928 <tcp_oos_insert_segment+0x108>)
 800f83a:	f008 fa15 	bl	8017c68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	899b      	ldrh	r3, [r3, #12]
 800f844:	b29b      	uxth	r3, r3
 800f846:	4618      	mov	r0, r3
 800f848:	f7fa fee2 	bl	800a610 <lwip_htons>
 800f84c:	4603      	mov	r3, r0
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d028      	beq.n	800f8aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f858:	6838      	ldr	r0, [r7, #0]
 800f85a:	f7fe f995 	bl	800db88 <tcp_segs_free>
    next = NULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	603b      	str	r3, [r7, #0]
 800f862:	e056      	b.n	800f912 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	899b      	ldrh	r3, [r3, #12]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7fa fecf 	bl	800a610 <lwip_htons>
 800f872:	4603      	mov	r3, r0
 800f874:	b2db      	uxtb	r3, r3
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00d      	beq.n	800f89a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	899b      	ldrh	r3, [r3, #12]
 800f884:	b29c      	uxth	r4, r3
 800f886:	2001      	movs	r0, #1
 800f888:	f7fa fec2 	bl	800a610 <lwip_htons>
 800f88c:	4603      	mov	r3, r0
 800f88e:	461a      	mov	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	4322      	orrs	r2, r4
 800f896:	b292      	uxth	r2, r2
 800f898:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f7fe f984 	bl	800dbb2 <tcp_seg_free>
    while (next &&
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00e      	beq.n	800f8ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	891b      	ldrh	r3, [r3, #8]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	4b1d      	ldr	r3, [pc, #116]	@ (800f92c <tcp_oos_insert_segment+0x10c>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	441a      	add	r2, r3
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	8909      	ldrh	r1, [r1, #8]
 800f8c6:	440b      	add	r3, r1
 800f8c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	daca      	bge.n	800f864 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d01e      	beq.n	800f912 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	891b      	ldrh	r3, [r3, #8]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b14      	ldr	r3, [pc, #80]	@ (800f92c <tcp_oos_insert_segment+0x10c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	441a      	add	r2, r3
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	dd12      	ble.n	800f912 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	4b0d      	ldr	r3, [pc, #52]	@ (800f92c <tcp_oos_insert_segment+0x10c>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	1ad3      	subs	r3, r2, r3
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	685a      	ldr	r2, [r3, #4]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	891b      	ldrh	r3, [r3, #8]
 800f90a:	4619      	mov	r1, r3
 800f90c:	4610      	mov	r0, r2
 800f90e:	f7fc f9ad 	bl	800bc6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	601a      	str	r2, [r3, #0]
}
 800f918:	bf00      	nop
 800f91a:	3714      	adds	r7, #20
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd90      	pop	{r4, r7, pc}
 800f920:	0801a130 	.word	0x0801a130
 800f924:	0801a3f0 	.word	0x0801a3f0
 800f928:	0801a17c 	.word	0x0801a17c
 800f92c:	2001dd2c 	.word	0x2001dd2c

0800f930 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f930:	b5b0      	push	{r4, r5, r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
 800f93c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f93e:	e03e      	b.n	800f9be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fc fb9e 	bl	800c090 <pbuf_clen>
 800f954:	4603      	mov	r3, r0
 800f956:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f95e:	8a7a      	ldrh	r2, [r7, #18]
 800f960:	429a      	cmp	r2, r3
 800f962:	d906      	bls.n	800f972 <tcp_free_acked_segments+0x42>
 800f964:	4b2a      	ldr	r3, [pc, #168]	@ (800fa10 <tcp_free_acked_segments+0xe0>)
 800f966:	f240 4257 	movw	r2, #1111	@ 0x457
 800f96a:	492a      	ldr	r1, [pc, #168]	@ (800fa14 <tcp_free_acked_segments+0xe4>)
 800f96c:	482a      	ldr	r0, [pc, #168]	@ (800fa18 <tcp_free_acked_segments+0xe8>)
 800f96e:	f008 f97b 	bl	8017c68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f978:	8a7b      	ldrh	r3, [r7, #18]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	891a      	ldrh	r2, [r3, #8]
 800f988:	4b24      	ldr	r3, [pc, #144]	@ (800fa1c <tcp_free_acked_segments+0xec>)
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	4413      	add	r3, r2
 800f98e:	b29a      	uxth	r2, r3
 800f990:	4b22      	ldr	r3, [pc, #136]	@ (800fa1c <tcp_free_acked_segments+0xec>)
 800f992:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f994:	6978      	ldr	r0, [r7, #20]
 800f996:	f7fe f90c 	bl	800dbb2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00c      	beq.n	800f9be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d109      	bne.n	800f9be <tcp_free_acked_segments+0x8e>
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d106      	bne.n	800f9be <tcp_free_acked_segments+0x8e>
 800f9b0:	4b17      	ldr	r3, [pc, #92]	@ (800fa10 <tcp_free_acked_segments+0xe0>)
 800f9b2:	f240 4261 	movw	r2, #1121	@ 0x461
 800f9b6:	491a      	ldr	r1, [pc, #104]	@ (800fa20 <tcp_free_acked_segments+0xf0>)
 800f9b8:	4817      	ldr	r0, [pc, #92]	@ (800fa18 <tcp_free_acked_segments+0xe8>)
 800f9ba:	f008 f955 	bl	8017c68 <iprintf>
  while (seg_list != NULL &&
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d020      	beq.n	800fa06 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fa fe36 	bl	800a63c <lwip_htonl>
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	891b      	ldrh	r3, [r3, #8]
 800f9d6:	461d      	mov	r5, r3
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	899b      	ldrh	r3, [r3, #12]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fa fe15 	bl	800a610 <lwip_htons>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	f003 0303 	and.w	r3, r3, #3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <tcp_free_acked_segments+0xc6>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	e000      	b.n	800f9f8 <tcp_free_acked_segments+0xc8>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	442b      	add	r3, r5
 800f9fa:	18e2      	adds	r2, r4, r3
 800f9fc:	4b09      	ldr	r3, [pc, #36]	@ (800fa24 <tcp_free_acked_segments+0xf4>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	dd9c      	ble.n	800f940 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fa06:	68bb      	ldr	r3, [r7, #8]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3718      	adds	r7, #24
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bdb0      	pop	{r4, r5, r7, pc}
 800fa10:	0801a130 	.word	0x0801a130
 800fa14:	0801a418 	.word	0x0801a418
 800fa18:	0801a17c 	.word	0x0801a17c
 800fa1c:	2001dd34 	.word	0x2001dd34
 800fa20:	0801a440 	.word	0x0801a440
 800fa24:	2001dd30 	.word	0x2001dd30

0800fa28 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fa28:	b5b0      	push	{r4, r5, r7, lr}
 800fa2a:	b094      	sub	sp, #80	@ 0x50
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d106      	bne.n	800fa48 <tcp_receive+0x20>
 800fa3a:	4b91      	ldr	r3, [pc, #580]	@ (800fc80 <tcp_receive+0x258>)
 800fa3c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800fa40:	4990      	ldr	r1, [pc, #576]	@ (800fc84 <tcp_receive+0x25c>)
 800fa42:	4891      	ldr	r0, [pc, #580]	@ (800fc88 <tcp_receive+0x260>)
 800fa44:	f008 f910 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	7d1b      	ldrb	r3, [r3, #20]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d806      	bhi.n	800fa5e <tcp_receive+0x36>
 800fa50:	4b8b      	ldr	r3, [pc, #556]	@ (800fc80 <tcp_receive+0x258>)
 800fa52:	f240 427c 	movw	r2, #1148	@ 0x47c
 800fa56:	498d      	ldr	r1, [pc, #564]	@ (800fc8c <tcp_receive+0x264>)
 800fa58:	488b      	ldr	r0, [pc, #556]	@ (800fc88 <tcp_receive+0x260>)
 800fa5a:	f008 f905 	bl	8017c68 <iprintf>

  if (flags & TCP_ACK) {
 800fa5e:	4b8c      	ldr	r3, [pc, #560]	@ (800fc90 <tcp_receive+0x268>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	f003 0310 	and.w	r3, r3, #16
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f000 8264 	beq.w	800ff34 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fa72:	461a      	mov	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa78:	4413      	add	r3, r2
 800fa7a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa80:	4b84      	ldr	r3, [pc, #528]	@ (800fc94 <tcp_receive+0x26c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	db1b      	blt.n	800fac2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa8e:	4b81      	ldr	r3, [pc, #516]	@ (800fc94 <tcp_receive+0x26c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d106      	bne.n	800faa4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fa9a:	4b7f      	ldr	r3, [pc, #508]	@ (800fc98 <tcp_receive+0x270>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	1ad3      	subs	r3, r2, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	db0e      	blt.n	800fac2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800faa8:	4b7b      	ldr	r3, [pc, #492]	@ (800fc98 <tcp_receive+0x270>)
 800faaa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800faac:	429a      	cmp	r2, r3
 800faae:	d125      	bne.n	800fafc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fab0:	4b7a      	ldr	r3, [pc, #488]	@ (800fc9c <tcp_receive+0x274>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	89db      	ldrh	r3, [r3, #14]
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d91c      	bls.n	800fafc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fac2:	4b76      	ldr	r3, [pc, #472]	@ (800fc9c <tcp_receive+0x274>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	89db      	ldrh	r3, [r3, #14]
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fadc:	429a      	cmp	r2, r3
 800fade:	d205      	bcs.n	800faec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800faec:	4b69      	ldr	r3, [pc, #420]	@ (800fc94 <tcp_receive+0x26c>)
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800faf4:	4b68      	ldr	r3, [pc, #416]	@ (800fc98 <tcp_receive+0x270>)
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fafc:	4b66      	ldr	r3, [pc, #408]	@ (800fc98 <tcp_receive+0x270>)
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	dc58      	bgt.n	800fbbc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fb0a:	4b65      	ldr	r3, [pc, #404]	@ (800fca0 <tcp_receive+0x278>)
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d14b      	bne.n	800fbaa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800fb1c:	4413      	add	r3, r2
 800fb1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d142      	bne.n	800fbaa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	db3d      	blt.n	800fbaa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb32:	4b59      	ldr	r3, [pc, #356]	@ (800fc98 <tcp_receive+0x270>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d137      	bne.n	800fbaa <tcp_receive+0x182>
              found_dupack = 1;
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fb44:	2bff      	cmp	r3, #255	@ 0xff
 800fb46:	d007      	beq.n	800fb58 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fb4e:	3301      	adds	r3, #1
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fb5e:	2b03      	cmp	r3, #3
 800fb60:	d91b      	bls.n	800fb9a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb6c:	4413      	add	r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d30a      	bcc.n	800fb90 <tcp_receive+0x168>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb84:	4413      	add	r3, r2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fb8e:	e004      	b.n	800fb9a <tcp_receive+0x172>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d902      	bls.n	800fbaa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f002 fb41 	bl	801222c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fbaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f040 8161 	bne.w	800fe74 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fbba:	e15b      	b.n	800fe74 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbbc:	4b36      	ldr	r3, [pc, #216]	@ (800fc98 <tcp_receive+0x270>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f2c0 814e 	blt.w	800fe6a <tcp_receive+0x442>
 800fbce:	4b32      	ldr	r3, [pc, #200]	@ (800fc98 <tcp_receive+0x270>)
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f300 8146 	bgt.w	800fe6a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	8b5b      	ldrh	r3, [r3, #26]
 800fbe2:	f003 0304 	and.w	r3, r3, #4
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d010      	beq.n	800fc0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	8b5b      	ldrh	r3, [r3, #26]
 800fbee:	f023 0304 	bic.w	r3, r3, #4
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fc1a:	10db      	asrs	r3, r3, #3
 800fc1c:	b21b      	sxth	r3, r3
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	4413      	add	r3, r2
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	b21a      	sxth	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fc34:	4b18      	ldr	r3, [pc, #96]	@ (800fc98 <tcp_receive+0x270>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	b29a      	uxth	r2, r3
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	1ad3      	subs	r3, r2, r3
 800fc42:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2200      	movs	r2, #0
 800fc48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800fc4c:	4b12      	ldr	r3, [pc, #72]	@ (800fc98 <tcp_receive+0x270>)
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	7d1b      	ldrb	r3, [r3, #20]
 800fc58:	2b03      	cmp	r3, #3
 800fc5a:	f240 8097 	bls.w	800fd8c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d245      	bcs.n	800fcfa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	8b5b      	ldrh	r3, [r3, #26]
 800fc72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d014      	beq.n	800fca4 <tcp_receive+0x27c>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e013      	b.n	800fca6 <tcp_receive+0x27e>
 800fc7e:	bf00      	nop
 800fc80:	0801a130 	.word	0x0801a130
 800fc84:	0801a460 	.word	0x0801a460
 800fc88:	0801a17c 	.word	0x0801a17c
 800fc8c:	0801a47c 	.word	0x0801a47c
 800fc90:	2001dd38 	.word	0x2001dd38
 800fc94:	2001dd2c 	.word	0x2001dd2c
 800fc98:	2001dd30 	.word	0x2001dd30
 800fc9c:	2001dd1c 	.word	0x2001dd1c
 800fca0:	2001dd36 	.word	0x2001dd36
 800fca4:	2302      	movs	r3, #2
 800fca6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fcaa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fcb4:	fb12 f303 	smulbb	r3, r2, r3
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	bf28      	it	cs
 800fcc0:	4613      	movcs	r3, r2
 800fcc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fcca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fccc:	4413      	add	r3, r2
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d309      	bcc.n	800fcee <tcp_receive+0x2c6>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fce0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fce2:	4413      	add	r3, r2
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fcec:	e04e      	b.n	800fd8c <tcp_receive+0x364>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fcf4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fcf8:	e048      	b.n	800fd8c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fd00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fd02:	4413      	add	r3, r2
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d309      	bcc.n	800fd24 <tcp_receive+0x2fc>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fd16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fd18:	4413      	add	r3, r2
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fd22:	e004      	b.n	800fd2e <tcp_receive+0x306>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d326      	bcc.n	800fd8c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd5e:	4413      	add	r3, r2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d30a      	bcc.n	800fd82 <tcp_receive+0x35a>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd76:	4413      	add	r3, r2
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fd80:	e004      	b.n	800fd8c <tcp_receive+0x364>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd94:	4a98      	ldr	r2, [pc, #608]	@ (800fff8 <tcp_receive+0x5d0>)
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7ff fdca 	bl	800f930 <tcp_free_acked_segments>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdaa:	4a94      	ldr	r2, [pc, #592]	@ (800fffc <tcp_receive+0x5d4>)
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7ff fdbf 	bl	800f930 <tcp_free_acked_segments>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d104      	bne.n	800fdca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdc6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fdc8:	e002      	b.n	800fdd0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d103      	bne.n	800fde6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800fdec:	4b84      	ldr	r3, [pc, #528]	@ (8010000 <tcp_receive+0x5d8>)
 800fdee:	881b      	ldrh	r3, [r3, #0]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	8b5b      	ldrh	r3, [r3, #26]
 800fdfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d035      	beq.n	800fe72 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d118      	bne.n	800fe40 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00c      	beq.n	800fe30 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fa fc0a 	bl	800a63c <lwip_htonl>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	dc20      	bgt.n	800fe72 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	8b5b      	ldrh	r3, [r3, #26]
 800fe34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe3e:	e018      	b.n	800fe72 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fa fbf5 	bl	800a63c <lwip_htonl>
 800fe52:	4603      	mov	r3, r0
 800fe54:	1ae3      	subs	r3, r4, r3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	dc0b      	bgt.n	800fe72 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8b5b      	ldrh	r3, [r3, #26]
 800fe5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe68:	e003      	b.n	800fe72 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f002 fbca 	bl	8012604 <tcp_send_empty_ack>
 800fe70:	e000      	b.n	800fe74 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe72:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d05b      	beq.n	800ff34 <tcp_receive+0x50c>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe80:	4b60      	ldr	r3, [pc, #384]	@ (8010004 <tcp_receive+0x5dc>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	1ad3      	subs	r3, r2, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	da54      	bge.n	800ff34 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fe8a:	4b5f      	ldr	r3, [pc, #380]	@ (8010008 <tcp_receive+0x5e0>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fe9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fea8:	10db      	asrs	r3, r3, #3
 800feaa:	b21b      	sxth	r3, r3
 800feac:	b29b      	uxth	r3, r3
 800feae:	1ad3      	subs	r3, r2, r3
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800febc:	b29a      	uxth	r2, r3
 800febe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fec2:	4413      	add	r3, r2
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	b21a      	sxth	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800fecc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	da05      	bge.n	800fee0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fed8:	425b      	negs	r3, r3
 800feda:	b29b      	uxth	r3, r3
 800fedc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fee0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800feea:	109b      	asrs	r3, r3, #2
 800feec:	b21b      	sxth	r3, r3
 800feee:	b29b      	uxth	r3, r3
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ff04:	4413      	add	r3, r2
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	b21a      	sxth	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ff14:	10db      	asrs	r3, r3, #3
 800ff16:	b21b      	sxth	r3, r3
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	4413      	add	r3, r2
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	b21a      	sxth	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ff34:	4b35      	ldr	r3, [pc, #212]	@ (801000c <tcp_receive+0x5e4>)
 800ff36:	881b      	ldrh	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f000 84df 	beq.w	80108fc <tcp_receive+0xed4>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
 800ff42:	2b06      	cmp	r3, #6
 800ff44:	f200 84da 	bhi.w	80108fc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff4c:	4b30      	ldr	r3, [pc, #192]	@ (8010010 <tcp_receive+0x5e8>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	3b01      	subs	r3, #1
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f2c0 808f 	blt.w	8010078 <tcp_receive+0x650>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff5e:	4b2b      	ldr	r3, [pc, #172]	@ (801000c <tcp_receive+0x5e4>)
 800ff60:	881b      	ldrh	r3, [r3, #0]
 800ff62:	4619      	mov	r1, r3
 800ff64:	4b2a      	ldr	r3, [pc, #168]	@ (8010010 <tcp_receive+0x5e8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	440b      	add	r3, r1
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f300 8082 	bgt.w	8010078 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ff74:	4b27      	ldr	r3, [pc, #156]	@ (8010014 <tcp_receive+0x5ec>)
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff7e:	4b24      	ldr	r3, [pc, #144]	@ (8010010 <tcp_receive+0x5e8>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ff86:	4b23      	ldr	r3, [pc, #140]	@ (8010014 <tcp_receive+0x5ec>)
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <tcp_receive+0x574>
 800ff8e:	4b22      	ldr	r3, [pc, #136]	@ (8010018 <tcp_receive+0x5f0>)
 800ff90:	f240 5294 	movw	r2, #1428	@ 0x594
 800ff94:	4921      	ldr	r1, [pc, #132]	@ (801001c <tcp_receive+0x5f4>)
 800ff96:	4822      	ldr	r0, [pc, #136]	@ (8010020 <tcp_receive+0x5f8>)
 800ff98:	f007 fe66 	bl	8017c68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d906      	bls.n	800ffb4 <tcp_receive+0x58c>
 800ffa6:	4b1c      	ldr	r3, [pc, #112]	@ (8010018 <tcp_receive+0x5f0>)
 800ffa8:	f240 5295 	movw	r2, #1429	@ 0x595
 800ffac:	491d      	ldr	r1, [pc, #116]	@ (8010024 <tcp_receive+0x5fc>)
 800ffae:	481c      	ldr	r0, [pc, #112]	@ (8010020 <tcp_receive+0x5f8>)
 800ffb0:	f007 fe5a 	bl	8017c68 <iprintf>
      off = (u16_t)off32;
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ffba:	4b16      	ldr	r3, [pc, #88]	@ (8010014 <tcp_receive+0x5ec>)
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	891b      	ldrh	r3, [r3, #8]
 800ffc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d906      	bls.n	800ffd6 <tcp_receive+0x5ae>
 800ffc8:	4b13      	ldr	r3, [pc, #76]	@ (8010018 <tcp_receive+0x5f0>)
 800ffca:	f240 5297 	movw	r2, #1431	@ 0x597
 800ffce:	4916      	ldr	r1, [pc, #88]	@ (8010028 <tcp_receive+0x600>)
 800ffd0:	4813      	ldr	r0, [pc, #76]	@ (8010020 <tcp_receive+0x5f8>)
 800ffd2:	f007 fe49 	bl	8017c68 <iprintf>
      inseg.len -= off;
 800ffd6:	4b0f      	ldr	r3, [pc, #60]	@ (8010014 <tcp_receive+0x5ec>)
 800ffd8:	891a      	ldrh	r2, [r3, #8]
 800ffda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	4b0c      	ldr	r3, [pc, #48]	@ (8010014 <tcp_receive+0x5ec>)
 800ffe4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ffe6:	4b0b      	ldr	r3, [pc, #44]	@ (8010014 <tcp_receive+0x5ec>)
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	891a      	ldrh	r2, [r3, #8]
 800ffec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fff4:	e02a      	b.n	801004c <tcp_receive+0x624>
 800fff6:	bf00      	nop
 800fff8:	0801a498 	.word	0x0801a498
 800fffc:	0801a4a0 	.word	0x0801a4a0
 8010000:	2001dd34 	.word	0x2001dd34
 8010004:	2001dd30 	.word	0x2001dd30
 8010008:	2001dcf4 	.word	0x2001dcf4
 801000c:	2001dd36 	.word	0x2001dd36
 8010010:	2001dd2c 	.word	0x2001dd2c
 8010014:	2001dd0c 	.word	0x2001dd0c
 8010018:	0801a130 	.word	0x0801a130
 801001c:	0801a4a8 	.word	0x0801a4a8
 8010020:	0801a17c 	.word	0x0801a17c
 8010024:	0801a4b8 	.word	0x0801a4b8
 8010028:	0801a4c8 	.word	0x0801a4c8
        off -= p->len;
 801002c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801002e:	895b      	ldrh	r3, [r3, #10]
 8010030:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801003a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801003c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801003e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010042:	2200      	movs	r2, #0
 8010044:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801004c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801004e:	895b      	ldrh	r3, [r3, #10]
 8010050:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010054:	429a      	cmp	r2, r3
 8010056:	d8e9      	bhi.n	801002c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010058:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801005c:	4619      	mov	r1, r3
 801005e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010060:	f7fb ff02 	bl	800be68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010068:	4a90      	ldr	r2, [pc, #576]	@ (80102ac <tcp_receive+0x884>)
 801006a:	6013      	str	r3, [r2, #0]
 801006c:	4b90      	ldr	r3, [pc, #576]	@ (80102b0 <tcp_receive+0x888>)
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	4a8e      	ldr	r2, [pc, #568]	@ (80102ac <tcp_receive+0x884>)
 8010072:	6812      	ldr	r2, [r2, #0]
 8010074:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010076:	e00d      	b.n	8010094 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010078:	4b8c      	ldr	r3, [pc, #560]	@ (80102ac <tcp_receive+0x884>)
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	da06      	bge.n	8010094 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8b5b      	ldrh	r3, [r3, #26]
 801008a:	f043 0302 	orr.w	r3, r3, #2
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010094:	4b85      	ldr	r3, [pc, #532]	@ (80102ac <tcp_receive+0x884>)
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801009c:	1ad3      	subs	r3, r2, r3
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f2c0 8427 	blt.w	80108f2 <tcp_receive+0xeca>
 80100a4:	4b81      	ldr	r3, [pc, #516]	@ (80102ac <tcp_receive+0x884>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ac:	6879      	ldr	r1, [r7, #4]
 80100ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80100b0:	440b      	add	r3, r1
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	3301      	adds	r3, #1
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f300 841b 	bgt.w	80108f2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100c0:	4b7a      	ldr	r3, [pc, #488]	@ (80102ac <tcp_receive+0x884>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	f040 8298 	bne.w	80105fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80100ca:	4b79      	ldr	r3, [pc, #484]	@ (80102b0 <tcp_receive+0x888>)
 80100cc:	891c      	ldrh	r4, [r3, #8]
 80100ce:	4b78      	ldr	r3, [pc, #480]	@ (80102b0 <tcp_receive+0x888>)
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	899b      	ldrh	r3, [r3, #12]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fa fa9a 	bl	800a610 <lwip_htons>
 80100dc:	4603      	mov	r3, r0
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	f003 0303 	and.w	r3, r3, #3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d001      	beq.n	80100ec <tcp_receive+0x6c4>
 80100e8:	2301      	movs	r3, #1
 80100ea:	e000      	b.n	80100ee <tcp_receive+0x6c6>
 80100ec:	2300      	movs	r3, #0
 80100ee:	4423      	add	r3, r4
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	4b70      	ldr	r3, [pc, #448]	@ (80102b4 <tcp_receive+0x88c>)
 80100f4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80100fa:	4b6e      	ldr	r3, [pc, #440]	@ (80102b4 <tcp_receive+0x88c>)
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d274      	bcs.n	80101ec <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010102:	4b6b      	ldr	r3, [pc, #428]	@ (80102b0 <tcp_receive+0x888>)
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4618      	mov	r0, r3
 801010c:	f7fa fa80 	bl	800a610 <lwip_htons>
 8010110:	4603      	mov	r3, r0
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0301 	and.w	r3, r3, #1
 8010118:	2b00      	cmp	r3, #0
 801011a:	d01e      	beq.n	801015a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801011c:	4b64      	ldr	r3, [pc, #400]	@ (80102b0 <tcp_receive+0x888>)
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	b29b      	uxth	r3, r3
 8010124:	b21b      	sxth	r3, r3
 8010126:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801012a:	b21c      	sxth	r4, r3
 801012c:	4b60      	ldr	r3, [pc, #384]	@ (80102b0 <tcp_receive+0x888>)
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	899b      	ldrh	r3, [r3, #12]
 8010132:	b29b      	uxth	r3, r3
 8010134:	4618      	mov	r0, r3
 8010136:	f7fa fa6b 	bl	800a610 <lwip_htons>
 801013a:	4603      	mov	r3, r0
 801013c:	b2db      	uxtb	r3, r3
 801013e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010142:	b29b      	uxth	r3, r3
 8010144:	4618      	mov	r0, r3
 8010146:	f7fa fa63 	bl	800a610 <lwip_htons>
 801014a:	4603      	mov	r3, r0
 801014c:	b21b      	sxth	r3, r3
 801014e:	4323      	orrs	r3, r4
 8010150:	b21a      	sxth	r2, r3
 8010152:	4b57      	ldr	r3, [pc, #348]	@ (80102b0 <tcp_receive+0x888>)
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	b292      	uxth	r2, r2
 8010158:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801015e:	4b54      	ldr	r3, [pc, #336]	@ (80102b0 <tcp_receive+0x888>)
 8010160:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010162:	4b53      	ldr	r3, [pc, #332]	@ (80102b0 <tcp_receive+0x888>)
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	899b      	ldrh	r3, [r3, #12]
 8010168:	b29b      	uxth	r3, r3
 801016a:	4618      	mov	r0, r3
 801016c:	f7fa fa50 	bl	800a610 <lwip_htons>
 8010170:	4603      	mov	r3, r0
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f003 0302 	and.w	r3, r3, #2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d005      	beq.n	8010188 <tcp_receive+0x760>
            inseg.len -= 1;
 801017c:	4b4c      	ldr	r3, [pc, #304]	@ (80102b0 <tcp_receive+0x888>)
 801017e:	891b      	ldrh	r3, [r3, #8]
 8010180:	3b01      	subs	r3, #1
 8010182:	b29a      	uxth	r2, r3
 8010184:	4b4a      	ldr	r3, [pc, #296]	@ (80102b0 <tcp_receive+0x888>)
 8010186:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010188:	4b49      	ldr	r3, [pc, #292]	@ (80102b0 <tcp_receive+0x888>)
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	4a48      	ldr	r2, [pc, #288]	@ (80102b0 <tcp_receive+0x888>)
 801018e:	8912      	ldrh	r2, [r2, #8]
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f7fb fd6a 	bl	800bc6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010198:	4b45      	ldr	r3, [pc, #276]	@ (80102b0 <tcp_receive+0x888>)
 801019a:	891c      	ldrh	r4, [r3, #8]
 801019c:	4b44      	ldr	r3, [pc, #272]	@ (80102b0 <tcp_receive+0x888>)
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	899b      	ldrh	r3, [r3, #12]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fa fa33 	bl	800a610 <lwip_htons>
 80101aa:	4603      	mov	r3, r0
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	f003 0303 	and.w	r3, r3, #3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d001      	beq.n	80101ba <tcp_receive+0x792>
 80101b6:	2301      	movs	r3, #1
 80101b8:	e000      	b.n	80101bc <tcp_receive+0x794>
 80101ba:	2300      	movs	r3, #0
 80101bc:	4423      	add	r3, r4
 80101be:	b29a      	uxth	r2, r3
 80101c0:	4b3c      	ldr	r3, [pc, #240]	@ (80102b4 <tcp_receive+0x88c>)
 80101c2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80101c4:	4b3b      	ldr	r3, [pc, #236]	@ (80102b4 <tcp_receive+0x88c>)
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	461a      	mov	r2, r3
 80101ca:	4b38      	ldr	r3, [pc, #224]	@ (80102ac <tcp_receive+0x884>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	441a      	add	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d4:	6879      	ldr	r1, [r7, #4]
 80101d6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80101d8:	440b      	add	r3, r1
 80101da:	429a      	cmp	r2, r3
 80101dc:	d006      	beq.n	80101ec <tcp_receive+0x7c4>
 80101de:	4b36      	ldr	r3, [pc, #216]	@ (80102b8 <tcp_receive+0x890>)
 80101e0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80101e4:	4935      	ldr	r1, [pc, #212]	@ (80102bc <tcp_receive+0x894>)
 80101e6:	4836      	ldr	r0, [pc, #216]	@ (80102c0 <tcp_receive+0x898>)
 80101e8:	f007 fd3e 	bl	8017c68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f000 80e6 	beq.w	80103c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101f6:	4b2e      	ldr	r3, [pc, #184]	@ (80102b0 <tcp_receive+0x888>)
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	899b      	ldrh	r3, [r3, #12]
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fa fa06 	bl	800a610 <lwip_htons>
 8010204:	4603      	mov	r3, r0
 8010206:	b2db      	uxtb	r3, r3
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	2b00      	cmp	r3, #0
 801020e:	d010      	beq.n	8010232 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010210:	e00a      	b.n	8010228 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010216:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	f7fd fcc5 	bl	800dbb2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1f0      	bne.n	8010212 <tcp_receive+0x7ea>
 8010230:	e0c7      	b.n	80103c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010236:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010238:	e051      	b.n	80102de <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801023a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	899b      	ldrh	r3, [r3, #12]
 8010240:	b29b      	uxth	r3, r3
 8010242:	4618      	mov	r0, r3
 8010244:	f7fa f9e4 	bl	800a610 <lwip_htons>
 8010248:	4603      	mov	r3, r0
 801024a:	b2db      	uxtb	r3, r3
 801024c:	f003 0301 	and.w	r3, r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	d03c      	beq.n	80102ce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010254:	4b16      	ldr	r3, [pc, #88]	@ (80102b0 <tcp_receive+0x888>)
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	899b      	ldrh	r3, [r3, #12]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4618      	mov	r0, r3
 801025e:	f7fa f9d7 	bl	800a610 <lwip_htons>
 8010262:	4603      	mov	r3, r0
 8010264:	b2db      	uxtb	r3, r3
 8010266:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801026a:	2b00      	cmp	r3, #0
 801026c:	d12f      	bne.n	80102ce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801026e:	4b10      	ldr	r3, [pc, #64]	@ (80102b0 <tcp_receive+0x888>)
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	899b      	ldrh	r3, [r3, #12]
 8010274:	b29c      	uxth	r4, r3
 8010276:	2001      	movs	r0, #1
 8010278:	f7fa f9ca 	bl	800a610 <lwip_htons>
 801027c:	4603      	mov	r3, r0
 801027e:	461a      	mov	r2, r3
 8010280:	4b0b      	ldr	r3, [pc, #44]	@ (80102b0 <tcp_receive+0x888>)
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	4322      	orrs	r2, r4
 8010286:	b292      	uxth	r2, r2
 8010288:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801028a:	4b09      	ldr	r3, [pc, #36]	@ (80102b0 <tcp_receive+0x888>)
 801028c:	891c      	ldrh	r4, [r3, #8]
 801028e:	4b08      	ldr	r3, [pc, #32]	@ (80102b0 <tcp_receive+0x888>)
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	899b      	ldrh	r3, [r3, #12]
 8010294:	b29b      	uxth	r3, r3
 8010296:	4618      	mov	r0, r3
 8010298:	f7fa f9ba 	bl	800a610 <lwip_htons>
 801029c:	4603      	mov	r3, r0
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	f003 0303 	and.w	r3, r3, #3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00d      	beq.n	80102c4 <tcp_receive+0x89c>
 80102a8:	2301      	movs	r3, #1
 80102aa:	e00c      	b.n	80102c6 <tcp_receive+0x89e>
 80102ac:	2001dd2c 	.word	0x2001dd2c
 80102b0:	2001dd0c 	.word	0x2001dd0c
 80102b4:	2001dd36 	.word	0x2001dd36
 80102b8:	0801a130 	.word	0x0801a130
 80102bc:	0801a4d8 	.word	0x0801a4d8
 80102c0:	0801a17c 	.word	0x0801a17c
 80102c4:	2300      	movs	r3, #0
 80102c6:	4423      	add	r3, r4
 80102c8:	b29a      	uxth	r2, r3
 80102ca:	4b98      	ldr	r3, [pc, #608]	@ (801052c <tcp_receive+0xb04>)
 80102cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80102ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80102d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80102d8:	6938      	ldr	r0, [r7, #16]
 80102da:	f7fd fc6a 	bl	800dbb2 <tcp_seg_free>
            while (next &&
 80102de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00e      	beq.n	8010302 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80102e4:	4b91      	ldr	r3, [pc, #580]	@ (801052c <tcp_receive+0xb04>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	461a      	mov	r2, r3
 80102ea:	4b91      	ldr	r3, [pc, #580]	@ (8010530 <tcp_receive+0xb08>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	441a      	add	r2, r3
 80102f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102f8:	8909      	ldrh	r1, [r1, #8]
 80102fa:	440b      	add	r3, r1
 80102fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80102fe:	2b00      	cmp	r3, #0
 8010300:	da9b      	bge.n	801023a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010304:	2b00      	cmp	r3, #0
 8010306:	d059      	beq.n	80103bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010308:	4b88      	ldr	r3, [pc, #544]	@ (801052c <tcp_receive+0xb04>)
 801030a:	881b      	ldrh	r3, [r3, #0]
 801030c:	461a      	mov	r2, r3
 801030e:	4b88      	ldr	r3, [pc, #544]	@ (8010530 <tcp_receive+0xb08>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	441a      	add	r2, r3
 8010314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801031c:	2b00      	cmp	r3, #0
 801031e:	dd4d      	ble.n	80103bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	b29a      	uxth	r2, r3
 8010328:	4b81      	ldr	r3, [pc, #516]	@ (8010530 <tcp_receive+0xb08>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	b29b      	uxth	r3, r3
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	b29a      	uxth	r2, r3
 8010332:	4b80      	ldr	r3, [pc, #512]	@ (8010534 <tcp_receive+0xb0c>)
 8010334:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010336:	4b7f      	ldr	r3, [pc, #508]	@ (8010534 <tcp_receive+0xb0c>)
 8010338:	68db      	ldr	r3, [r3, #12]
 801033a:	899b      	ldrh	r3, [r3, #12]
 801033c:	b29b      	uxth	r3, r3
 801033e:	4618      	mov	r0, r3
 8010340:	f7fa f966 	bl	800a610 <lwip_htons>
 8010344:	4603      	mov	r3, r0
 8010346:	b2db      	uxtb	r3, r3
 8010348:	f003 0302 	and.w	r3, r3, #2
 801034c:	2b00      	cmp	r3, #0
 801034e:	d005      	beq.n	801035c <tcp_receive+0x934>
                inseg.len -= 1;
 8010350:	4b78      	ldr	r3, [pc, #480]	@ (8010534 <tcp_receive+0xb0c>)
 8010352:	891b      	ldrh	r3, [r3, #8]
 8010354:	3b01      	subs	r3, #1
 8010356:	b29a      	uxth	r2, r3
 8010358:	4b76      	ldr	r3, [pc, #472]	@ (8010534 <tcp_receive+0xb0c>)
 801035a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801035c:	4b75      	ldr	r3, [pc, #468]	@ (8010534 <tcp_receive+0xb0c>)
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	4a74      	ldr	r2, [pc, #464]	@ (8010534 <tcp_receive+0xb0c>)
 8010362:	8912      	ldrh	r2, [r2, #8]
 8010364:	4611      	mov	r1, r2
 8010366:	4618      	mov	r0, r3
 8010368:	f7fb fc80 	bl	800bc6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801036c:	4b71      	ldr	r3, [pc, #452]	@ (8010534 <tcp_receive+0xb0c>)
 801036e:	891c      	ldrh	r4, [r3, #8]
 8010370:	4b70      	ldr	r3, [pc, #448]	@ (8010534 <tcp_receive+0xb0c>)
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	899b      	ldrh	r3, [r3, #12]
 8010376:	b29b      	uxth	r3, r3
 8010378:	4618      	mov	r0, r3
 801037a:	f7fa f949 	bl	800a610 <lwip_htons>
 801037e:	4603      	mov	r3, r0
 8010380:	b2db      	uxtb	r3, r3
 8010382:	f003 0303 	and.w	r3, r3, #3
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <tcp_receive+0x966>
 801038a:	2301      	movs	r3, #1
 801038c:	e000      	b.n	8010390 <tcp_receive+0x968>
 801038e:	2300      	movs	r3, #0
 8010390:	4423      	add	r3, r4
 8010392:	b29a      	uxth	r2, r3
 8010394:	4b65      	ldr	r3, [pc, #404]	@ (801052c <tcp_receive+0xb04>)
 8010396:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010398:	4b64      	ldr	r3, [pc, #400]	@ (801052c <tcp_receive+0xb04>)
 801039a:	881b      	ldrh	r3, [r3, #0]
 801039c:	461a      	mov	r2, r3
 801039e:	4b64      	ldr	r3, [pc, #400]	@ (8010530 <tcp_receive+0xb08>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	441a      	add	r2, r3
 80103a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d006      	beq.n	80103bc <tcp_receive+0x994>
 80103ae:	4b62      	ldr	r3, [pc, #392]	@ (8010538 <tcp_receive+0xb10>)
 80103b0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80103b4:	4961      	ldr	r1, [pc, #388]	@ (801053c <tcp_receive+0xb14>)
 80103b6:	4862      	ldr	r0, [pc, #392]	@ (8010540 <tcp_receive+0xb18>)
 80103b8:	f007 fc56 	bl	8017c68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80103c0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80103c2:	4b5a      	ldr	r3, [pc, #360]	@ (801052c <tcp_receive+0xb04>)
 80103c4:	881b      	ldrh	r3, [r3, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	4b59      	ldr	r3, [pc, #356]	@ (8010530 <tcp_receive+0xb08>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	441a      	add	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80103d6:	4b55      	ldr	r3, [pc, #340]	@ (801052c <tcp_receive+0xb04>)
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d206      	bcs.n	80103ec <tcp_receive+0x9c4>
 80103de:	4b56      	ldr	r3, [pc, #344]	@ (8010538 <tcp_receive+0xb10>)
 80103e0:	f240 6207 	movw	r2, #1543	@ 0x607
 80103e4:	4957      	ldr	r1, [pc, #348]	@ (8010544 <tcp_receive+0xb1c>)
 80103e6:	4856      	ldr	r0, [pc, #344]	@ (8010540 <tcp_receive+0xb18>)
 80103e8:	f007 fc3e 	bl	8017c68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80103f0:	4b4e      	ldr	r3, [pc, #312]	@ (801052c <tcp_receive+0xb04>)
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7fc fd95 	bl	800cf2c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010402:	4b4c      	ldr	r3, [pc, #304]	@ (8010534 <tcp_receive+0xb0c>)
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	891b      	ldrh	r3, [r3, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d006      	beq.n	801041a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801040c:	4b49      	ldr	r3, [pc, #292]	@ (8010534 <tcp_receive+0xb0c>)
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	4a4d      	ldr	r2, [pc, #308]	@ (8010548 <tcp_receive+0xb20>)
 8010412:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010414:	4b47      	ldr	r3, [pc, #284]	@ (8010534 <tcp_receive+0xb0c>)
 8010416:	2200      	movs	r2, #0
 8010418:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801041a:	4b46      	ldr	r3, [pc, #280]	@ (8010534 <tcp_receive+0xb0c>)
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	899b      	ldrh	r3, [r3, #12]
 8010420:	b29b      	uxth	r3, r3
 8010422:	4618      	mov	r0, r3
 8010424:	f7fa f8f4 	bl	800a610 <lwip_htons>
 8010428:	4603      	mov	r3, r0
 801042a:	b2db      	uxtb	r3, r3
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 80b8 	beq.w	80105a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010436:	4b45      	ldr	r3, [pc, #276]	@ (801054c <tcp_receive+0xb24>)
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	f043 0320 	orr.w	r3, r3, #32
 801043e:	b2da      	uxtb	r2, r3
 8010440:	4b42      	ldr	r3, [pc, #264]	@ (801054c <tcp_receive+0xb24>)
 8010442:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010444:	e0af      	b.n	80105a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801044a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	4a36      	ldr	r2, [pc, #216]	@ (8010530 <tcp_receive+0xb08>)
 8010456:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	891b      	ldrh	r3, [r3, #8]
 801045c:	461c      	mov	r4, r3
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	899b      	ldrh	r3, [r3, #12]
 8010464:	b29b      	uxth	r3, r3
 8010466:	4618      	mov	r0, r3
 8010468:	f7fa f8d2 	bl	800a610 <lwip_htons>
 801046c:	4603      	mov	r3, r0
 801046e:	b2db      	uxtb	r3, r3
 8010470:	f003 0303 	and.w	r3, r3, #3
 8010474:	2b00      	cmp	r3, #0
 8010476:	d001      	beq.n	801047c <tcp_receive+0xa54>
 8010478:	2301      	movs	r3, #1
 801047a:	e000      	b.n	801047e <tcp_receive+0xa56>
 801047c:	2300      	movs	r3, #0
 801047e:	191a      	adds	r2, r3, r4
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010484:	441a      	add	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801048e:	461c      	mov	r4, r3
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	891b      	ldrh	r3, [r3, #8]
 8010494:	461d      	mov	r5, r3
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	899b      	ldrh	r3, [r3, #12]
 801049c:	b29b      	uxth	r3, r3
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fa f8b6 	bl	800a610 <lwip_htons>
 80104a4:	4603      	mov	r3, r0
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	f003 0303 	and.w	r3, r3, #3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d001      	beq.n	80104b4 <tcp_receive+0xa8c>
 80104b0:	2301      	movs	r3, #1
 80104b2:	e000      	b.n	80104b6 <tcp_receive+0xa8e>
 80104b4:	2300      	movs	r3, #0
 80104b6:	442b      	add	r3, r5
 80104b8:	429c      	cmp	r4, r3
 80104ba:	d206      	bcs.n	80104ca <tcp_receive+0xaa2>
 80104bc:	4b1e      	ldr	r3, [pc, #120]	@ (8010538 <tcp_receive+0xb10>)
 80104be:	f240 622b 	movw	r2, #1579	@ 0x62b
 80104c2:	4923      	ldr	r1, [pc, #140]	@ (8010550 <tcp_receive+0xb28>)
 80104c4:	481e      	ldr	r0, [pc, #120]	@ (8010540 <tcp_receive+0xb18>)
 80104c6:	f007 fbcf 	bl	8017c68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	891b      	ldrh	r3, [r3, #8]
 80104ce:	461c      	mov	r4, r3
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	899b      	ldrh	r3, [r3, #12]
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fa f899 	bl	800a610 <lwip_htons>
 80104de:	4603      	mov	r3, r0
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	f003 0303 	and.w	r3, r3, #3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <tcp_receive+0xac6>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <tcp_receive+0xac8>
 80104ee:	2300      	movs	r3, #0
 80104f0:	1919      	adds	r1, r3, r4
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80104f6:	b28b      	uxth	r3, r1
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7fc fd13 	bl	800cf2c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	891b      	ldrh	r3, [r3, #8]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d028      	beq.n	8010562 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010510:	4b0d      	ldr	r3, [pc, #52]	@ (8010548 <tcp_receive+0xb20>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d01d      	beq.n	8010554 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010518:	4b0b      	ldr	r3, [pc, #44]	@ (8010548 <tcp_receive+0xb20>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	4619      	mov	r1, r3
 8010522:	4610      	mov	r0, r2
 8010524:	f7fb fdf4 	bl	800c110 <pbuf_cat>
 8010528:	e018      	b.n	801055c <tcp_receive+0xb34>
 801052a:	bf00      	nop
 801052c:	2001dd36 	.word	0x2001dd36
 8010530:	2001dd2c 	.word	0x2001dd2c
 8010534:	2001dd0c 	.word	0x2001dd0c
 8010538:	0801a130 	.word	0x0801a130
 801053c:	0801a510 	.word	0x0801a510
 8010540:	0801a17c 	.word	0x0801a17c
 8010544:	0801a54c 	.word	0x0801a54c
 8010548:	2001dd3c 	.word	0x2001dd3c
 801054c:	2001dd39 	.word	0x2001dd39
 8010550:	0801a56c 	.word	0x0801a56c
            } else {
              recv_data = cseg->p;
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	4a70      	ldr	r2, [pc, #448]	@ (801071c <tcp_receive+0xcf4>)
 801055a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	2200      	movs	r2, #0
 8010560:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	899b      	ldrh	r3, [r3, #12]
 8010568:	b29b      	uxth	r3, r3
 801056a:	4618      	mov	r0, r3
 801056c:	f7fa f850 	bl	800a610 <lwip_htons>
 8010570:	4603      	mov	r3, r0
 8010572:	b2db      	uxtb	r3, r3
 8010574:	f003 0301 	and.w	r3, r3, #1
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00d      	beq.n	8010598 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801057c:	4b68      	ldr	r3, [pc, #416]	@ (8010720 <tcp_receive+0xcf8>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f043 0320 	orr.w	r3, r3, #32
 8010584:	b2da      	uxtb	r2, r3
 8010586:	4b66      	ldr	r3, [pc, #408]	@ (8010720 <tcp_receive+0xcf8>)
 8010588:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	7d1b      	ldrb	r3, [r3, #20]
 801058e:	2b04      	cmp	r3, #4
 8010590:	d102      	bne.n	8010598 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2207      	movs	r2, #7
 8010596:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80105a0:	68b8      	ldr	r0, [r7, #8]
 80105a2:	f7fd fb06 	bl	800dbb2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d008      	beq.n	80105c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	685a      	ldr	r2, [r3, #4]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80105ba:	429a      	cmp	r2, r3
 80105bc:	f43f af43 	beq.w	8010446 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	8b5b      	ldrh	r3, [r3, #26]
 80105c4:	f003 0301 	and.w	r3, r3, #1
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00e      	beq.n	80105ea <tcp_receive+0xbc2>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	8b5b      	ldrh	r3, [r3, #26]
 80105d0:	f023 0301 	bic.w	r3, r3, #1
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	835a      	strh	r2, [r3, #26]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	8b5b      	ldrh	r3, [r3, #26]
 80105de:	f043 0302 	orr.w	r3, r3, #2
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80105e8:	e187      	b.n	80108fa <tcp_receive+0xed2>
        tcp_ack(pcb);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8b5b      	ldrh	r3, [r3, #26]
 80105ee:	f043 0301 	orr.w	r3, r3, #1
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80105f8:	e17f      	b.n	80108fa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010602:	4848      	ldr	r0, [pc, #288]	@ (8010724 <tcp_receive+0xcfc>)
 8010604:	f7fd faee 	bl	800dbe4 <tcp_seg_copy>
 8010608:	4602      	mov	r2, r0
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	675a      	str	r2, [r3, #116]	@ 0x74
 801060e:	e16c      	b.n	80108ea <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010610:	2300      	movs	r3, #0
 8010612:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010618:	63bb      	str	r3, [r7, #56]	@ 0x38
 801061a:	e156      	b.n	80108ca <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801061c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	685a      	ldr	r2, [r3, #4]
 8010622:	4b41      	ldr	r3, [pc, #260]	@ (8010728 <tcp_receive+0xd00>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	429a      	cmp	r2, r3
 8010628:	d11d      	bne.n	8010666 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801062a:	4b3e      	ldr	r3, [pc, #248]	@ (8010724 <tcp_receive+0xcfc>)
 801062c:	891a      	ldrh	r2, [r3, #8]
 801062e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010630:	891b      	ldrh	r3, [r3, #8]
 8010632:	429a      	cmp	r2, r3
 8010634:	f240 814e 	bls.w	80108d4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010638:	483a      	ldr	r0, [pc, #232]	@ (8010724 <tcp_receive+0xcfc>)
 801063a:	f7fd fad3 	bl	800dbe4 <tcp_seg_copy>
 801063e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	2b00      	cmp	r3, #0
 8010644:	f000 8148 	beq.w	80108d8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801064a:	2b00      	cmp	r3, #0
 801064c:	d003      	beq.n	8010656 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801064e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010650:	697a      	ldr	r2, [r7, #20]
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	e002      	b.n	801065c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	697a      	ldr	r2, [r7, #20]
 801065a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801065c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801065e:	6978      	ldr	r0, [r7, #20]
 8010660:	f7ff f8de 	bl	800f820 <tcp_oos_insert_segment>
                }
                break;
 8010664:	e138      	b.n	80108d8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010668:	2b00      	cmp	r3, #0
 801066a:	d117      	bne.n	801069c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801066c:	4b2e      	ldr	r3, [pc, #184]	@ (8010728 <tcp_receive+0xd00>)
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	da57      	bge.n	801072c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801067c:	4829      	ldr	r0, [pc, #164]	@ (8010724 <tcp_receive+0xcfc>)
 801067e:	f7fd fab1 	bl	800dbe4 <tcp_seg_copy>
 8010682:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 8128 	beq.w	80108dc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	69ba      	ldr	r2, [r7, #24]
 8010690:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010692:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010694:	69b8      	ldr	r0, [r7, #24]
 8010696:	f7ff f8c3 	bl	800f820 <tcp_oos_insert_segment>
                  }
                  break;
 801069a:	e11f      	b.n	80108dc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801069c:	4b22      	ldr	r3, [pc, #136]	@ (8010728 <tcp_receive+0xd00>)
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	3b01      	subs	r3, #1
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	db3e      	blt.n	801072c <tcp_receive+0xd04>
 80106ae:	4b1e      	ldr	r3, [pc, #120]	@ (8010728 <tcp_receive+0xd00>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	3301      	adds	r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dc35      	bgt.n	801072c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80106c0:	4818      	ldr	r0, [pc, #96]	@ (8010724 <tcp_receive+0xcfc>)
 80106c2:	f7fd fa8f 	bl	800dbe4 <tcp_seg_copy>
 80106c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 8108 	beq.w	80108e0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80106d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80106d8:	8912      	ldrh	r2, [r2, #8]
 80106da:	441a      	add	r2, r3
 80106dc:	4b12      	ldr	r3, [pc, #72]	@ (8010728 <tcp_receive+0xd00>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	dd12      	ble.n	801070c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80106e6:	4b10      	ldr	r3, [pc, #64]	@ (8010728 <tcp_receive+0xd00>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80106fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010702:	891b      	ldrh	r3, [r3, #8]
 8010704:	4619      	mov	r1, r3
 8010706:	4610      	mov	r0, r2
 8010708:	f7fb fab0 	bl	800bc6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801070c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801070e:	69fa      	ldr	r2, [r7, #28]
 8010710:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010712:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010714:	69f8      	ldr	r0, [r7, #28]
 8010716:	f7ff f883 	bl	800f820 <tcp_oos_insert_segment>
                  }
                  break;
 801071a:	e0e1      	b.n	80108e0 <tcp_receive+0xeb8>
 801071c:	2001dd3c 	.word	0x2001dd3c
 8010720:	2001dd39 	.word	0x2001dd39
 8010724:	2001dd0c 	.word	0x2001dd0c
 8010728:	2001dd2c 	.word	0x2001dd2c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801072c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	f040 80c5 	bne.w	80108c4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801073a:	4b7f      	ldr	r3, [pc, #508]	@ (8010938 <tcp_receive+0xf10>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010746:	2b00      	cmp	r3, #0
 8010748:	f340 80bc 	ble.w	80108c4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801074c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	899b      	ldrh	r3, [r3, #12]
 8010752:	b29b      	uxth	r3, r3
 8010754:	4618      	mov	r0, r3
 8010756:	f7f9 ff5b 	bl	800a610 <lwip_htons>
 801075a:	4603      	mov	r3, r0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	f003 0301 	and.w	r3, r3, #1
 8010762:	2b00      	cmp	r3, #0
 8010764:	f040 80be 	bne.w	80108e4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010768:	4874      	ldr	r0, [pc, #464]	@ (801093c <tcp_receive+0xf14>)
 801076a:	f7fd fa3b 	bl	800dbe4 <tcp_seg_copy>
 801076e:	4602      	mov	r2, r0
 8010770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010772:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 80b5 	beq.w	80108e8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801077e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010786:	8912      	ldrh	r2, [r2, #8]
 8010788:	441a      	add	r2, r3
 801078a:	4b6b      	ldr	r3, [pc, #428]	@ (8010938 <tcp_receive+0xf10>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	dd12      	ble.n	80107ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010794:	4b68      	ldr	r3, [pc, #416]	@ (8010938 <tcp_receive+0xf10>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	b29a      	uxth	r2, r3
 801079a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80107aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ac:	685a      	ldr	r2, [r3, #4]
 80107ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107b0:	891b      	ldrh	r3, [r3, #8]
 80107b2:	4619      	mov	r1, r3
 80107b4:	4610      	mov	r0, r2
 80107b6:	f7fb fa59 	bl	800bc6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80107ba:	4b61      	ldr	r3, [pc, #388]	@ (8010940 <tcp_receive+0xf18>)
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	461a      	mov	r2, r3
 80107c0:	4b5d      	ldr	r3, [pc, #372]	@ (8010938 <tcp_receive+0xf10>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	441a      	add	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ca:	6879      	ldr	r1, [r7, #4]
 80107cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80107ce:	440b      	add	r3, r1
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f340 8088 	ble.w	80108e8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80107d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	899b      	ldrh	r3, [r3, #12]
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f9 ff14 	bl	800a610 <lwip_htons>
 80107e8:	4603      	mov	r3, r0
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	f003 0301 	and.w	r3, r3, #1
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d021      	beq.n	8010838 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80107f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	899b      	ldrh	r3, [r3, #12]
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	b21b      	sxth	r3, r3
 8010800:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010804:	b21c      	sxth	r4, r3
 8010806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	899b      	ldrh	r3, [r3, #12]
 801080e:	b29b      	uxth	r3, r3
 8010810:	4618      	mov	r0, r3
 8010812:	f7f9 fefd 	bl	800a610 <lwip_htons>
 8010816:	4603      	mov	r3, r0
 8010818:	b2db      	uxtb	r3, r3
 801081a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801081e:	b29b      	uxth	r3, r3
 8010820:	4618      	mov	r0, r3
 8010822:	f7f9 fef5 	bl	800a610 <lwip_htons>
 8010826:	4603      	mov	r3, r0
 8010828:	b21b      	sxth	r3, r3
 801082a:	4323      	orrs	r3, r4
 801082c:	b21a      	sxth	r2, r3
 801082e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	b292      	uxth	r2, r2
 8010836:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801083c:	b29a      	uxth	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010842:	4413      	add	r3, r2
 8010844:	b299      	uxth	r1, r3
 8010846:	4b3c      	ldr	r3, [pc, #240]	@ (8010938 <tcp_receive+0xf10>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	b29a      	uxth	r2, r3
 801084c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	1a8a      	subs	r2, r1, r2
 8010852:	b292      	uxth	r2, r2
 8010854:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	685a      	ldr	r2, [r3, #4]
 801085c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	891b      	ldrh	r3, [r3, #8]
 8010862:	4619      	mov	r1, r3
 8010864:	4610      	mov	r0, r2
 8010866:	f7fb fa01 	bl	800bc6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801086a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	891c      	ldrh	r4, [r3, #8]
 8010870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	899b      	ldrh	r3, [r3, #12]
 8010878:	b29b      	uxth	r3, r3
 801087a:	4618      	mov	r0, r3
 801087c:	f7f9 fec8 	bl	800a610 <lwip_htons>
 8010880:	4603      	mov	r3, r0
 8010882:	b2db      	uxtb	r3, r3
 8010884:	f003 0303 	and.w	r3, r3, #3
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <tcp_receive+0xe68>
 801088c:	2301      	movs	r3, #1
 801088e:	e000      	b.n	8010892 <tcp_receive+0xe6a>
 8010890:	2300      	movs	r3, #0
 8010892:	4423      	add	r3, r4
 8010894:	b29a      	uxth	r2, r3
 8010896:	4b2a      	ldr	r3, [pc, #168]	@ (8010940 <tcp_receive+0xf18>)
 8010898:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801089a:	4b29      	ldr	r3, [pc, #164]	@ (8010940 <tcp_receive+0xf18>)
 801089c:	881b      	ldrh	r3, [r3, #0]
 801089e:	461a      	mov	r2, r3
 80108a0:	4b25      	ldr	r3, [pc, #148]	@ (8010938 <tcp_receive+0xf10>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	441a      	add	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80108ae:	440b      	add	r3, r1
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d019      	beq.n	80108e8 <tcp_receive+0xec0>
 80108b4:	4b23      	ldr	r3, [pc, #140]	@ (8010944 <tcp_receive+0xf1c>)
 80108b6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80108ba:	4923      	ldr	r1, [pc, #140]	@ (8010948 <tcp_receive+0xf20>)
 80108bc:	4823      	ldr	r0, [pc, #140]	@ (801094c <tcp_receive+0xf24>)
 80108be:	f007 f9d3 	bl	8017c68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80108c2:	e011      	b.n	80108e8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80108c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80108ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f47f aea5 	bne.w	801061c <tcp_receive+0xbf4>
 80108d2:	e00a      	b.n	80108ea <tcp_receive+0xec2>
                break;
 80108d4:	bf00      	nop
 80108d6:	e008      	b.n	80108ea <tcp_receive+0xec2>
                break;
 80108d8:	bf00      	nop
 80108da:	e006      	b.n	80108ea <tcp_receive+0xec2>
                  break;
 80108dc:	bf00      	nop
 80108de:	e004      	b.n	80108ea <tcp_receive+0xec2>
                  break;
 80108e0:	bf00      	nop
 80108e2:	e002      	b.n	80108ea <tcp_receive+0xec2>
                  break;
 80108e4:	bf00      	nop
 80108e6:	e000      	b.n	80108ea <tcp_receive+0xec2>
                break;
 80108e8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f001 fe8a 	bl	8012604 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80108f0:	e003      	b.n	80108fa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f001 fe86 	bl	8012604 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80108f8:	e01a      	b.n	8010930 <tcp_receive+0xf08>
 80108fa:	e019      	b.n	8010930 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80108fc:	4b0e      	ldr	r3, [pc, #56]	@ (8010938 <tcp_receive+0xf10>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	db0a      	blt.n	8010920 <tcp_receive+0xef8>
 801090a:	4b0b      	ldr	r3, [pc, #44]	@ (8010938 <tcp_receive+0xf10>)
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010912:	6879      	ldr	r1, [r7, #4]
 8010914:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010916:	440b      	add	r3, r1
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	3301      	adds	r3, #1
 801091c:	2b00      	cmp	r3, #0
 801091e:	dd07      	ble.n	8010930 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	8b5b      	ldrh	r3, [r3, #26]
 8010924:	f043 0302 	orr.w	r3, r3, #2
 8010928:	b29a      	uxth	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801092e:	e7ff      	b.n	8010930 <tcp_receive+0xf08>
 8010930:	bf00      	nop
 8010932:	3750      	adds	r7, #80	@ 0x50
 8010934:	46bd      	mov	sp, r7
 8010936:	bdb0      	pop	{r4, r5, r7, pc}
 8010938:	2001dd2c 	.word	0x2001dd2c
 801093c:	2001dd0c 	.word	0x2001dd0c
 8010940:	2001dd36 	.word	0x2001dd36
 8010944:	0801a130 	.word	0x0801a130
 8010948:	0801a4d8 	.word	0x0801a4d8
 801094c:	0801a17c 	.word	0x0801a17c

08010950 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010956:	4b15      	ldr	r3, [pc, #84]	@ (80109ac <tcp_get_next_optbyte+0x5c>)
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	1c5a      	adds	r2, r3, #1
 801095c:	b291      	uxth	r1, r2
 801095e:	4a13      	ldr	r2, [pc, #76]	@ (80109ac <tcp_get_next_optbyte+0x5c>)
 8010960:	8011      	strh	r1, [r2, #0]
 8010962:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010964:	4b12      	ldr	r3, [pc, #72]	@ (80109b0 <tcp_get_next_optbyte+0x60>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d004      	beq.n	8010976 <tcp_get_next_optbyte+0x26>
 801096c:	4b11      	ldr	r3, [pc, #68]	@ (80109b4 <tcp_get_next_optbyte+0x64>)
 801096e:	881b      	ldrh	r3, [r3, #0]
 8010970:	88fa      	ldrh	r2, [r7, #6]
 8010972:	429a      	cmp	r2, r3
 8010974:	d208      	bcs.n	8010988 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010976:	4b10      	ldr	r3, [pc, #64]	@ (80109b8 <tcp_get_next_optbyte+0x68>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	3314      	adds	r3, #20
 801097c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801097e:	88fb      	ldrh	r3, [r7, #6]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	4413      	add	r3, r2
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	e00b      	b.n	80109a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010988:	88fb      	ldrh	r3, [r7, #6]
 801098a:	b2da      	uxtb	r2, r3
 801098c:	4b09      	ldr	r3, [pc, #36]	@ (80109b4 <tcp_get_next_optbyte+0x64>)
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	b2db      	uxtb	r3, r3
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010996:	4b06      	ldr	r3, [pc, #24]	@ (80109b0 <tcp_get_next_optbyte+0x60>)
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	797b      	ldrb	r3, [r7, #5]
 801099c:	4413      	add	r3, r2
 801099e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr
 80109ac:	2001dd28 	.word	0x2001dd28
 80109b0:	2001dd24 	.word	0x2001dd24
 80109b4:	2001dd22 	.word	0x2001dd22
 80109b8:	2001dd1c 	.word	0x2001dd1c

080109bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d106      	bne.n	80109d8 <tcp_parseopt+0x1c>
 80109ca:	4b33      	ldr	r3, [pc, #204]	@ (8010a98 <tcp_parseopt+0xdc>)
 80109cc:	f240 727d 	movw	r2, #1917	@ 0x77d
 80109d0:	4932      	ldr	r1, [pc, #200]	@ (8010a9c <tcp_parseopt+0xe0>)
 80109d2:	4833      	ldr	r0, [pc, #204]	@ (8010aa0 <tcp_parseopt+0xe4>)
 80109d4:	f007 f948 	bl	8017c68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80109d8:	4b32      	ldr	r3, [pc, #200]	@ (8010aa4 <tcp_parseopt+0xe8>)
 80109da:	881b      	ldrh	r3, [r3, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d057      	beq.n	8010a90 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109e0:	4b31      	ldr	r3, [pc, #196]	@ (8010aa8 <tcp_parseopt+0xec>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	801a      	strh	r2, [r3, #0]
 80109e6:	e047      	b.n	8010a78 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 80109e8:	f7ff ffb2 	bl	8010950 <tcp_get_next_optbyte>
 80109ec:	4603      	mov	r3, r0
 80109ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	2b02      	cmp	r3, #2
 80109f4:	d006      	beq.n	8010a04 <tcp_parseopt+0x48>
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	dc2b      	bgt.n	8010a52 <tcp_parseopt+0x96>
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d043      	beq.n	8010a86 <tcp_parseopt+0xca>
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d039      	beq.n	8010a76 <tcp_parseopt+0xba>
 8010a02:	e026      	b.n	8010a52 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010a04:	f7ff ffa4 	bl	8010950 <tcp_get_next_optbyte>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b04      	cmp	r3, #4
 8010a0c:	d13d      	bne.n	8010a8a <tcp_parseopt+0xce>
 8010a0e:	4b26      	ldr	r3, [pc, #152]	@ (8010aa8 <tcp_parseopt+0xec>)
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	3301      	adds	r3, #1
 8010a14:	4a23      	ldr	r2, [pc, #140]	@ (8010aa4 <tcp_parseopt+0xe8>)
 8010a16:	8812      	ldrh	r2, [r2, #0]
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	da36      	bge.n	8010a8a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010a1c:	f7ff ff98 	bl	8010950 <tcp_get_next_optbyte>
 8010a20:	4603      	mov	r3, r0
 8010a22:	021b      	lsls	r3, r3, #8
 8010a24:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010a26:	f7ff ff93 	bl	8010950 <tcp_get_next_optbyte>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	89bb      	ldrh	r3, [r7, #12]
 8010a30:	4313      	orrs	r3, r2
 8010a32:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010a34:	89bb      	ldrh	r3, [r7, #12]
 8010a36:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d804      	bhi.n	8010a48 <tcp_parseopt+0x8c>
 8010a3e:	89bb      	ldrh	r3, [r7, #12]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <tcp_parseopt+0x8c>
 8010a44:	89ba      	ldrh	r2, [r7, #12]
 8010a46:	e001      	b.n	8010a4c <tcp_parseopt+0x90>
 8010a48:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010a50:	e012      	b.n	8010a78 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010a52:	f7ff ff7d 	bl	8010950 <tcp_get_next_optbyte>
 8010a56:	4603      	mov	r3, r0
 8010a58:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010a5a:	7afb      	ldrb	r3, [r7, #11]
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d916      	bls.n	8010a8e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010a60:	7afb      	ldrb	r3, [r7, #11]
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	4b10      	ldr	r3, [pc, #64]	@ (8010aa8 <tcp_parseopt+0xec>)
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	4413      	add	r3, r2
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	3b02      	subs	r3, #2
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	4b0d      	ldr	r3, [pc, #52]	@ (8010aa8 <tcp_parseopt+0xec>)
 8010a72:	801a      	strh	r2, [r3, #0]
 8010a74:	e000      	b.n	8010a78 <tcp_parseopt+0xbc>
          break;
 8010a76:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010a78:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa8 <tcp_parseopt+0xec>)
 8010a7a:	881a      	ldrh	r2, [r3, #0]
 8010a7c:	4b09      	ldr	r3, [pc, #36]	@ (8010aa4 <tcp_parseopt+0xe8>)
 8010a7e:	881b      	ldrh	r3, [r3, #0]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d3b1      	bcc.n	80109e8 <tcp_parseopt+0x2c>
 8010a84:	e004      	b.n	8010a90 <tcp_parseopt+0xd4>
          return;
 8010a86:	bf00      	nop
 8010a88:	e002      	b.n	8010a90 <tcp_parseopt+0xd4>
            return;
 8010a8a:	bf00      	nop
 8010a8c:	e000      	b.n	8010a90 <tcp_parseopt+0xd4>
            return;
 8010a8e:	bf00      	nop
      }
    }
  }
}
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	0801a130 	.word	0x0801a130
 8010a9c:	0801a594 	.word	0x0801a594
 8010aa0:	0801a17c 	.word	0x0801a17c
 8010aa4:	2001dd20 	.word	0x2001dd20
 8010aa8:	2001dd28 	.word	0x2001dd28

08010aac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010aac:	b480      	push	{r7}
 8010aae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010ab0:	4b05      	ldr	r3, [pc, #20]	@ (8010ac8 <tcp_trigger_input_pcb_close+0x1c>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f043 0310 	orr.w	r3, r3, #16
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	4b03      	ldr	r3, [pc, #12]	@ (8010ac8 <tcp_trigger_input_pcb_close+0x1c>)
 8010abc:	701a      	strb	r2, [r3, #0]
}
 8010abe:	bf00      	nop
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr
 8010ac8:	2001dd39 	.word	0x2001dd39

08010acc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00a      	beq.n	8010af4 <tcp_route+0x28>
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	7a1b      	ldrb	r3, [r3, #8]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d006      	beq.n	8010af4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	7a1b      	ldrb	r3, [r3, #8]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fa fe88 	bl	800b800 <netif_get_by_index>
 8010af0:	4603      	mov	r3, r0
 8010af2:	e003      	b.n	8010afc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f005 fc97 	bl	8016428 <ip4_route>
 8010afa:	4603      	mov	r3, r0
  }
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010b04:	b590      	push	{r4, r7, lr}
 8010b06:	b087      	sub	sp, #28
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	603b      	str	r3, [r7, #0]
 8010b10:	4613      	mov	r3, r2
 8010b12:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d105      	bne.n	8010b26 <tcp_create_segment+0x22>
 8010b1a:	4b43      	ldr	r3, [pc, #268]	@ (8010c28 <tcp_create_segment+0x124>)
 8010b1c:	22a3      	movs	r2, #163	@ 0xa3
 8010b1e:	4943      	ldr	r1, [pc, #268]	@ (8010c2c <tcp_create_segment+0x128>)
 8010b20:	4843      	ldr	r0, [pc, #268]	@ (8010c30 <tcp_create_segment+0x12c>)
 8010b22:	f007 f8a1 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d105      	bne.n	8010b38 <tcp_create_segment+0x34>
 8010b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8010c28 <tcp_create_segment+0x124>)
 8010b2e:	22a4      	movs	r2, #164	@ 0xa4
 8010b30:	4940      	ldr	r1, [pc, #256]	@ (8010c34 <tcp_create_segment+0x130>)
 8010b32:	483f      	ldr	r0, [pc, #252]	@ (8010c30 <tcp_create_segment+0x12c>)
 8010b34:	f007 f898 	bl	8017c68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	f003 0304 	and.w	r3, r3, #4
 8010b44:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010b46:	2003      	movs	r0, #3
 8010b48:	f7fa fa1e 	bl	800af88 <memp_malloc>
 8010b4c:	6138      	str	r0, [r7, #16]
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d104      	bne.n	8010b5e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010b54:	68b8      	ldr	r0, [r7, #8]
 8010b56:	f7fb fa0d 	bl	800bf74 <pbuf_free>
    return NULL;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	e060      	b.n	8010c20 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010b64:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	68ba      	ldr	r2, [r7, #8]
 8010b70:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	891a      	ldrh	r2, [r3, #8]
 8010b76:	7dfb      	ldrb	r3, [r7, #23]
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d205      	bcs.n	8010b8a <tcp_create_segment+0x86>
 8010b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8010c28 <tcp_create_segment+0x124>)
 8010b80:	22b0      	movs	r2, #176	@ 0xb0
 8010b82:	492d      	ldr	r1, [pc, #180]	@ (8010c38 <tcp_create_segment+0x134>)
 8010b84:	482a      	ldr	r0, [pc, #168]	@ (8010c30 <tcp_create_segment+0x12c>)
 8010b86:	f007 f86f 	bl	8017c68 <iprintf>
  seg->len = p->tot_len - optlen;
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	891a      	ldrh	r2, [r3, #8]
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010b9a:	2114      	movs	r1, #20
 8010b9c:	68b8      	ldr	r0, [r7, #8]
 8010b9e:	f7fb f953 	bl	800be48 <pbuf_add_header>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d004      	beq.n	8010bb2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ba8:	6938      	ldr	r0, [r7, #16]
 8010baa:	f7fd f802 	bl	800dbb2 <tcp_seg_free>
    return NULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	e036      	b.n	8010c20 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	685a      	ldr	r2, [r3, #4]
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	8ada      	ldrh	r2, [r3, #22]
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	68dc      	ldr	r4, [r3, #12]
 8010bc4:	4610      	mov	r0, r2
 8010bc6:	f7f9 fd23 	bl	800a610 <lwip_htons>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	8b1a      	ldrh	r2, [r3, #24]
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	68dc      	ldr	r4, [r3, #12]
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	f7f9 fd1a 	bl	800a610 <lwip_htons>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	68dc      	ldr	r4, [r3, #12]
 8010be4:	6838      	ldr	r0, [r7, #0]
 8010be6:	f7f9 fd29 	bl	800a63c <lwip_htonl>
 8010bea:	4603      	mov	r3, r0
 8010bec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	089b      	lsrs	r3, r3, #2
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	3305      	adds	r3, #5
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	031b      	lsls	r3, r3, #12
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	79fb      	ldrb	r3, [r7, #7]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	4313      	orrs	r3, r2
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	68dc      	ldr	r4, [r3, #12]
 8010c08:	4610      	mov	r0, r2
 8010c0a:	f7f9 fd01 	bl	800a610 <lwip_htons>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	68db      	ldr	r3, [r3, #12]
 8010c16:	2200      	movs	r2, #0
 8010c18:	749a      	strb	r2, [r3, #18]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	74da      	strb	r2, [r3, #19]
  return seg;
 8010c1e:	693b      	ldr	r3, [r7, #16]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	371c      	adds	r7, #28
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd90      	pop	{r4, r7, pc}
 8010c28:	0801a5b0 	.word	0x0801a5b0
 8010c2c:	0801a5e4 	.word	0x0801a5e4
 8010c30:	0801a604 	.word	0x0801a604
 8010c34:	0801a62c 	.word	0x0801a62c
 8010c38:	0801a650 	.word	0x0801a650

08010c3c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b086      	sub	sp, #24
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	607b      	str	r3, [r7, #4]
 8010c44:	4603      	mov	r3, r0
 8010c46:	73fb      	strb	r3, [r7, #15]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	81bb      	strh	r3, [r7, #12]
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010c50:	89bb      	ldrh	r3, [r7, #12]
 8010c52:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d105      	bne.n	8010c66 <tcp_pbuf_prealloc+0x2a>
 8010c5a:	4b30      	ldr	r3, [pc, #192]	@ (8010d1c <tcp_pbuf_prealloc+0xe0>)
 8010c5c:	22e8      	movs	r2, #232	@ 0xe8
 8010c5e:	4930      	ldr	r1, [pc, #192]	@ (8010d20 <tcp_pbuf_prealloc+0xe4>)
 8010c60:	4830      	ldr	r0, [pc, #192]	@ (8010d24 <tcp_pbuf_prealloc+0xe8>)
 8010c62:	f007 f801 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d105      	bne.n	8010c78 <tcp_pbuf_prealloc+0x3c>
 8010c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8010d1c <tcp_pbuf_prealloc+0xe0>)
 8010c6e:	22e9      	movs	r2, #233	@ 0xe9
 8010c70:	492d      	ldr	r1, [pc, #180]	@ (8010d28 <tcp_pbuf_prealloc+0xec>)
 8010c72:	482c      	ldr	r0, [pc, #176]	@ (8010d24 <tcp_pbuf_prealloc+0xe8>)
 8010c74:	f006 fff8 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010c78:	89ba      	ldrh	r2, [r7, #12]
 8010c7a:	897b      	ldrh	r3, [r7, #10]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d221      	bcs.n	8010cc4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010c80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010c84:	f003 0302 	and.w	r3, r3, #2
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d111      	bne.n	8010cb0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010c8c:	6a3b      	ldr	r3, [r7, #32]
 8010c8e:	8b5b      	ldrh	r3, [r3, #26]
 8010c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d115      	bne.n	8010cc4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010c98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d007      	beq.n	8010cb0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d103      	bne.n	8010cb0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d009      	beq.n	8010cc4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010cb0:	89bb      	ldrh	r3, [r7, #12]
 8010cb2:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8010cb6:	f023 0203 	bic.w	r2, r3, #3
 8010cba:	897b      	ldrh	r3, [r7, #10]
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	bf28      	it	cs
 8010cc0:	4613      	movcs	r3, r2
 8010cc2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010cc4:	8af9      	ldrh	r1, [r7, #22]
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fa fe6f 	bl	800b9b0 <pbuf_alloc>
 8010cd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d101      	bne.n	8010cde <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	e019      	b.n	8010d12 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d006      	beq.n	8010cf4 <tcp_pbuf_prealloc+0xb8>
 8010ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8010d1c <tcp_pbuf_prealloc+0xe0>)
 8010ce8:	f240 120b 	movw	r2, #267	@ 0x10b
 8010cec:	490f      	ldr	r1, [pc, #60]	@ (8010d2c <tcp_pbuf_prealloc+0xf0>)
 8010cee:	480d      	ldr	r0, [pc, #52]	@ (8010d24 <tcp_pbuf_prealloc+0xe8>)
 8010cf0:	f006 ffba 	bl	8017c68 <iprintf>
  *oversize = p->len - length;
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	895a      	ldrh	r2, [r3, #10]
 8010cf8:	89bb      	ldrh	r3, [r7, #12]
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	89ba      	ldrh	r2, [r7, #12]
 8010d06:	811a      	strh	r2, [r3, #8]
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	891a      	ldrh	r2, [r3, #8]
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	815a      	strh	r2, [r3, #10]
  return p;
 8010d10:	693b      	ldr	r3, [r7, #16]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3718      	adds	r7, #24
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	0801a5b0 	.word	0x0801a5b0
 8010d20:	0801a668 	.word	0x0801a668
 8010d24:	0801a604 	.word	0x0801a604
 8010d28:	0801a68c 	.word	0x0801a68c
 8010d2c:	0801a6ac 	.word	0x0801a6ac

08010d30 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d106      	bne.n	8010d50 <tcp_write_checks+0x20>
 8010d42:	4b33      	ldr	r3, [pc, #204]	@ (8010e10 <tcp_write_checks+0xe0>)
 8010d44:	f240 1233 	movw	r2, #307	@ 0x133
 8010d48:	4932      	ldr	r1, [pc, #200]	@ (8010e14 <tcp_write_checks+0xe4>)
 8010d4a:	4833      	ldr	r0, [pc, #204]	@ (8010e18 <tcp_write_checks+0xe8>)
 8010d4c:	f006 ff8c 	bl	8017c68 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7d1b      	ldrb	r3, [r3, #20]
 8010d54:	2b04      	cmp	r3, #4
 8010d56:	d00e      	beq.n	8010d76 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010d5c:	2b07      	cmp	r3, #7
 8010d5e:	d00a      	beq.n	8010d76 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d006      	beq.n	8010d76 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010d6c:	2b03      	cmp	r3, #3
 8010d6e:	d002      	beq.n	8010d76 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010d70:	f06f 030a 	mvn.w	r3, #10
 8010d74:	e048      	b.n	8010e08 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010d76:	887b      	ldrh	r3, [r7, #2]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d101      	bne.n	8010d80 <tcp_write_checks+0x50>
    return ERR_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e043      	b.n	8010e08 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d86:	887a      	ldrh	r2, [r7, #2]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d909      	bls.n	8010da0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	8b5b      	ldrh	r3, [r3, #26]
 8010d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d9e:	e033      	b.n	8010e08 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010da6:	2b2f      	cmp	r3, #47	@ 0x2f
 8010da8:	d909      	bls.n	8010dbe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	8b5b      	ldrh	r3, [r3, #26]
 8010dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010db8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dbc:	e024      	b.n	8010e08 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00f      	beq.n	8010de8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d11a      	bne.n	8010e06 <tcp_write_checks+0xd6>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d116      	bne.n	8010e06 <tcp_write_checks+0xd6>
 8010dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8010e10 <tcp_write_checks+0xe0>)
 8010dda:	f240 1255 	movw	r2, #341	@ 0x155
 8010dde:	490f      	ldr	r1, [pc, #60]	@ (8010e1c <tcp_write_checks+0xec>)
 8010de0:	480d      	ldr	r0, [pc, #52]	@ (8010e18 <tcp_write_checks+0xe8>)
 8010de2:	f006 ff41 	bl	8017c68 <iprintf>
 8010de6:	e00e      	b.n	8010e06 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d103      	bne.n	8010df8 <tcp_write_checks+0xc8>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d006      	beq.n	8010e06 <tcp_write_checks+0xd6>
 8010df8:	4b05      	ldr	r3, [pc, #20]	@ (8010e10 <tcp_write_checks+0xe0>)
 8010dfa:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8010dfe:	4908      	ldr	r1, [pc, #32]	@ (8010e20 <tcp_write_checks+0xf0>)
 8010e00:	4805      	ldr	r0, [pc, #20]	@ (8010e18 <tcp_write_checks+0xe8>)
 8010e02:	f006 ff31 	bl	8017c68 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010e06:	2300      	movs	r3, #0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	0801a5b0 	.word	0x0801a5b0
 8010e14:	0801a6c0 	.word	0x0801a6c0
 8010e18:	0801a604 	.word	0x0801a604
 8010e1c:	0801a6e0 	.word	0x0801a6e0
 8010e20:	0801a71c 	.word	0x0801a71c

08010e24 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010e24:	b590      	push	{r4, r7, lr}
 8010e26:	b09b      	sub	sp, #108	@ 0x6c
 8010e28:	af04      	add	r7, sp, #16
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	4611      	mov	r1, r2
 8010e30:	461a      	mov	r2, r3
 8010e32:	460b      	mov	r3, r1
 8010e34:	80fb      	strh	r3, [r7, #6]
 8010e36:	4613      	mov	r3, r2
 8010e38:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e42:	2300      	movs	r3, #0
 8010e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e46:	2300      	movs	r3, #0
 8010e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010e4e:	2300      	movs	r3, #0
 8010e50:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010e54:	2300      	movs	r3, #0
 8010e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d109      	bne.n	8010e80 <tcp_write+0x5c>
 8010e6c:	4ba4      	ldr	r3, [pc, #656]	@ (8011100 <tcp_write+0x2dc>)
 8010e6e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8010e72:	49a4      	ldr	r1, [pc, #656]	@ (8011104 <tcp_write+0x2e0>)
 8010e74:	48a4      	ldr	r0, [pc, #656]	@ (8011108 <tcp_write+0x2e4>)
 8010e76:	f006 fef7 	bl	8017c68 <iprintf>
 8010e7a:	f06f 030f 	mvn.w	r3, #15
 8010e7e:	e32a      	b.n	80114d6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e86:	085b      	lsrs	r3, r3, #1
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	bf28      	it	cs
 8010e92:	4613      	movcs	r3, r2
 8010e94:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d102      	bne.n	8010ea2 <tcp_write+0x7e>
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ea0:	e000      	b.n	8010ea4 <tcp_write+0x80>
 8010ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ea4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d109      	bne.n	8010ec0 <tcp_write+0x9c>
 8010eac:	4b94      	ldr	r3, [pc, #592]	@ (8011100 <tcp_write+0x2dc>)
 8010eae:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8010eb2:	4996      	ldr	r1, [pc, #600]	@ (801110c <tcp_write+0x2e8>)
 8010eb4:	4894      	ldr	r0, [pc, #592]	@ (8011108 <tcp_write+0x2e4>)
 8010eb6:	f006 fed7 	bl	8017c68 <iprintf>
 8010eba:	f06f 030f 	mvn.w	r3, #15
 8010ebe:	e30a      	b.n	80114d6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010ec0:	88fb      	ldrh	r3, [r7, #6]
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f7ff ff33 	bl	8010d30 <tcp_write_checks>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8010ed0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <tcp_write+0xba>
    return err;
 8010ed8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010edc:	e2fb      	b.n	80114d6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ee4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f000 80f6 	beq.w	80110e4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8010efe:	e002      	b.n	8010f06 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1f8      	bne.n	8010f00 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f10:	7a9b      	ldrb	r3, [r3, #10]
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f003 0304 	and.w	r3, r3, #4
 8010f1a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010f1c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f20:	891b      	ldrh	r3, [r3, #8]
 8010f22:	4619      	mov	r1, r3
 8010f24:	8c3b      	ldrh	r3, [r7, #32]
 8010f26:	440b      	add	r3, r1
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	da06      	bge.n	8010f3a <tcp_write+0x116>
 8010f2c:	4b74      	ldr	r3, [pc, #464]	@ (8011100 <tcp_write+0x2dc>)
 8010f2e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010f32:	4977      	ldr	r1, [pc, #476]	@ (8011110 <tcp_write+0x2ec>)
 8010f34:	4874      	ldr	r0, [pc, #464]	@ (8011108 <tcp_write+0x2e4>)
 8010f36:	f006 fe97 	bl	8017c68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f3c:	891a      	ldrh	r2, [r3, #8]
 8010f3e:	8c3b      	ldrh	r3, [r7, #32]
 8010f40:	4413      	add	r3, r2
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010f46:	1ad3      	subs	r3, r2, r3
 8010f48:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010f50:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010f52:	8a7b      	ldrh	r3, [r7, #18]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d026      	beq.n	8010fa6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010f58:	8a7b      	ldrh	r3, [r7, #18]
 8010f5a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d206      	bcs.n	8010f6e <tcp_write+0x14a>
 8010f60:	4b67      	ldr	r3, [pc, #412]	@ (8011100 <tcp_write+0x2dc>)
 8010f62:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010f66:	496b      	ldr	r1, [pc, #428]	@ (8011114 <tcp_write+0x2f0>)
 8010f68:	4867      	ldr	r0, [pc, #412]	@ (8011108 <tcp_write+0x2e4>)
 8010f6a:	f006 fe7d 	bl	8017c68 <iprintf>
      seg = last_unsent;
 8010f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010f72:	8a7b      	ldrh	r3, [r7, #18]
 8010f74:	88fa      	ldrh	r2, [r7, #6]
 8010f76:	4293      	cmp	r3, r2
 8010f78:	bf28      	it	cs
 8010f7a:	4613      	movcs	r3, r2
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010f80:	4293      	cmp	r3, r2
 8010f82:	bf28      	it	cs
 8010f84:	4613      	movcs	r3, r2
 8010f86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8010f88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010f8e:	4413      	add	r3, r2
 8010f90:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010f94:	8a7a      	ldrh	r2, [r7, #18]
 8010f96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010f9e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010fa0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010fa6:	8a7b      	ldrh	r3, [r7, #18]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00b      	beq.n	8010fc4 <tcp_write+0x1a0>
 8010fac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010fb0:	88fb      	ldrh	r3, [r7, #6]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d006      	beq.n	8010fc4 <tcp_write+0x1a0>
 8010fb6:	4b52      	ldr	r3, [pc, #328]	@ (8011100 <tcp_write+0x2dc>)
 8010fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fbc:	4956      	ldr	r1, [pc, #344]	@ (8011118 <tcp_write+0x2f4>)
 8010fbe:	4852      	ldr	r0, [pc, #328]	@ (8011108 <tcp_write+0x2e4>)
 8010fc0:	f006 fe52 	bl	8017c68 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010fc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010fc8:	88fb      	ldrh	r3, [r7, #6]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	f080 8167 	bcs.w	801129e <tcp_write+0x47a>
 8010fd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f000 8163 	beq.w	801129e <tcp_write+0x47a>
 8010fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fda:	891b      	ldrh	r3, [r3, #8]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 815e 	beq.w	801129e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010fe2:	88fa      	ldrh	r2, [r7, #6]
 8010fe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010fe8:	1ad2      	subs	r2, r2, r3
 8010fea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010fec:	4293      	cmp	r3, r2
 8010fee:	bfa8      	it	ge
 8010ff0:	4613      	movge	r3, r2
 8010ff2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ff8:	797b      	ldrb	r3, [r7, #5]
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d027      	beq.n	8011052 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011002:	f107 0012 	add.w	r0, r7, #18
 8011006:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011008:	8bf9      	ldrh	r1, [r7, #30]
 801100a:	2301      	movs	r3, #1
 801100c:	9302      	str	r3, [sp, #8]
 801100e:	797b      	ldrb	r3, [r7, #5]
 8011010:	9301      	str	r3, [sp, #4]
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	4603      	mov	r3, r0
 8011018:	2000      	movs	r0, #0
 801101a:	f7ff fe0f 	bl	8010c3c <tcp_pbuf_prealloc>
 801101e:	6578      	str	r0, [r7, #84]	@ 0x54
 8011020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 8225 	beq.w	8011472 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801102a:	6858      	ldr	r0, [r3, #4]
 801102c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	4413      	add	r3, r2
 8011034:	8bfa      	ldrh	r2, [r7, #30]
 8011036:	4619      	mov	r1, r3
 8011038:	f006 ff4f 	bl	8017eda <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801103c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801103e:	f7fb f827 	bl	800c090 <pbuf_clen>
 8011042:	4603      	mov	r3, r0
 8011044:	461a      	mov	r2, r3
 8011046:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801104a:	4413      	add	r3, r2
 801104c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011050:	e041      	b.n	80110d6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	637b      	str	r3, [r7, #52]	@ 0x34
 8011058:	e002      	b.n	8011060 <tcp_write+0x23c>
 801105a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1f8      	bne.n	801105a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801106a:	7b1b      	ldrb	r3, [r3, #12]
 801106c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d115      	bne.n	80110a0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801107a:	8952      	ldrh	r2, [r2, #10]
 801107c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	429a      	cmp	r2, r3
 8011082:	d10d      	bne.n	80110a0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011084:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011088:	2b00      	cmp	r3, #0
 801108a:	d006      	beq.n	801109a <tcp_write+0x276>
 801108c:	4b1c      	ldr	r3, [pc, #112]	@ (8011100 <tcp_write+0x2dc>)
 801108e:	f240 2231 	movw	r2, #561	@ 0x231
 8011092:	4922      	ldr	r1, [pc, #136]	@ (801111c <tcp_write+0x2f8>)
 8011094:	481c      	ldr	r0, [pc, #112]	@ (8011108 <tcp_write+0x2e4>)
 8011096:	f006 fde7 	bl	8017c68 <iprintf>
          extendlen = seglen;
 801109a:	8bfb      	ldrh	r3, [r7, #30]
 801109c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801109e:	e01a      	b.n	80110d6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80110a0:	8bfb      	ldrh	r3, [r7, #30]
 80110a2:	2201      	movs	r2, #1
 80110a4:	4619      	mov	r1, r3
 80110a6:	2000      	movs	r0, #0
 80110a8:	f7fa fc82 	bl	800b9b0 <pbuf_alloc>
 80110ac:	6578      	str	r0, [r7, #84]	@ 0x54
 80110ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 81e0 	beq.w	8011476 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80110b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	441a      	add	r2, r3
 80110be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110c0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80110c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80110c4:	f7fa ffe4 	bl	800c090 <pbuf_clen>
 80110c8:	4603      	mov	r3, r0
 80110ca:	461a      	mov	r2, r3
 80110cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80110d0:	4413      	add	r3, r2
 80110d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80110d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80110da:	8bfb      	ldrh	r3, [r7, #30]
 80110dc:	4413      	add	r3, r2
 80110de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80110e2:	e0dc      	b.n	801129e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f000 80d7 	beq.w	801129e <tcp_write+0x47a>
 80110f0:	4b03      	ldr	r3, [pc, #12]	@ (8011100 <tcp_write+0x2dc>)
 80110f2:	f240 224a 	movw	r2, #586	@ 0x24a
 80110f6:	490a      	ldr	r1, [pc, #40]	@ (8011120 <tcp_write+0x2fc>)
 80110f8:	4803      	ldr	r0, [pc, #12]	@ (8011108 <tcp_write+0x2e4>)
 80110fa:	f006 fdb5 	bl	8017c68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80110fe:	e0ce      	b.n	801129e <tcp_write+0x47a>
 8011100:	0801a5b0 	.word	0x0801a5b0
 8011104:	0801a750 	.word	0x0801a750
 8011108:	0801a604 	.word	0x0801a604
 801110c:	0801a768 	.word	0x0801a768
 8011110:	0801a79c 	.word	0x0801a79c
 8011114:	0801a7b4 	.word	0x0801a7b4
 8011118:	0801a7d4 	.word	0x0801a7d4
 801111c:	0801a7f4 	.word	0x0801a7f4
 8011120:	0801a820 	.word	0x0801a820
    struct pbuf *p;
    u16_t left = len - pos;
 8011124:	88fa      	ldrh	r2, [r7, #6]
 8011126:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801112e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011132:	b29b      	uxth	r3, r3
 8011134:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011136:	1ad3      	subs	r3, r2, r3
 8011138:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801113a:	8b7a      	ldrh	r2, [r7, #26]
 801113c:	8bbb      	ldrh	r3, [r7, #28]
 801113e:	4293      	cmp	r3, r2
 8011140:	bf28      	it	cs
 8011142:	4613      	movcs	r3, r2
 8011144:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011146:	797b      	ldrb	r3, [r7, #5]
 8011148:	f003 0301 	and.w	r3, r3, #1
 801114c:	2b00      	cmp	r3, #0
 801114e:	d036      	beq.n	80111be <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011150:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011154:	b29a      	uxth	r2, r3
 8011156:	8b3b      	ldrh	r3, [r7, #24]
 8011158:	4413      	add	r3, r2
 801115a:	b299      	uxth	r1, r3
 801115c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801115e:	2b00      	cmp	r3, #0
 8011160:	bf0c      	ite	eq
 8011162:	2301      	moveq	r3, #1
 8011164:	2300      	movne	r3, #0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f107 0012 	add.w	r0, r7, #18
 801116c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801116e:	9302      	str	r3, [sp, #8]
 8011170:	797b      	ldrb	r3, [r7, #5]
 8011172:	9301      	str	r3, [sp, #4]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	9300      	str	r3, [sp, #0]
 8011178:	4603      	mov	r3, r0
 801117a:	2036      	movs	r0, #54	@ 0x36
 801117c:	f7ff fd5e 	bl	8010c3c <tcp_pbuf_prealloc>
 8011180:	6338      	str	r0, [r7, #48]	@ 0x30
 8011182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 8178 	beq.w	801147a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801118a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118c:	895b      	ldrh	r3, [r3, #10]
 801118e:	8b3a      	ldrh	r2, [r7, #24]
 8011190:	429a      	cmp	r2, r3
 8011192:	d906      	bls.n	80111a2 <tcp_write+0x37e>
 8011194:	4b8c      	ldr	r3, [pc, #560]	@ (80113c8 <tcp_write+0x5a4>)
 8011196:	f240 2266 	movw	r2, #614	@ 0x266
 801119a:	498c      	ldr	r1, [pc, #560]	@ (80113cc <tcp_write+0x5a8>)
 801119c:	488c      	ldr	r0, [pc, #560]	@ (80113d0 <tcp_write+0x5ac>)
 801119e:	f006 fd63 	bl	8017c68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80111a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a4:	685a      	ldr	r2, [r3, #4]
 80111a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80111aa:	18d0      	adds	r0, r2, r3
 80111ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80111b0:	68ba      	ldr	r2, [r7, #8]
 80111b2:	4413      	add	r3, r2
 80111b4:	8b3a      	ldrh	r2, [r7, #24]
 80111b6:	4619      	mov	r1, r3
 80111b8:	f006 fe8f 	bl	8017eda <memcpy>
 80111bc:	e02f      	b.n	801121e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80111be:	8a7b      	ldrh	r3, [r7, #18]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d006      	beq.n	80111d2 <tcp_write+0x3ae>
 80111c4:	4b80      	ldr	r3, [pc, #512]	@ (80113c8 <tcp_write+0x5a4>)
 80111c6:	f240 2271 	movw	r2, #625	@ 0x271
 80111ca:	4982      	ldr	r1, [pc, #520]	@ (80113d4 <tcp_write+0x5b0>)
 80111cc:	4880      	ldr	r0, [pc, #512]	@ (80113d0 <tcp_write+0x5ac>)
 80111ce:	f006 fd4b 	bl	8017c68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80111d2:	8b3b      	ldrh	r3, [r7, #24]
 80111d4:	2201      	movs	r2, #1
 80111d6:	4619      	mov	r1, r3
 80111d8:	2036      	movs	r0, #54	@ 0x36
 80111da:	f7fa fbe9 	bl	800b9b0 <pbuf_alloc>
 80111de:	6178      	str	r0, [r7, #20]
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f000 814b 	beq.w	801147e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80111e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	441a      	add	r2, r3
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80111f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80111fe:	4619      	mov	r1, r3
 8011200:	2036      	movs	r0, #54	@ 0x36
 8011202:	f7fa fbd5 	bl	800b9b0 <pbuf_alloc>
 8011206:	6338      	str	r0, [r7, #48]	@ 0x30
 8011208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801120a:	2b00      	cmp	r3, #0
 801120c:	d103      	bne.n	8011216 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801120e:	6978      	ldr	r0, [r7, #20]
 8011210:	f7fa feb0 	bl	800bf74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011214:	e136      	b.n	8011484 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011216:	6979      	ldr	r1, [r7, #20]
 8011218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801121a:	f7fa ff79 	bl	800c110 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801121e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011220:	f7fa ff36 	bl	800c090 <pbuf_clen>
 8011224:	4603      	mov	r3, r0
 8011226:	461a      	mov	r2, r3
 8011228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801122c:	4413      	add	r3, r2
 801122e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011236:	2b30      	cmp	r3, #48	@ 0x30
 8011238:	d903      	bls.n	8011242 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801123a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801123c:	f7fa fe9a 	bl	800bf74 <pbuf_free>
      goto memerr;
 8011240:	e120      	b.n	8011484 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011246:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801124a:	441a      	add	r2, r3
 801124c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011250:	9300      	str	r3, [sp, #0]
 8011252:	4613      	mov	r3, r2
 8011254:	2200      	movs	r2, #0
 8011256:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f7ff fc53 	bl	8010b04 <tcp_create_segment>
 801125e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 810d 	beq.w	8011482 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801126a:	2b00      	cmp	r3, #0
 801126c:	d102      	bne.n	8011274 <tcp_write+0x450>
      queue = seg;
 801126e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011270:	647b      	str	r3, [r7, #68]	@ 0x44
 8011272:	e00c      	b.n	801128e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011276:	2b00      	cmp	r3, #0
 8011278:	d106      	bne.n	8011288 <tcp_write+0x464>
 801127a:	4b53      	ldr	r3, [pc, #332]	@ (80113c8 <tcp_write+0x5a4>)
 801127c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011280:	4955      	ldr	r1, [pc, #340]	@ (80113d8 <tcp_write+0x5b4>)
 8011282:	4853      	ldr	r0, [pc, #332]	@ (80113d0 <tcp_write+0x5ac>)
 8011284:	f006 fcf0 	bl	8017c68 <iprintf>
      prev_seg->next = seg;
 8011288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801128a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801128c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801128e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011290:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011292:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011296:	8b3b      	ldrh	r3, [r7, #24]
 8011298:	4413      	add	r3, r2
 801129a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801129e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80112a2:	88fb      	ldrh	r3, [r7, #6]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	f4ff af3d 	bcc.w	8011124 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80112aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d02c      	beq.n	801130a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80112b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112b6:	e01e      	b.n	80112f6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80112b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ba:	891a      	ldrh	r2, [r3, #8]
 80112bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80112be:	4413      	add	r3, r2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80112c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d110      	bne.n	80112f0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80112ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112d4:	8952      	ldrh	r2, [r2, #10]
 80112d6:	4413      	add	r3, r2
 80112d8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80112da:	68b9      	ldr	r1, [r7, #8]
 80112dc:	4618      	mov	r0, r3
 80112de:	f006 fdfc 	bl	8017eda <memcpy>
        p->len += oversize_used;
 80112e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112e4:	895a      	ldrh	r2, [r3, #10]
 80112e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80112e8:	4413      	add	r3, r2
 80112ea:	b29a      	uxth	r2, r3
 80112ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80112f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1dd      	bne.n	80112b8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80112fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112fe:	891a      	ldrh	r2, [r3, #8]
 8011300:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011302:	4413      	add	r3, r2
 8011304:	b29a      	uxth	r2, r3
 8011306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011308:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801130a:	8a7a      	ldrh	r2, [r7, #18]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011314:	2b00      	cmp	r3, #0
 8011316:	d018      	beq.n	801134a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801131a:	2b00      	cmp	r3, #0
 801131c:	d106      	bne.n	801132c <tcp_write+0x508>
 801131e:	4b2a      	ldr	r3, [pc, #168]	@ (80113c8 <tcp_write+0x5a4>)
 8011320:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011324:	492d      	ldr	r1, [pc, #180]	@ (80113dc <tcp_write+0x5b8>)
 8011326:	482a      	ldr	r0, [pc, #168]	@ (80113d0 <tcp_write+0x5ac>)
 8011328:	f006 fc9e 	bl	8017c68 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801132c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011332:	4618      	mov	r0, r3
 8011334:	f7fa feec 	bl	800c110 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801133a:	891a      	ldrh	r2, [r3, #8]
 801133c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801133e:	891b      	ldrh	r3, [r3, #8]
 8011340:	4413      	add	r3, r2
 8011342:	b29a      	uxth	r2, r3
 8011344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011346:	811a      	strh	r2, [r3, #8]
 8011348:	e037      	b.n	80113ba <tcp_write+0x596>
  } else if (extendlen > 0) {
 801134a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801134c:	2b00      	cmp	r3, #0
 801134e:	d034      	beq.n	80113ba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011352:	2b00      	cmp	r3, #0
 8011354:	d003      	beq.n	801135e <tcp_write+0x53a>
 8011356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d106      	bne.n	801136c <tcp_write+0x548>
 801135e:	4b1a      	ldr	r3, [pc, #104]	@ (80113c8 <tcp_write+0x5a4>)
 8011360:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011364:	491e      	ldr	r1, [pc, #120]	@ (80113e0 <tcp_write+0x5bc>)
 8011366:	481a      	ldr	r0, [pc, #104]	@ (80113d0 <tcp_write+0x5ac>)
 8011368:	f006 fc7e 	bl	8017c68 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801136c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011372:	e009      	b.n	8011388 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011376:	891a      	ldrh	r2, [r3, #8]
 8011378:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801137a:	4413      	add	r3, r2
 801137c:	b29a      	uxth	r2, r3
 801137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011380:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d1f1      	bne.n	8011374 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011392:	891a      	ldrh	r2, [r3, #8]
 8011394:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011396:	4413      	add	r3, r2
 8011398:	b29a      	uxth	r2, r3
 801139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801139c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801139e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113a0:	895a      	ldrh	r2, [r3, #10]
 80113a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80113a4:	4413      	add	r3, r2
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113aa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80113ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113ae:	891a      	ldrh	r2, [r3, #8]
 80113b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80113b2:	4413      	add	r3, r2
 80113b4:	b29a      	uxth	r2, r3
 80113b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80113ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d111      	bne.n	80113e4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80113c6:	e010      	b.n	80113ea <tcp_write+0x5c6>
 80113c8:	0801a5b0 	.word	0x0801a5b0
 80113cc:	0801a850 	.word	0x0801a850
 80113d0:	0801a604 	.word	0x0801a604
 80113d4:	0801a890 	.word	0x0801a890
 80113d8:	0801a8a0 	.word	0x0801a8a0
 80113dc:	0801a8b4 	.word	0x0801a8b4
 80113e0:	0801a8ec 	.word	0x0801a8ec
  } else {
    last_unsent->next = queue;
 80113e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80113ee:	88fb      	ldrh	r3, [r7, #6]
 80113f0:	441a      	add	r2, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80113fc:	88fb      	ldrh	r3, [r7, #6]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	b29a      	uxth	r2, r3
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801140e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00e      	beq.n	801143a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011420:	2b00      	cmp	r3, #0
 8011422:	d10a      	bne.n	801143a <tcp_write+0x616>
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011428:	2b00      	cmp	r3, #0
 801142a:	d106      	bne.n	801143a <tcp_write+0x616>
 801142c:	4b2c      	ldr	r3, [pc, #176]	@ (80114e0 <tcp_write+0x6bc>)
 801142e:	f240 3212 	movw	r2, #786	@ 0x312
 8011432:	492c      	ldr	r1, [pc, #176]	@ (80114e4 <tcp_write+0x6c0>)
 8011434:	482c      	ldr	r0, [pc, #176]	@ (80114e8 <tcp_write+0x6c4>)
 8011436:	f006 fc17 	bl	8017c68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801143a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801143c:	2b00      	cmp	r3, #0
 801143e:	d016      	beq.n	801146e <tcp_write+0x64a>
 8011440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d012      	beq.n	801146e <tcp_write+0x64a>
 8011448:	797b      	ldrb	r3, [r7, #5]
 801144a:	f003 0302 	and.w	r3, r3, #2
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10d      	bne.n	801146e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	899b      	ldrh	r3, [r3, #12]
 8011458:	b29c      	uxth	r4, r3
 801145a:	2008      	movs	r0, #8
 801145c:	f7f9 f8d8 	bl	800a610 <lwip_htons>
 8011460:	4603      	mov	r3, r0
 8011462:	461a      	mov	r2, r3
 8011464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	4322      	orrs	r2, r4
 801146a:	b292      	uxth	r2, r2
 801146c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801146e:	2300      	movs	r3, #0
 8011470:	e031      	b.n	80114d6 <tcp_write+0x6b2>
          goto memerr;
 8011472:	bf00      	nop
 8011474:	e006      	b.n	8011484 <tcp_write+0x660>
            goto memerr;
 8011476:	bf00      	nop
 8011478:	e004      	b.n	8011484 <tcp_write+0x660>
        goto memerr;
 801147a:	bf00      	nop
 801147c:	e002      	b.n	8011484 <tcp_write+0x660>
        goto memerr;
 801147e:	bf00      	nop
 8011480:	e000      	b.n	8011484 <tcp_write+0x660>
      goto memerr;
 8011482:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	8b5b      	ldrh	r3, [r3, #26]
 8011488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801148c:	b29a      	uxth	r2, r3
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011494:	2b00      	cmp	r3, #0
 8011496:	d002      	beq.n	801149e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011498:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801149a:	f7fa fd6b 	bl	800bf74 <pbuf_free>
  }
  if (queue != NULL) {
 801149e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d002      	beq.n	80114aa <tcp_write+0x686>
    tcp_segs_free(queue);
 80114a4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80114a6:	f7fc fb6f 	bl	800db88 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00e      	beq.n	80114d2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10a      	bne.n	80114d2 <tcp_write+0x6ae>
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d106      	bne.n	80114d2 <tcp_write+0x6ae>
 80114c4:	4b06      	ldr	r3, [pc, #24]	@ (80114e0 <tcp_write+0x6bc>)
 80114c6:	f240 3227 	movw	r2, #807	@ 0x327
 80114ca:	4906      	ldr	r1, [pc, #24]	@ (80114e4 <tcp_write+0x6c0>)
 80114cc:	4806      	ldr	r0, [pc, #24]	@ (80114e8 <tcp_write+0x6c4>)
 80114ce:	f006 fbcb 	bl	8017c68 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80114d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	375c      	adds	r7, #92	@ 0x5c
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd90      	pop	{r4, r7, pc}
 80114de:	bf00      	nop
 80114e0:	0801a5b0 	.word	0x0801a5b0
 80114e4:	0801a924 	.word	0x0801a924
 80114e8:	0801a604 	.word	0x0801a604

080114ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80114ec:	b590      	push	{r4, r7, lr}
 80114ee:	b08b      	sub	sp, #44	@ 0x2c
 80114f0:	af02      	add	r7, sp, #8
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	460b      	mov	r3, r1
 80114f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80114f8:	2300      	movs	r3, #0
 80114fa:	61fb      	str	r3, [r7, #28]
 80114fc:	2300      	movs	r3, #0
 80114fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011500:	2300      	movs	r3, #0
 8011502:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d106      	bne.n	8011518 <tcp_split_unsent_seg+0x2c>
 801150a:	4b95      	ldr	r3, [pc, #596]	@ (8011760 <tcp_split_unsent_seg+0x274>)
 801150c:	f240 324b 	movw	r2, #843	@ 0x34b
 8011510:	4994      	ldr	r1, [pc, #592]	@ (8011764 <tcp_split_unsent_seg+0x278>)
 8011512:	4895      	ldr	r0, [pc, #596]	@ (8011768 <tcp_split_unsent_seg+0x27c>)
 8011514:	f006 fba8 	bl	8017c68 <iprintf>

  useg = pcb->unsent;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801151c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d102      	bne.n	801152a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011524:	f04f 33ff 	mov.w	r3, #4294967295
 8011528:	e116      	b.n	8011758 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801152a:	887b      	ldrh	r3, [r7, #2]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d109      	bne.n	8011544 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011530:	4b8b      	ldr	r3, [pc, #556]	@ (8011760 <tcp_split_unsent_seg+0x274>)
 8011532:	f240 3253 	movw	r2, #851	@ 0x353
 8011536:	498d      	ldr	r1, [pc, #564]	@ (801176c <tcp_split_unsent_seg+0x280>)
 8011538:	488b      	ldr	r0, [pc, #556]	@ (8011768 <tcp_split_unsent_seg+0x27c>)
 801153a:	f006 fb95 	bl	8017c68 <iprintf>
    return ERR_VAL;
 801153e:	f06f 0305 	mvn.w	r3, #5
 8011542:	e109      	b.n	8011758 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	891b      	ldrh	r3, [r3, #8]
 8011548:	887a      	ldrh	r2, [r7, #2]
 801154a:	429a      	cmp	r2, r3
 801154c:	d301      	bcc.n	8011552 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801154e:	2300      	movs	r3, #0
 8011550:	e102      	b.n	8011758 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011556:	887a      	ldrh	r2, [r7, #2]
 8011558:	429a      	cmp	r2, r3
 801155a:	d906      	bls.n	801156a <tcp_split_unsent_seg+0x7e>
 801155c:	4b80      	ldr	r3, [pc, #512]	@ (8011760 <tcp_split_unsent_seg+0x274>)
 801155e:	f240 325b 	movw	r2, #859	@ 0x35b
 8011562:	4983      	ldr	r1, [pc, #524]	@ (8011770 <tcp_split_unsent_seg+0x284>)
 8011564:	4880      	ldr	r0, [pc, #512]	@ (8011768 <tcp_split_unsent_seg+0x27c>)
 8011566:	f006 fb7f 	bl	8017c68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	891b      	ldrh	r3, [r3, #8]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d106      	bne.n	8011580 <tcp_split_unsent_seg+0x94>
 8011572:	4b7b      	ldr	r3, [pc, #492]	@ (8011760 <tcp_split_unsent_seg+0x274>)
 8011574:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011578:	497e      	ldr	r1, [pc, #504]	@ (8011774 <tcp_split_unsent_seg+0x288>)
 801157a:	487b      	ldr	r0, [pc, #492]	@ (8011768 <tcp_split_unsent_seg+0x27c>)
 801157c:	f006 fb74 	bl	8017c68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	7a9b      	ldrb	r3, [r3, #10]
 8011584:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011586:	7bfb      	ldrb	r3, [r7, #15]
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	b2db      	uxtb	r3, r3
 801158c:	f003 0304 	and.w	r3, r3, #4
 8011590:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	891a      	ldrh	r2, [r3, #8]
 8011596:	887b      	ldrh	r3, [r7, #2]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801159c:	7bbb      	ldrb	r3, [r7, #14]
 801159e:	b29a      	uxth	r2, r3
 80115a0:	89bb      	ldrh	r3, [r7, #12]
 80115a2:	4413      	add	r3, r2
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80115aa:	4619      	mov	r1, r3
 80115ac:	2036      	movs	r0, #54	@ 0x36
 80115ae:	f7fa f9ff 	bl	800b9b0 <pbuf_alloc>
 80115b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f000 80b7 	beq.w	801172a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	891a      	ldrh	r2, [r3, #8]
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	891b      	ldrh	r3, [r3, #8]
 80115c6:	1ad3      	subs	r3, r2, r3
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	887b      	ldrh	r3, [r7, #2]
 80115cc:	4413      	add	r3, r2
 80115ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	6858      	ldr	r0, [r3, #4]
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	685a      	ldr	r2, [r3, #4]
 80115d8:	7bbb      	ldrb	r3, [r7, #14]
 80115da:	18d1      	adds	r1, r2, r3
 80115dc:	897b      	ldrh	r3, [r7, #10]
 80115de:	89ba      	ldrh	r2, [r7, #12]
 80115e0:	f7fa fece 	bl	800c380 <pbuf_copy_partial>
 80115e4:	4603      	mov	r3, r0
 80115e6:	461a      	mov	r2, r3
 80115e8:	89bb      	ldrh	r3, [r7, #12]
 80115ea:	4293      	cmp	r3, r2
 80115ec:	f040 809f 	bne.w	801172e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	899b      	ldrh	r3, [r3, #12]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f9 f809 	bl	800a610 <lwip_htons>
 80115fe:	4603      	mov	r3, r0
 8011600:	b2db      	uxtb	r3, r3
 8011602:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011606:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011608:	2300      	movs	r3, #0
 801160a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801160c:	7efb      	ldrb	r3, [r7, #27]
 801160e:	f003 0308 	and.w	r3, r3, #8
 8011612:	2b00      	cmp	r3, #0
 8011614:	d007      	beq.n	8011626 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011616:	7efb      	ldrb	r3, [r7, #27]
 8011618:	f023 0308 	bic.w	r3, r3, #8
 801161c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801161e:	7ebb      	ldrb	r3, [r7, #26]
 8011620:	f043 0308 	orr.w	r3, r3, #8
 8011624:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011626:	7efb      	ldrb	r3, [r7, #27]
 8011628:	f003 0301 	and.w	r3, r3, #1
 801162c:	2b00      	cmp	r3, #0
 801162e:	d007      	beq.n	8011640 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011630:	7efb      	ldrb	r3, [r7, #27]
 8011632:	f023 0301 	bic.w	r3, r3, #1
 8011636:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011638:	7ebb      	ldrb	r3, [r7, #26]
 801163a:	f043 0301 	orr.w	r3, r3, #1
 801163e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	4618      	mov	r0, r3
 8011648:	f7f8 fff8 	bl	800a63c <lwip_htonl>
 801164c:	4602      	mov	r2, r0
 801164e:	887b      	ldrh	r3, [r7, #2]
 8011650:	18d1      	adds	r1, r2, r3
 8011652:	7eba      	ldrb	r2, [r7, #26]
 8011654:	7bfb      	ldrb	r3, [r7, #15]
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	460b      	mov	r3, r1
 801165a:	6939      	ldr	r1, [r7, #16]
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7ff fa51 	bl	8010b04 <tcp_create_segment>
 8011662:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d063      	beq.n	8011732 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	4618      	mov	r0, r3
 8011670:	f7fa fd0e 	bl	800c090 <pbuf_clen>
 8011674:	4603      	mov	r3, r0
 8011676:	461a      	mov	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801167e:	1a9b      	subs	r3, r3, r2
 8011680:	b29a      	uxth	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	6858      	ldr	r0, [r3, #4]
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	891a      	ldrh	r2, [r3, #8]
 8011692:	89bb      	ldrh	r3, [r7, #12]
 8011694:	1ad3      	subs	r3, r2, r3
 8011696:	b29b      	uxth	r3, r3
 8011698:	4619      	mov	r1, r3
 801169a:	f7fa fae7 	bl	800bc6c <pbuf_realloc>
  useg->len -= remainder;
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	891a      	ldrh	r2, [r3, #8]
 80116a2:	89bb      	ldrh	r3, [r7, #12]
 80116a4:	1ad3      	subs	r3, r2, r3
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	899b      	ldrh	r3, [r3, #12]
 80116b2:	b29c      	uxth	r4, r3
 80116b4:	7efb      	ldrb	r3, [r7, #27]
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7f8 ffa9 	bl	800a610 <lwip_htons>
 80116be:	4603      	mov	r3, r0
 80116c0:	461a      	mov	r2, r3
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	4322      	orrs	r2, r4
 80116c8:	b292      	uxth	r2, r2
 80116ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fa fcdd 	bl	800c090 <pbuf_clen>
 80116d6:	4603      	mov	r3, r0
 80116d8:	461a      	mov	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80116e0:	4413      	add	r3, r2
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80116ea:	69fb      	ldr	r3, [r7, #28]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fa fcce 	bl	800c090 <pbuf_clen>
 80116f4:	4603      	mov	r3, r0
 80116f6:	461a      	mov	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80116fe:	4413      	add	r3, r2
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	69fa      	ldr	r2, [r7, #28]
 8011714:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d103      	bne.n	8011726 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	e016      	b.n	8011758 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801172a:	bf00      	nop
 801172c:	e002      	b.n	8011734 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801172e:	bf00      	nop
 8011730:	e000      	b.n	8011734 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011732:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d006      	beq.n	8011748 <tcp_split_unsent_seg+0x25c>
 801173a:	4b09      	ldr	r3, [pc, #36]	@ (8011760 <tcp_split_unsent_seg+0x274>)
 801173c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011740:	490d      	ldr	r1, [pc, #52]	@ (8011778 <tcp_split_unsent_seg+0x28c>)
 8011742:	4809      	ldr	r0, [pc, #36]	@ (8011768 <tcp_split_unsent_seg+0x27c>)
 8011744:	f006 fa90 	bl	8017c68 <iprintf>
  if (p != NULL) {
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d002      	beq.n	8011754 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801174e:	6938      	ldr	r0, [r7, #16]
 8011750:	f7fa fc10 	bl	800bf74 <pbuf_free>
  }

  return ERR_MEM;
 8011754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011758:	4618      	mov	r0, r3
 801175a:	3724      	adds	r7, #36	@ 0x24
 801175c:	46bd      	mov	sp, r7
 801175e:	bd90      	pop	{r4, r7, pc}
 8011760:	0801a5b0 	.word	0x0801a5b0
 8011764:	0801a944 	.word	0x0801a944
 8011768:	0801a604 	.word	0x0801a604
 801176c:	0801a968 	.word	0x0801a968
 8011770:	0801a98c 	.word	0x0801a98c
 8011774:	0801a99c 	.word	0x0801a99c
 8011778:	0801a9ac 	.word	0x0801a9ac

0801177c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801177c:	b590      	push	{r4, r7, lr}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_send_fin+0x1c>
 801178a:	4b21      	ldr	r3, [pc, #132]	@ (8011810 <tcp_send_fin+0x94>)
 801178c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011790:	4920      	ldr	r1, [pc, #128]	@ (8011814 <tcp_send_fin+0x98>)
 8011792:	4821      	ldr	r0, [pc, #132]	@ (8011818 <tcp_send_fin+0x9c>)
 8011794:	f006 fa68 	bl	8017c68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801179c:	2b00      	cmp	r3, #0
 801179e:	d02e      	beq.n	80117fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117a4:	60fb      	str	r3, [r7, #12]
 80117a6:	e002      	b.n	80117ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1f8      	bne.n	80117a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	899b      	ldrh	r3, [r3, #12]
 80117bc:	b29b      	uxth	r3, r3
 80117be:	4618      	mov	r0, r3
 80117c0:	f7f8 ff26 	bl	800a610 <lwip_htons>
 80117c4:	4603      	mov	r3, r0
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	f003 0307 	and.w	r3, r3, #7
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d116      	bne.n	80117fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29c      	uxth	r4, r3
 80117d8:	2001      	movs	r0, #1
 80117da:	f7f8 ff19 	bl	800a610 <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	461a      	mov	r2, r3
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	4322      	orrs	r2, r4
 80117e8:	b292      	uxth	r2, r2
 80117ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	8b5b      	ldrh	r3, [r3, #26]
 80117f0:	f043 0320 	orr.w	r3, r3, #32
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80117fa:	2300      	movs	r3, #0
 80117fc:	e004      	b.n	8011808 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80117fe:	2101      	movs	r1, #1
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 f80b 	bl	801181c <tcp_enqueue_flags>
 8011806:	4603      	mov	r3, r0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	bd90      	pop	{r4, r7, pc}
 8011810:	0801a5b0 	.word	0x0801a5b0
 8011814:	0801a9b8 	.word	0x0801a9b8
 8011818:	0801a604 	.word	0x0801a604

0801181c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b08a      	sub	sp, #40	@ 0x28
 8011820:	af02      	add	r7, sp, #8
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011828:	2300      	movs	r3, #0
 801182a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801182c:	2300      	movs	r3, #0
 801182e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011830:	78fb      	ldrb	r3, [r7, #3]
 8011832:	f003 0303 	and.w	r3, r3, #3
 8011836:	2b00      	cmp	r3, #0
 8011838:	d106      	bne.n	8011848 <tcp_enqueue_flags+0x2c>
 801183a:	4b67      	ldr	r3, [pc, #412]	@ (80119d8 <tcp_enqueue_flags+0x1bc>)
 801183c:	f240 4211 	movw	r2, #1041	@ 0x411
 8011840:	4966      	ldr	r1, [pc, #408]	@ (80119dc <tcp_enqueue_flags+0x1c0>)
 8011842:	4867      	ldr	r0, [pc, #412]	@ (80119e0 <tcp_enqueue_flags+0x1c4>)
 8011844:	f006 fa10 	bl	8017c68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d106      	bne.n	801185c <tcp_enqueue_flags+0x40>
 801184e:	4b62      	ldr	r3, [pc, #392]	@ (80119d8 <tcp_enqueue_flags+0x1bc>)
 8011850:	f240 4213 	movw	r2, #1043	@ 0x413
 8011854:	4963      	ldr	r1, [pc, #396]	@ (80119e4 <tcp_enqueue_flags+0x1c8>)
 8011856:	4862      	ldr	r0, [pc, #392]	@ (80119e0 <tcp_enqueue_flags+0x1c4>)
 8011858:	f006 fa06 	bl	8017c68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801185c:	78fb      	ldrb	r3, [r7, #3]
 801185e:	f003 0302 	and.w	r3, r3, #2
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011866:	2301      	movs	r3, #1
 8011868:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801186a:	7ffb      	ldrb	r3, [r7, #31]
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	b2db      	uxtb	r3, r3
 8011870:	f003 0304 	and.w	r3, r3, #4
 8011874:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011876:	7dfb      	ldrb	r3, [r7, #23]
 8011878:	b29b      	uxth	r3, r3
 801187a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801187e:	4619      	mov	r1, r3
 8011880:	2036      	movs	r0, #54	@ 0x36
 8011882:	f7fa f895 	bl	800b9b0 <pbuf_alloc>
 8011886:	6138      	str	r0, [r7, #16]
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d109      	bne.n	80118a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	8b5b      	ldrh	r3, [r3, #26]
 8011892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011896:	b29a      	uxth	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801189c:	f04f 33ff 	mov.w	r3, #4294967295
 80118a0:	e095      	b.n	80119ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	895a      	ldrh	r2, [r3, #10]
 80118a6:	7dfb      	ldrb	r3, [r7, #23]
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d206      	bcs.n	80118bc <tcp_enqueue_flags+0xa0>
 80118ae:	4b4a      	ldr	r3, [pc, #296]	@ (80119d8 <tcp_enqueue_flags+0x1bc>)
 80118b0:	f240 4239 	movw	r2, #1081	@ 0x439
 80118b4:	494c      	ldr	r1, [pc, #304]	@ (80119e8 <tcp_enqueue_flags+0x1cc>)
 80118b6:	484a      	ldr	r0, [pc, #296]	@ (80119e0 <tcp_enqueue_flags+0x1c4>)
 80118b8:	f006 f9d6 	bl	8017c68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80118c0:	78fa      	ldrb	r2, [r7, #3]
 80118c2:	7ffb      	ldrb	r3, [r7, #31]
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	460b      	mov	r3, r1
 80118c8:	6939      	ldr	r1, [r7, #16]
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7ff f91a 	bl	8010b04 <tcp_create_segment>
 80118d0:	60f8      	str	r0, [r7, #12]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d109      	bne.n	80118ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	8b5b      	ldrh	r3, [r3, #26]
 80118dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80118e6:	f04f 33ff 	mov.w	r3, #4294967295
 80118ea:	e070      	b.n	80119ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	68db      	ldr	r3, [r3, #12]
 80118f0:	f003 0303 	and.w	r3, r3, #3
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d006      	beq.n	8011906 <tcp_enqueue_flags+0xea>
 80118f8:	4b37      	ldr	r3, [pc, #220]	@ (80119d8 <tcp_enqueue_flags+0x1bc>)
 80118fa:	f240 4242 	movw	r2, #1090	@ 0x442
 80118fe:	493b      	ldr	r1, [pc, #236]	@ (80119ec <tcp_enqueue_flags+0x1d0>)
 8011900:	4837      	ldr	r0, [pc, #220]	@ (80119e0 <tcp_enqueue_flags+0x1c4>)
 8011902:	f006 f9b1 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	891b      	ldrh	r3, [r3, #8]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d006      	beq.n	801191c <tcp_enqueue_flags+0x100>
 801190e:	4b32      	ldr	r3, [pc, #200]	@ (80119d8 <tcp_enqueue_flags+0x1bc>)
 8011910:	f240 4243 	movw	r2, #1091	@ 0x443
 8011914:	4936      	ldr	r1, [pc, #216]	@ (80119f0 <tcp_enqueue_flags+0x1d4>)
 8011916:	4832      	ldr	r0, [pc, #200]	@ (80119e0 <tcp_enqueue_flags+0x1c4>)
 8011918:	f006 f9a6 	bl	8017c68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011920:	2b00      	cmp	r3, #0
 8011922:	d103      	bne.n	801192c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	68fa      	ldr	r2, [r7, #12]
 8011928:	66da      	str	r2, [r3, #108]	@ 0x6c
 801192a:	e00d      	b.n	8011948 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011930:	61bb      	str	r3, [r7, #24]
 8011932:	e002      	b.n	801193a <tcp_enqueue_flags+0x11e>
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	61bb      	str	r3, [r7, #24]
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1f8      	bne.n	8011934 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011950:	78fb      	ldrb	r3, [r7, #3]
 8011952:	f003 0302 	and.w	r3, r3, #2
 8011956:	2b00      	cmp	r3, #0
 8011958:	d104      	bne.n	8011964 <tcp_enqueue_flags+0x148>
 801195a:	78fb      	ldrb	r3, [r7, #3]
 801195c:	f003 0301 	and.w	r3, r3, #1
 8011960:	2b00      	cmp	r3, #0
 8011962:	d004      	beq.n	801196e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011968:	1c5a      	adds	r2, r3, #1
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801196e:	78fb      	ldrb	r3, [r7, #3]
 8011970:	f003 0301 	and.w	r3, r3, #1
 8011974:	2b00      	cmp	r3, #0
 8011976:	d006      	beq.n	8011986 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	8b5b      	ldrh	r3, [r3, #26]
 801197c:	f043 0320 	orr.w	r3, r3, #32
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	4618      	mov	r0, r3
 801198c:	f7fa fb80 	bl	800c090 <pbuf_clen>
 8011990:	4603      	mov	r3, r0
 8011992:	461a      	mov	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801199a:	4413      	add	r3, r2
 801199c:	b29a      	uxth	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00e      	beq.n	80119cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d10a      	bne.n	80119cc <tcp_enqueue_flags+0x1b0>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d106      	bne.n	80119cc <tcp_enqueue_flags+0x1b0>
 80119be:	4b06      	ldr	r3, [pc, #24]	@ (80119d8 <tcp_enqueue_flags+0x1bc>)
 80119c0:	f240 4265 	movw	r2, #1125	@ 0x465
 80119c4:	490b      	ldr	r1, [pc, #44]	@ (80119f4 <tcp_enqueue_flags+0x1d8>)
 80119c6:	4806      	ldr	r0, [pc, #24]	@ (80119e0 <tcp_enqueue_flags+0x1c4>)
 80119c8:	f006 f94e 	bl	8017c68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3720      	adds	r7, #32
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	0801a5b0 	.word	0x0801a5b0
 80119dc:	0801a9d4 	.word	0x0801a9d4
 80119e0:	0801a604 	.word	0x0801a604
 80119e4:	0801aa2c 	.word	0x0801aa2c
 80119e8:	0801aa4c 	.word	0x0801aa4c
 80119ec:	0801aa88 	.word	0x0801aa88
 80119f0:	0801aaa0 	.word	0x0801aaa0
 80119f4:	0801aacc 	.word	0x0801aacc

080119f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80119f8:	b5b0      	push	{r4, r5, r7, lr}
 80119fa:	b08a      	sub	sp, #40	@ 0x28
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d106      	bne.n	8011a14 <tcp_output+0x1c>
 8011a06:	4b8a      	ldr	r3, [pc, #552]	@ (8011c30 <tcp_output+0x238>)
 8011a08:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011a0c:	4989      	ldr	r1, [pc, #548]	@ (8011c34 <tcp_output+0x23c>)
 8011a0e:	488a      	ldr	r0, [pc, #552]	@ (8011c38 <tcp_output+0x240>)
 8011a10:	f006 f92a 	bl	8017c68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	7d1b      	ldrb	r3, [r3, #20]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d106      	bne.n	8011a2a <tcp_output+0x32>
 8011a1c:	4b84      	ldr	r3, [pc, #528]	@ (8011c30 <tcp_output+0x238>)
 8011a1e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011a22:	4986      	ldr	r1, [pc, #536]	@ (8011c3c <tcp_output+0x244>)
 8011a24:	4884      	ldr	r0, [pc, #528]	@ (8011c38 <tcp_output+0x240>)
 8011a26:	f006 f91f 	bl	8017c68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011a2a:	4b85      	ldr	r3, [pc, #532]	@ (8011c40 <tcp_output+0x248>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d101      	bne.n	8011a38 <tcp_output+0x40>
    return ERR_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	e1ce      	b.n	8011dd6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a44:	4293      	cmp	r3, r2
 8011a46:	bf28      	it	cs
 8011a48:	4613      	movcs	r3, r2
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d10b      	bne.n	8011a72 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	8b5b      	ldrh	r3, [r3, #26]
 8011a5e:	f003 0302 	and.w	r3, r3, #2
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 81aa 	beq.w	8011dbc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 fdcb 	bl	8012604 <tcp_send_empty_ack>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	e1b1      	b.n	8011dd6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011a72:	6879      	ldr	r1, [r7, #4]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	3304      	adds	r3, #4
 8011a78:	461a      	mov	r2, r3
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff f826 	bl	8010acc <tcp_route>
 8011a80:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d102      	bne.n	8011a8e <tcp_output+0x96>
    return ERR_RTE;
 8011a88:	f06f 0303 	mvn.w	r3, #3
 8011a8c:	e1a3      	b.n	8011dd6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d003      	beq.n	8011a9c <tcp_output+0xa4>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d111      	bne.n	8011ac0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d002      	beq.n	8011aa8 <tcp_output+0xb0>
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	3304      	adds	r3, #4
 8011aa6:	e000      	b.n	8011aaa <tcp_output+0xb2>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d102      	bne.n	8011ab8 <tcp_output+0xc0>
      return ERR_RTE;
 8011ab2:	f06f 0303 	mvn.w	r3, #3
 8011ab6:	e18e      	b.n	8011dd6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7f8 fdb8 	bl	800a63c <lwip_htonl>
 8011acc:	4602      	mov	r2, r0
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ad2:	1ad3      	subs	r3, r2, r3
 8011ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ad6:	8912      	ldrh	r2, [r2, #8]
 8011ad8:	4413      	add	r3, r2
 8011ada:	69ba      	ldr	r2, [r7, #24]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d227      	bcs.n	8011b30 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d114      	bne.n	8011b18 <tcp_output+0x120>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d110      	bne.n	8011b18 <tcp_output+0x120>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d10b      	bne.n	8011b18 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	8b5b      	ldrh	r3, [r3, #26]
 8011b1c:	f003 0302 	and.w	r3, r3, #2
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f000 814d 	beq.w	8011dc0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 fd6c 	bl	8012604 <tcp_send_empty_ack>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	e152      	b.n	8011dd6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b3c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f000 811c 	beq.w	8011d7e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011b46:	e002      	b.n	8011b4e <tcp_output+0x156>
 8011b48:	6a3b      	ldr	r3, [r7, #32]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	623b      	str	r3, [r7, #32]
 8011b4e:	6a3b      	ldr	r3, [r7, #32]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d1f8      	bne.n	8011b48 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011b56:	e112      	b.n	8011d7e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	899b      	ldrh	r3, [r3, #12]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f8 fd55 	bl	800a610 <lwip_htons>
 8011b66:	4603      	mov	r3, r0
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	f003 0304 	and.w	r3, r3, #4
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d006      	beq.n	8011b80 <tcp_output+0x188>
 8011b72:	4b2f      	ldr	r3, [pc, #188]	@ (8011c30 <tcp_output+0x238>)
 8011b74:	f240 5236 	movw	r2, #1334	@ 0x536
 8011b78:	4932      	ldr	r1, [pc, #200]	@ (8011c44 <tcp_output+0x24c>)
 8011b7a:	482f      	ldr	r0, [pc, #188]	@ (8011c38 <tcp_output+0x240>)
 8011b7c:	f006 f874 	bl	8017c68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d01f      	beq.n	8011bc8 <tcp_output+0x1d0>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	8b5b      	ldrh	r3, [r3, #26]
 8011b8c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d119      	bne.n	8011bc8 <tcp_output+0x1d0>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00b      	beq.n	8011bb4 <tcp_output+0x1bc>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d110      	bne.n	8011bc8 <tcp_output+0x1d0>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011baa:	891a      	ldrh	r2, [r3, #8]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d209      	bcs.n	8011bc8 <tcp_output+0x1d0>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d004      	beq.n	8011bc8 <tcp_output+0x1d0>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011bc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8011bc6:	d901      	bls.n	8011bcc <tcp_output+0x1d4>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e000      	b.n	8011bce <tcp_output+0x1d6>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d106      	bne.n	8011be0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	8b5b      	ldrh	r3, [r3, #26]
 8011bd6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f000 80e4 	beq.w	8011da8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	7d1b      	ldrb	r3, [r3, #20]
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d00d      	beq.n	8011c04 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	899b      	ldrh	r3, [r3, #12]
 8011bee:	b29c      	uxth	r4, r3
 8011bf0:	2010      	movs	r0, #16
 8011bf2:	f7f8 fd0d 	bl	800a610 <lwip_htons>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	4322      	orrs	r2, r4
 8011c00:	b292      	uxth	r2, r2
 8011c02:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011c04:	697a      	ldr	r2, [r7, #20]
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c0a:	f000 f909 	bl	8011e20 <tcp_output_segment>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d016      	beq.n	8011c48 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	8b5b      	ldrh	r3, [r3, #26]
 8011c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	835a      	strh	r2, [r3, #26]
      return err;
 8011c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c2c:	e0d3      	b.n	8011dd6 <tcp_output+0x3de>
 8011c2e:	bf00      	nop
 8011c30:	0801a5b0 	.word	0x0801a5b0
 8011c34:	0801aaf4 	.word	0x0801aaf4
 8011c38:	0801a604 	.word	0x0801a604
 8011c3c:	0801ab0c 	.word	0x0801ab0c
 8011c40:	2001dd40 	.word	0x2001dd40
 8011c44:	0801ab34 	.word	0x0801ab34
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4a:	681a      	ldr	r2, [r3, #0]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	7d1b      	ldrb	r3, [r3, #20]
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	d006      	beq.n	8011c66 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	8b5b      	ldrh	r3, [r3, #26]
 8011c5c:	f023 0303 	bic.w	r3, r3, #3
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7f8 fce5 	bl	800a63c <lwip_htonl>
 8011c72:	4604      	mov	r4, r0
 8011c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c76:	891b      	ldrh	r3, [r3, #8]
 8011c78:	461d      	mov	r5, r3
 8011c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	899b      	ldrh	r3, [r3, #12]
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7f8 fcc4 	bl	800a610 <lwip_htons>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	f003 0303 	and.w	r3, r3, #3
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d001      	beq.n	8011c98 <tcp_output+0x2a0>
 8011c94:	2301      	movs	r3, #1
 8011c96:	e000      	b.n	8011c9a <tcp_output+0x2a2>
 8011c98:	2300      	movs	r3, #0
 8011c9a:	442b      	add	r3, r5
 8011c9c:	4423      	add	r3, r4
 8011c9e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	1ad3      	subs	r3, r2, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	da02      	bge.n	8011cb2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb4:	891b      	ldrh	r3, [r3, #8]
 8011cb6:	461c      	mov	r4, r3
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	899b      	ldrh	r3, [r3, #12]
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7f8 fca5 	bl	800a610 <lwip_htons>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	f003 0303 	and.w	r3, r3, #3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <tcp_output+0x2de>
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e000      	b.n	8011cd8 <tcp_output+0x2e0>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	4423      	add	r3, r4
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d049      	beq.n	8011d72 <tcp_output+0x37a>
      seg->next = NULL;
 8011cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d105      	bne.n	8011cf8 <tcp_output+0x300>
        pcb->unacked = seg;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cf0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf4:	623b      	str	r3, [r7, #32]
 8011cf6:	e03f      	b.n	8011d78 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7f8 fc9c 	bl	800a63c <lwip_htonl>
 8011d04:	4604      	mov	r4, r0
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7f8 fc95 	bl	800a63c <lwip_htonl>
 8011d12:	4603      	mov	r3, r0
 8011d14:	1ae3      	subs	r3, r4, r3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	da24      	bge.n	8011d64 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	3370      	adds	r3, #112	@ 0x70
 8011d1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011d20:	e002      	b.n	8011d28 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011d22:	69fb      	ldr	r3, [r7, #28]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d011      	beq.n	8011d54 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7f8 fc7f 	bl	800a63c <lwip_htonl>
 8011d3e:	4604      	mov	r4, r0
 8011d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7f8 fc78 	bl	800a63c <lwip_htonl>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dbe6      	blt.n	8011d22 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	e009      	b.n	8011d78 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d68:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	623b      	str	r3, [r7, #32]
 8011d70:	e002      	b.n	8011d78 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011d72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011d74:	f7fb ff1d 	bl	800dbb2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d012      	beq.n	8011daa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7f8 fc56 	bl	800a63c <lwip_htonl>
 8011d90:	4602      	mov	r2, r0
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d9a:	8912      	ldrh	r2, [r2, #8]
 8011d9c:	4413      	add	r3, r2
  while (seg != NULL &&
 8011d9e:	69ba      	ldr	r2, [r7, #24]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	f4bf aed9 	bcs.w	8011b58 <tcp_output+0x160>
 8011da6:	e000      	b.n	8011daa <tcp_output+0x3b2>
      break;
 8011da8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d108      	bne.n	8011dc4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011dba:	e004      	b.n	8011dc6 <tcp_output+0x3ce>
    goto output_done;
 8011dbc:	bf00      	nop
 8011dbe:	e002      	b.n	8011dc6 <tcp_output+0x3ce>
    goto output_done;
 8011dc0:	bf00      	nop
 8011dc2:	e000      	b.n	8011dc6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011dc4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	8b5b      	ldrh	r3, [r3, #26]
 8011dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3728      	adds	r7, #40	@ 0x28
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8011dde:	bf00      	nop

08011de0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d106      	bne.n	8011dfc <tcp_output_segment_busy+0x1c>
 8011dee:	4b09      	ldr	r3, [pc, #36]	@ (8011e14 <tcp_output_segment_busy+0x34>)
 8011df0:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011df4:	4908      	ldr	r1, [pc, #32]	@ (8011e18 <tcp_output_segment_busy+0x38>)
 8011df6:	4809      	ldr	r0, [pc, #36]	@ (8011e1c <tcp_output_segment_busy+0x3c>)
 8011df8:	f005 ff36 	bl	8017c68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	7b9b      	ldrb	r3, [r3, #14]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d001      	beq.n	8011e0a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011e06:	2301      	movs	r3, #1
 8011e08:	e000      	b.n	8011e0c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	0801a5b0 	.word	0x0801a5b0
 8011e18:	0801ab4c 	.word	0x0801ab4c
 8011e1c:	0801a604 	.word	0x0801a604

08011e20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011e20:	b5b0      	push	{r4, r5, r7, lr}
 8011e22:	b08c      	sub	sp, #48	@ 0x30
 8011e24:	af04      	add	r7, sp, #16
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d106      	bne.n	8011e40 <tcp_output_segment+0x20>
 8011e32:	4b64      	ldr	r3, [pc, #400]	@ (8011fc4 <tcp_output_segment+0x1a4>)
 8011e34:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011e38:	4963      	ldr	r1, [pc, #396]	@ (8011fc8 <tcp_output_segment+0x1a8>)
 8011e3a:	4864      	ldr	r0, [pc, #400]	@ (8011fcc <tcp_output_segment+0x1ac>)
 8011e3c:	f005 ff14 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d106      	bne.n	8011e54 <tcp_output_segment+0x34>
 8011e46:	4b5f      	ldr	r3, [pc, #380]	@ (8011fc4 <tcp_output_segment+0x1a4>)
 8011e48:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011e4c:	4960      	ldr	r1, [pc, #384]	@ (8011fd0 <tcp_output_segment+0x1b0>)
 8011e4e:	485f      	ldr	r0, [pc, #380]	@ (8011fcc <tcp_output_segment+0x1ac>)
 8011e50:	f005 ff0a 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d106      	bne.n	8011e68 <tcp_output_segment+0x48>
 8011e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8011fc4 <tcp_output_segment+0x1a4>)
 8011e5c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011e60:	495c      	ldr	r1, [pc, #368]	@ (8011fd4 <tcp_output_segment+0x1b4>)
 8011e62:	485a      	ldr	r0, [pc, #360]	@ (8011fcc <tcp_output_segment+0x1ac>)
 8011e64:	f005 ff00 	bl	8017c68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f7ff ffb9 	bl	8011de0 <tcp_output_segment_busy>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011e74:	2300      	movs	r3, #0
 8011e76:	e0a1      	b.n	8011fbc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	68dc      	ldr	r4, [r3, #12]
 8011e80:	4610      	mov	r0, r2
 8011e82:	f7f8 fbdb 	bl	800a63c <lwip_htonl>
 8011e86:	4603      	mov	r3, r0
 8011e88:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	68dc      	ldr	r4, [r3, #12]
 8011e92:	4610      	mov	r0, r2
 8011e94:	f7f8 fbbc 	bl	800a610 <lwip_htons>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ea0:	68ba      	ldr	r2, [r7, #8]
 8011ea2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011ea4:	441a      	add	r2, r3
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	3314      	adds	r3, #20
 8011eb0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	7a9b      	ldrb	r3, [r3, #10]
 8011eb6:	f003 0301 	and.w	r3, r3, #1
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d015      	beq.n	8011eea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	3304      	adds	r3, #4
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	6879      	ldr	r1, [r7, #4]
 8011ec6:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8011eca:	f7fc fa37 	bl	800e33c <tcp_eff_send_mss_netif>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011ed2:	8b7b      	ldrh	r3, [r7, #26]
 8011ed4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7f8 fbaf 	bl	800a63c <lwip_htonl>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	3304      	adds	r3, #4
 8011ee8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	da02      	bge.n	8011efa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d10c      	bne.n	8011f1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011f02:	4b35      	ldr	r3, [pc, #212]	@ (8011fd8 <tcp_output_segment+0x1b8>)
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7f8 fb93 	bl	800a63c <lwip_htonl>
 8011f16:	4602      	mov	r2, r0
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	68da      	ldr	r2, [r3, #12]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	1ad3      	subs	r3, r2, r3
 8011f28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	8959      	ldrh	r1, [r3, #10]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	8b3a      	ldrh	r2, [r7, #24]
 8011f36:	1a8a      	subs	r2, r1, r2
 8011f38:	b292      	uxth	r2, r2
 8011f3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	8919      	ldrh	r1, [r3, #8]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	8b3a      	ldrh	r2, [r7, #24]
 8011f48:	1a8a      	subs	r2, r1, r2
 8011f4a:	b292      	uxth	r2, r2
 8011f4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	68d2      	ldr	r2, [r2, #12]
 8011f56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	741a      	strb	r2, [r3, #16]
 8011f60:	2200      	movs	r2, #0
 8011f62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	68da      	ldr	r2, [r3, #12]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	7a9b      	ldrb	r3, [r3, #10]
 8011f6c:	f003 0301 	and.w	r3, r3, #1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <tcp_output_segment+0x158>
 8011f74:	2318      	movs	r3, #24
 8011f76:	e000      	b.n	8011f7a <tcp_output_segment+0x15a>
 8011f78:	2314      	movs	r3, #20
 8011f7a:	4413      	add	r3, r2
 8011f7c:	69fa      	ldr	r2, [r7, #28]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d006      	beq.n	8011f90 <tcp_output_segment+0x170>
 8011f82:	4b10      	ldr	r3, [pc, #64]	@ (8011fc4 <tcp_output_segment+0x1a4>)
 8011f84:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011f88:	4914      	ldr	r1, [pc, #80]	@ (8011fdc <tcp_output_segment+0x1bc>)
 8011f8a:	4810      	ldr	r0, [pc, #64]	@ (8011fcc <tcp_output_segment+0x1ac>)
 8011f8c:	f005 fe6c 	bl	8017c68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6858      	ldr	r0, [r3, #4]
 8011f94:	68b9      	ldr	r1, [r7, #8]
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	1d1c      	adds	r4, r3, #4
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	7add      	ldrb	r5, [r3, #11]
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	7a9b      	ldrb	r3, [r3, #10]
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	9202      	str	r2, [sp, #8]
 8011fa6:	2206      	movs	r2, #6
 8011fa8:	9201      	str	r2, [sp, #4]
 8011faa:	9300      	str	r3, [sp, #0]
 8011fac:	462b      	mov	r3, r5
 8011fae:	4622      	mov	r2, r4
 8011fb0:	f004 fc16 	bl	80167e0 <ip4_output_if>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3720      	adds	r7, #32
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8011fc4:	0801a5b0 	.word	0x0801a5b0
 8011fc8:	0801ab74 	.word	0x0801ab74
 8011fcc:	0801a604 	.word	0x0801a604
 8011fd0:	0801ab94 	.word	0x0801ab94
 8011fd4:	0801abb4 	.word	0x0801abb4
 8011fd8:	2001dcf4 	.word	0x2001dcf4
 8011fdc:	0801abd8 	.word	0x0801abd8

08011fe0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011fe0:	b5b0      	push	{r4, r5, r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <tcp_rexmit_rto_prepare+0x1c>
 8011fee:	4b31      	ldr	r3, [pc, #196]	@ (80120b4 <tcp_rexmit_rto_prepare+0xd4>)
 8011ff0:	f240 6263 	movw	r2, #1635	@ 0x663
 8011ff4:	4930      	ldr	r1, [pc, #192]	@ (80120b8 <tcp_rexmit_rto_prepare+0xd8>)
 8011ff6:	4831      	ldr	r0, [pc, #196]	@ (80120bc <tcp_rexmit_rto_prepare+0xdc>)
 8011ff8:	f005 fe36 	bl	8017c68 <iprintf>

  if (pcb->unacked == NULL) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012000:	2b00      	cmp	r3, #0
 8012002:	d102      	bne.n	801200a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012004:	f06f 0305 	mvn.w	r3, #5
 8012008:	e050      	b.n	80120ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801200e:	60fb      	str	r3, [r7, #12]
 8012010:	e00b      	b.n	801202a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f7ff fee4 	bl	8011de0 <tcp_output_segment_busy>
 8012018:	4603      	mov	r3, r0
 801201a:	2b00      	cmp	r3, #0
 801201c:	d002      	beq.n	8012024 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801201e:	f06f 0305 	mvn.w	r3, #5
 8012022:	e043      	b.n	80120ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60fb      	str	r3, [r7, #12]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d1ef      	bne.n	8012012 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f7ff fed4 	bl	8011de0 <tcp_output_segment_busy>
 8012038:	4603      	mov	r3, r0
 801203a:	2b00      	cmp	r3, #0
 801203c:	d002      	beq.n	8012044 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801203e:	f06f 0305 	mvn.w	r3, #5
 8012042:	e033      	b.n	80120ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	8b5b      	ldrh	r3, [r3, #26]
 801205e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012062:	b29a      	uxth	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	4618      	mov	r0, r3
 8012070:	f7f8 fae4 	bl	800a63c <lwip_htonl>
 8012074:	4604      	mov	r4, r0
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	891b      	ldrh	r3, [r3, #8]
 801207a:	461d      	mov	r5, r3
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	899b      	ldrh	r3, [r3, #12]
 8012082:	b29b      	uxth	r3, r3
 8012084:	4618      	mov	r0, r3
 8012086:	f7f8 fac3 	bl	800a610 <lwip_htons>
 801208a:	4603      	mov	r3, r0
 801208c:	b2db      	uxtb	r3, r3
 801208e:	f003 0303 	and.w	r3, r3, #3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d001      	beq.n	801209a <tcp_rexmit_rto_prepare+0xba>
 8012096:	2301      	movs	r3, #1
 8012098:	e000      	b.n	801209c <tcp_rexmit_rto_prepare+0xbc>
 801209a:	2300      	movs	r3, #0
 801209c:	442b      	add	r3, r5
 801209e:	18e2      	adds	r2, r4, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bdb0      	pop	{r4, r5, r7, pc}
 80120b4:	0801a5b0 	.word	0x0801a5b0
 80120b8:	0801abec 	.word	0x0801abec
 80120bc:	0801a604 	.word	0x0801a604

080120c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <tcp_rexmit_rto_commit+0x1c>
 80120ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012104 <tcp_rexmit_rto_commit+0x44>)
 80120d0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80120d4:	490c      	ldr	r1, [pc, #48]	@ (8012108 <tcp_rexmit_rto_commit+0x48>)
 80120d6:	480d      	ldr	r0, [pc, #52]	@ (801210c <tcp_rexmit_rto_commit+0x4c>)
 80120d8:	f005 fdc6 	bl	8017c68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80120e2:	2bff      	cmp	r3, #255	@ 0xff
 80120e4:	d007      	beq.n	80120f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80120ec:	3301      	adds	r3, #1
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f7ff fc7e 	bl	80119f8 <tcp_output>
}
 80120fc:	bf00      	nop
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	0801a5b0 	.word	0x0801a5b0
 8012108:	0801ac10 	.word	0x0801ac10
 801210c:	0801a604 	.word	0x0801a604

08012110 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <tcp_rexmit_rto+0x1c>
 801211e:	4b0a      	ldr	r3, [pc, #40]	@ (8012148 <tcp_rexmit_rto+0x38>)
 8012120:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012124:	4909      	ldr	r1, [pc, #36]	@ (801214c <tcp_rexmit_rto+0x3c>)
 8012126:	480a      	ldr	r0, [pc, #40]	@ (8012150 <tcp_rexmit_rto+0x40>)
 8012128:	f005 fd9e 	bl	8017c68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7ff ff57 	bl	8011fe0 <tcp_rexmit_rto_prepare>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d102      	bne.n	801213e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7ff ffc1 	bl	80120c0 <tcp_rexmit_rto_commit>
  }
}
 801213e:	bf00      	nop
 8012140:	3708      	adds	r7, #8
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	0801a5b0 	.word	0x0801a5b0
 801214c:	0801ac34 	.word	0x0801ac34
 8012150:	0801a604 	.word	0x0801a604

08012154 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012154:	b590      	push	{r4, r7, lr}
 8012156:	b085      	sub	sp, #20
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d106      	bne.n	8012170 <tcp_rexmit+0x1c>
 8012162:	4b2f      	ldr	r3, [pc, #188]	@ (8012220 <tcp_rexmit+0xcc>)
 8012164:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012168:	492e      	ldr	r1, [pc, #184]	@ (8012224 <tcp_rexmit+0xd0>)
 801216a:	482f      	ldr	r0, [pc, #188]	@ (8012228 <tcp_rexmit+0xd4>)
 801216c:	f005 fd7c 	bl	8017c68 <iprintf>

  if (pcb->unacked == NULL) {
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012174:	2b00      	cmp	r3, #0
 8012176:	d102      	bne.n	801217e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012178:	f06f 0305 	mvn.w	r3, #5
 801217c:	e04c      	b.n	8012218 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012182:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012184:	68b8      	ldr	r0, [r7, #8]
 8012186:	f7ff fe2b 	bl	8011de0 <tcp_output_segment_busy>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d002      	beq.n	8012196 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012190:	f06f 0305 	mvn.w	r3, #5
 8012194:	e040      	b.n	8012218 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	336c      	adds	r3, #108	@ 0x6c
 80121a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80121a4:	e002      	b.n	80121ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d011      	beq.n	80121d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	f7f8 fa3d 	bl	800a63c <lwip_htonl>
 80121c2:	4604      	mov	r4, r0
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	68db      	ldr	r3, [r3, #12]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7f8 fa36 	bl	800a63c <lwip_htonl>
 80121d0:	4603      	mov	r3, r0
 80121d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	dbe6      	blt.n	80121a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	68ba      	ldr	r2, [r7, #8]
 80121e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d103      	bne.n	80121f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80121fc:	2bff      	cmp	r3, #255	@ 0xff
 80121fe:	d007      	beq.n	8012210 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012206:	3301      	adds	r3, #1
 8012208:	b2da      	uxtb	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3714      	adds	r7, #20
 801221c:	46bd      	mov	sp, r7
 801221e:	bd90      	pop	{r4, r7, pc}
 8012220:	0801a5b0 	.word	0x0801a5b0
 8012224:	0801ac50 	.word	0x0801ac50
 8012228:	0801a604 	.word	0x0801a604

0801222c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d106      	bne.n	8012248 <tcp_rexmit_fast+0x1c>
 801223a:	4b2a      	ldr	r3, [pc, #168]	@ (80122e4 <tcp_rexmit_fast+0xb8>)
 801223c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012240:	4929      	ldr	r1, [pc, #164]	@ (80122e8 <tcp_rexmit_fast+0xbc>)
 8012242:	482a      	ldr	r0, [pc, #168]	@ (80122ec <tcp_rexmit_fast+0xc0>)
 8012244:	f005 fd10 	bl	8017c68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801224c:	2b00      	cmp	r3, #0
 801224e:	d045      	beq.n	80122dc <tcp_rexmit_fast+0xb0>
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	8b5b      	ldrh	r3, [r3, #26]
 8012254:	f003 0304 	and.w	r3, r3, #4
 8012258:	2b00      	cmp	r3, #0
 801225a:	d13f      	bne.n	80122dc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f7ff ff79 	bl	8012154 <tcp_rexmit>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d139      	bne.n	80122dc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012274:	4293      	cmp	r3, r2
 8012276:	bf28      	it	cs
 8012278:	4613      	movcs	r3, r2
 801227a:	b29b      	uxth	r3, r3
 801227c:	2b00      	cmp	r3, #0
 801227e:	da00      	bge.n	8012282 <tcp_rexmit_fast+0x56>
 8012280:	3301      	adds	r3, #1
 8012282:	105b      	asrs	r3, r3, #1
 8012284:	b29a      	uxth	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012292:	461a      	mov	r2, r3
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012298:	005b      	lsls	r3, r3, #1
 801229a:	429a      	cmp	r2, r3
 801229c:	d206      	bcs.n	80122ac <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80122a2:	005b      	lsls	r3, r3, #1
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80122b6:	4619      	mov	r1, r3
 80122b8:	0049      	lsls	r1, r1, #1
 80122ba:	440b      	add	r3, r1
 80122bc:	b29b      	uxth	r3, r3
 80122be:	4413      	add	r3, r2
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	8b5b      	ldrh	r3, [r3, #26]
 80122cc:	f043 0304 	orr.w	r3, r3, #4
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2200      	movs	r2, #0
 80122da:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80122dc:	bf00      	nop
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	0801a5b0 	.word	0x0801a5b0
 80122e8:	0801ac68 	.word	0x0801ac68
 80122ec:	0801a604 	.word	0x0801a604

080122f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b086      	sub	sp, #24
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	607b      	str	r3, [r7, #4]
 80122fa:	460b      	mov	r3, r1
 80122fc:	817b      	strh	r3, [r7, #10]
 80122fe:	4613      	mov	r3, r2
 8012300:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012302:	897a      	ldrh	r2, [r7, #10]
 8012304:	893b      	ldrh	r3, [r7, #8]
 8012306:	4413      	add	r3, r2
 8012308:	b29b      	uxth	r3, r3
 801230a:	3314      	adds	r3, #20
 801230c:	b29b      	uxth	r3, r3
 801230e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012312:	4619      	mov	r1, r3
 8012314:	2022      	movs	r0, #34	@ 0x22
 8012316:	f7f9 fb4b 	bl	800b9b0 <pbuf_alloc>
 801231a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d04d      	beq.n	80123be <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012322:	897b      	ldrh	r3, [r7, #10]
 8012324:	3313      	adds	r3, #19
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	8952      	ldrh	r2, [r2, #10]
 801232a:	4293      	cmp	r3, r2
 801232c:	db06      	blt.n	801233c <tcp_output_alloc_header_common+0x4c>
 801232e:	4b26      	ldr	r3, [pc, #152]	@ (80123c8 <tcp_output_alloc_header_common+0xd8>)
 8012330:	f240 7223 	movw	r2, #1827	@ 0x723
 8012334:	4925      	ldr	r1, [pc, #148]	@ (80123cc <tcp_output_alloc_header_common+0xdc>)
 8012336:	4826      	ldr	r0, [pc, #152]	@ (80123d0 <tcp_output_alloc_header_common+0xe0>)
 8012338:	f005 fc96 	bl	8017c68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012342:	8c3b      	ldrh	r3, [r7, #32]
 8012344:	4618      	mov	r0, r3
 8012346:	f7f8 f963 	bl	800a610 <lwip_htons>
 801234a:	4603      	mov	r3, r0
 801234c:	461a      	mov	r2, r3
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012354:	4618      	mov	r0, r3
 8012356:	f7f8 f95b 	bl	800a610 <lwip_htons>
 801235a:	4603      	mov	r3, r0
 801235c:	461a      	mov	r2, r3
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f7f8 f967 	bl	800a63c <lwip_htonl>
 801236e:	4602      	mov	r2, r0
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012374:	897b      	ldrh	r3, [r7, #10]
 8012376:	089b      	lsrs	r3, r3, #2
 8012378:	b29b      	uxth	r3, r3
 801237a:	3305      	adds	r3, #5
 801237c:	b29b      	uxth	r3, r3
 801237e:	031b      	lsls	r3, r3, #12
 8012380:	b29a      	uxth	r2, r3
 8012382:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012386:	b29b      	uxth	r3, r3
 8012388:	4313      	orrs	r3, r2
 801238a:	b29b      	uxth	r3, r3
 801238c:	4618      	mov	r0, r3
 801238e:	f7f8 f93f 	bl	800a610 <lwip_htons>
 8012392:	4603      	mov	r3, r0
 8012394:	461a      	mov	r2, r3
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801239a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801239c:	4618      	mov	r0, r3
 801239e:	f7f8 f937 	bl	800a610 <lwip_htons>
 80123a2:	4603      	mov	r3, r0
 80123a4:	461a      	mov	r2, r3
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	2200      	movs	r2, #0
 80123ae:	741a      	strb	r2, [r3, #16]
 80123b0:	2200      	movs	r2, #0
 80123b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	2200      	movs	r2, #0
 80123b8:	749a      	strb	r2, [r3, #18]
 80123ba:	2200      	movs	r2, #0
 80123bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80123be:	697b      	ldr	r3, [r7, #20]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	0801a5b0 	.word	0x0801a5b0
 80123cc:	0801ac88 	.word	0x0801ac88
 80123d0:	0801a604 	.word	0x0801a604

080123d4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80123d4:	b5b0      	push	{r4, r5, r7, lr}
 80123d6:	b08a      	sub	sp, #40	@ 0x28
 80123d8:	af04      	add	r7, sp, #16
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	607b      	str	r3, [r7, #4]
 80123de:	460b      	mov	r3, r1
 80123e0:	817b      	strh	r3, [r7, #10]
 80123e2:	4613      	mov	r3, r2
 80123e4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <tcp_output_alloc_header+0x26>
 80123ec:	4b15      	ldr	r3, [pc, #84]	@ (8012444 <tcp_output_alloc_header+0x70>)
 80123ee:	f240 7242 	movw	r2, #1858	@ 0x742
 80123f2:	4915      	ldr	r1, [pc, #84]	@ (8012448 <tcp_output_alloc_header+0x74>)
 80123f4:	4815      	ldr	r0, [pc, #84]	@ (801244c <tcp_output_alloc_header+0x78>)
 80123f6:	f005 fc37 	bl	8017c68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	8adb      	ldrh	r3, [r3, #22]
 8012402:	68fa      	ldr	r2, [r7, #12]
 8012404:	8b12      	ldrh	r2, [r2, #24]
 8012406:	68f9      	ldr	r1, [r7, #12]
 8012408:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801240a:	893d      	ldrh	r5, [r7, #8]
 801240c:	897c      	ldrh	r4, [r7, #10]
 801240e:	9103      	str	r1, [sp, #12]
 8012410:	2110      	movs	r1, #16
 8012412:	9102      	str	r1, [sp, #8]
 8012414:	9201      	str	r2, [sp, #4]
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	462a      	mov	r2, r5
 801241c:	4621      	mov	r1, r4
 801241e:	f7ff ff67 	bl	80122f0 <tcp_output_alloc_header_common>
 8012422:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d006      	beq.n	8012438 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801242e:	68fa      	ldr	r2, [r7, #12]
 8012430:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012432:	441a      	add	r2, r3
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012438:	697b      	ldr	r3, [r7, #20]
}
 801243a:	4618      	mov	r0, r3
 801243c:	3718      	adds	r7, #24
 801243e:	46bd      	mov	sp, r7
 8012440:	bdb0      	pop	{r4, r5, r7, pc}
 8012442:	bf00      	nop
 8012444:	0801a5b0 	.word	0x0801a5b0
 8012448:	0801acb8 	.word	0x0801acb8
 801244c:	0801a604 	.word	0x0801a604

08012450 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b088      	sub	sp, #32
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	4611      	mov	r1, r2
 801245c:	461a      	mov	r2, r3
 801245e:	460b      	mov	r3, r1
 8012460:	71fb      	strb	r3, [r7, #7]
 8012462:	4613      	mov	r3, r2
 8012464:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d106      	bne.n	801247e <tcp_output_fill_options+0x2e>
 8012470:	4b12      	ldr	r3, [pc, #72]	@ (80124bc <tcp_output_fill_options+0x6c>)
 8012472:	f240 7256 	movw	r2, #1878	@ 0x756
 8012476:	4912      	ldr	r1, [pc, #72]	@ (80124c0 <tcp_output_fill_options+0x70>)
 8012478:	4812      	ldr	r0, [pc, #72]	@ (80124c4 <tcp_output_fill_options+0x74>)
 801247a:	f005 fbf5 	bl	8017c68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	3314      	adds	r3, #20
 8012488:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801248a:	8bfb      	ldrh	r3, [r7, #30]
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	461a      	mov	r2, r3
 8012490:	79fb      	ldrb	r3, [r7, #7]
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	f003 0304 	and.w	r3, r3, #4
 8012498:	4413      	add	r3, r2
 801249a:	3314      	adds	r3, #20
 801249c:	69ba      	ldr	r2, [r7, #24]
 801249e:	4413      	add	r3, r2
 80124a0:	697a      	ldr	r2, [r7, #20]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d006      	beq.n	80124b4 <tcp_output_fill_options+0x64>
 80124a6:	4b05      	ldr	r3, [pc, #20]	@ (80124bc <tcp_output_fill_options+0x6c>)
 80124a8:	f240 7275 	movw	r2, #1909	@ 0x775
 80124ac:	4906      	ldr	r1, [pc, #24]	@ (80124c8 <tcp_output_fill_options+0x78>)
 80124ae:	4805      	ldr	r0, [pc, #20]	@ (80124c4 <tcp_output_fill_options+0x74>)
 80124b0:	f005 fbda 	bl	8017c68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80124b4:	bf00      	nop
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	0801a5b0 	.word	0x0801a5b0
 80124c0:	0801ace0 	.word	0x0801ace0
 80124c4:	0801a604 	.word	0x0801a604
 80124c8:	0801abd8 	.word	0x0801abd8

080124cc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08a      	sub	sp, #40	@ 0x28
 80124d0:	af04      	add	r7, sp, #16
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
 80124d8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d106      	bne.n	80124ee <tcp_output_control_segment+0x22>
 80124e0:	4b1c      	ldr	r3, [pc, #112]	@ (8012554 <tcp_output_control_segment+0x88>)
 80124e2:	f240 7287 	movw	r2, #1927	@ 0x787
 80124e6:	491c      	ldr	r1, [pc, #112]	@ (8012558 <tcp_output_control_segment+0x8c>)
 80124e8:	481c      	ldr	r0, [pc, #112]	@ (801255c <tcp_output_control_segment+0x90>)
 80124ea:	f005 fbbd 	bl	8017c68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	6879      	ldr	r1, [r7, #4]
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f7fe faea 	bl	8010acc <tcp_route>
 80124f8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d102      	bne.n	8012506 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012500:	23fc      	movs	r3, #252	@ 0xfc
 8012502:	75fb      	strb	r3, [r7, #23]
 8012504:	e01c      	b.n	8012540 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d006      	beq.n	801251a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	7adb      	ldrb	r3, [r3, #11]
 8012510:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	7a9b      	ldrb	r3, [r3, #10]
 8012516:	757b      	strb	r3, [r7, #21]
 8012518:	e003      	b.n	8012522 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801251a:	23ff      	movs	r3, #255	@ 0xff
 801251c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012522:	7dba      	ldrb	r2, [r7, #22]
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	9302      	str	r3, [sp, #8]
 8012528:	2306      	movs	r3, #6
 801252a:	9301      	str	r3, [sp, #4]
 801252c:	7d7b      	ldrb	r3, [r7, #21]
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	4613      	mov	r3, r2
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	6879      	ldr	r1, [r7, #4]
 8012536:	68b8      	ldr	r0, [r7, #8]
 8012538:	f004 f952 	bl	80167e0 <ip4_output_if>
 801253c:	4603      	mov	r3, r0
 801253e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012540:	68b8      	ldr	r0, [r7, #8]
 8012542:	f7f9 fd17 	bl	800bf74 <pbuf_free>
  return err;
 8012546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801254a:	4618      	mov	r0, r3
 801254c:	3718      	adds	r7, #24
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	0801a5b0 	.word	0x0801a5b0
 8012558:	0801ad08 	.word	0x0801ad08
 801255c:	0801a604 	.word	0x0801a604

08012560 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012560:	b590      	push	{r4, r7, lr}
 8012562:	b08b      	sub	sp, #44	@ 0x2c
 8012564:	af04      	add	r7, sp, #16
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	607a      	str	r2, [r7, #4]
 801256c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d106      	bne.n	8012582 <tcp_rst+0x22>
 8012574:	4b1f      	ldr	r3, [pc, #124]	@ (80125f4 <tcp_rst+0x94>)
 8012576:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801257a:	491f      	ldr	r1, [pc, #124]	@ (80125f8 <tcp_rst+0x98>)
 801257c:	481f      	ldr	r0, [pc, #124]	@ (80125fc <tcp_rst+0x9c>)
 801257e:	f005 fb73 	bl	8017c68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012584:	2b00      	cmp	r3, #0
 8012586:	d106      	bne.n	8012596 <tcp_rst+0x36>
 8012588:	4b1a      	ldr	r3, [pc, #104]	@ (80125f4 <tcp_rst+0x94>)
 801258a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801258e:	491c      	ldr	r1, [pc, #112]	@ (8012600 <tcp_rst+0xa0>)
 8012590:	481a      	ldr	r0, [pc, #104]	@ (80125fc <tcp_rst+0x9c>)
 8012592:	f005 fb69 	bl	8017c68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012596:	2300      	movs	r3, #0
 8012598:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801259a:	f247 0344 	movw	r3, #28740	@ 0x7044
 801259e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80125a0:	7dfb      	ldrb	r3, [r7, #23]
 80125a2:	b29c      	uxth	r4, r3
 80125a4:	68b8      	ldr	r0, [r7, #8]
 80125a6:	f7f8 f849 	bl	800a63c <lwip_htonl>
 80125aa:	4602      	mov	r2, r0
 80125ac:	8abb      	ldrh	r3, [r7, #20]
 80125ae:	9303      	str	r3, [sp, #12]
 80125b0:	2314      	movs	r3, #20
 80125b2:	9302      	str	r3, [sp, #8]
 80125b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80125b6:	9301      	str	r3, [sp, #4]
 80125b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	4613      	mov	r3, r2
 80125be:	2200      	movs	r2, #0
 80125c0:	4621      	mov	r1, r4
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff fe94 	bl	80122f0 <tcp_output_alloc_header_common>
 80125c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00c      	beq.n	80125ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80125d0:	7dfb      	ldrb	r3, [r7, #23]
 80125d2:	2200      	movs	r2, #0
 80125d4:	6939      	ldr	r1, [r7, #16]
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f7ff ff3a 	bl	8012450 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80125dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	6939      	ldr	r1, [r7, #16]
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7ff ff72 	bl	80124cc <tcp_output_control_segment>
 80125e8:	e000      	b.n	80125ec <tcp_rst+0x8c>
    return;
 80125ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80125ec:	371c      	adds	r7, #28
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd90      	pop	{r4, r7, pc}
 80125f2:	bf00      	nop
 80125f4:	0801a5b0 	.word	0x0801a5b0
 80125f8:	0801ad34 	.word	0x0801ad34
 80125fc:	0801a604 	.word	0x0801a604
 8012600:	0801ad50 	.word	0x0801ad50

08012604 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012604:	b590      	push	{r4, r7, lr}
 8012606:	b087      	sub	sp, #28
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801260c:	2300      	movs	r3, #0
 801260e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012610:	2300      	movs	r3, #0
 8012612:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <tcp_send_empty_ack+0x24>
 801261a:	4b28      	ldr	r3, [pc, #160]	@ (80126bc <tcp_send_empty_ack+0xb8>)
 801261c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012620:	4927      	ldr	r1, [pc, #156]	@ (80126c0 <tcp_send_empty_ack+0xbc>)
 8012622:	4828      	ldr	r0, [pc, #160]	@ (80126c4 <tcp_send_empty_ack+0xc0>)
 8012624:	f005 fb20 	bl	8017c68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012628:	7dfb      	ldrb	r3, [r7, #23]
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	b2db      	uxtb	r3, r3
 801262e:	f003 0304 	and.w	r3, r3, #4
 8012632:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012634:	7d7b      	ldrb	r3, [r7, #21]
 8012636:	b29c      	uxth	r4, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801263c:	4618      	mov	r0, r3
 801263e:	f7f7 fffd 	bl	800a63c <lwip_htonl>
 8012642:	4603      	mov	r3, r0
 8012644:	2200      	movs	r2, #0
 8012646:	4621      	mov	r1, r4
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff fec3 	bl	80123d4 <tcp_output_alloc_header>
 801264e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d109      	bne.n	801266a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	8b5b      	ldrh	r3, [r3, #26]
 801265a:	f043 0303 	orr.w	r3, r3, #3
 801265e:	b29a      	uxth	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012664:	f06f 0301 	mvn.w	r3, #1
 8012668:	e023      	b.n	80126b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801266a:	7dbb      	ldrb	r3, [r7, #22]
 801266c:	7dfa      	ldrb	r2, [r7, #23]
 801266e:	6939      	ldr	r1, [r7, #16]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f7ff feed 	bl	8012450 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	3304      	adds	r3, #4
 801267c:	6939      	ldr	r1, [r7, #16]
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f7ff ff24 	bl	80124cc <tcp_output_control_segment>
 8012684:	4603      	mov	r3, r0
 8012686:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d007      	beq.n	80126a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	8b5b      	ldrh	r3, [r3, #26]
 8012694:	f043 0303 	orr.w	r3, r3, #3
 8012698:	b29a      	uxth	r2, r3
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	835a      	strh	r2, [r3, #26]
 801269e:	e006      	b.n	80126ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	8b5b      	ldrh	r3, [r3, #26]
 80126a4:	f023 0303 	bic.w	r3, r3, #3
 80126a8:	b29a      	uxth	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80126ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	371c      	adds	r7, #28
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd90      	pop	{r4, r7, pc}
 80126ba:	bf00      	nop
 80126bc:	0801a5b0 	.word	0x0801a5b0
 80126c0:	0801ad6c 	.word	0x0801ad6c
 80126c4:	0801a604 	.word	0x0801a604

080126c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80126c8:	b590      	push	{r4, r7, lr}
 80126ca:	b087      	sub	sp, #28
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80126d0:	2300      	movs	r3, #0
 80126d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d106      	bne.n	80126e8 <tcp_keepalive+0x20>
 80126da:	4b18      	ldr	r3, [pc, #96]	@ (801273c <tcp_keepalive+0x74>)
 80126dc:	f640 0224 	movw	r2, #2084	@ 0x824
 80126e0:	4917      	ldr	r1, [pc, #92]	@ (8012740 <tcp_keepalive+0x78>)
 80126e2:	4818      	ldr	r0, [pc, #96]	@ (8012744 <tcp_keepalive+0x7c>)
 80126e4:	f005 fac0 	bl	8017c68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80126e8:	7dfb      	ldrb	r3, [r7, #23]
 80126ea:	b29c      	uxth	r4, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80126f0:	3b01      	subs	r3, #1
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7f7 ffa2 	bl	800a63c <lwip_htonl>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2200      	movs	r2, #0
 80126fc:	4621      	mov	r1, r4
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7ff fe68 	bl	80123d4 <tcp_output_alloc_header>
 8012704:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d102      	bne.n	8012712 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801270c:	f04f 33ff 	mov.w	r3, #4294967295
 8012710:	e010      	b.n	8012734 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012712:	7dfb      	ldrb	r3, [r7, #23]
 8012714:	2200      	movs	r2, #0
 8012716:	6939      	ldr	r1, [r7, #16]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff fe99 	bl	8012450 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	3304      	adds	r3, #4
 8012724:	6939      	ldr	r1, [r7, #16]
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7ff fed0 	bl	80124cc <tcp_output_control_segment>
 801272c:	4603      	mov	r3, r0
 801272e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012734:	4618      	mov	r0, r3
 8012736:	371c      	adds	r7, #28
 8012738:	46bd      	mov	sp, r7
 801273a:	bd90      	pop	{r4, r7, pc}
 801273c:	0801a5b0 	.word	0x0801a5b0
 8012740:	0801ad8c 	.word	0x0801ad8c
 8012744:	0801a604 	.word	0x0801a604

08012748 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012748:	b590      	push	{r4, r7, lr}
 801274a:	b08b      	sub	sp, #44	@ 0x2c
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012750:	2300      	movs	r3, #0
 8012752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d106      	bne.n	801276a <tcp_zero_window_probe+0x22>
 801275c:	4b4c      	ldr	r3, [pc, #304]	@ (8012890 <tcp_zero_window_probe+0x148>)
 801275e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012762:	494c      	ldr	r1, [pc, #304]	@ (8012894 <tcp_zero_window_probe+0x14c>)
 8012764:	484c      	ldr	r0, [pc, #304]	@ (8012898 <tcp_zero_window_probe+0x150>)
 8012766:	f005 fa7f 	bl	8017c68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801276e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012770:	6a3b      	ldr	r3, [r7, #32]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d101      	bne.n	801277a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012776:	2300      	movs	r3, #0
 8012778:	e086      	b.n	8012888 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012780:	2bff      	cmp	r3, #255	@ 0xff
 8012782:	d007      	beq.n	8012794 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801278a:	3301      	adds	r3, #1
 801278c:	b2da      	uxtb	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012794:	6a3b      	ldr	r3, [r7, #32]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	899b      	ldrh	r3, [r3, #12]
 801279a:	b29b      	uxth	r3, r3
 801279c:	4618      	mov	r0, r3
 801279e:	f7f7 ff37 	bl	800a610 <lwip_htons>
 80127a2:	4603      	mov	r3, r0
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	f003 0301 	and.w	r3, r3, #1
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d005      	beq.n	80127ba <tcp_zero_window_probe+0x72>
 80127ae:	6a3b      	ldr	r3, [r7, #32]
 80127b0:	891b      	ldrh	r3, [r3, #8]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d101      	bne.n	80127ba <tcp_zero_window_probe+0x72>
 80127b6:	2301      	movs	r3, #1
 80127b8:	e000      	b.n	80127bc <tcp_zero_window_probe+0x74>
 80127ba:	2300      	movs	r3, #0
 80127bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80127be:	7ffb      	ldrb	r3, [r7, #31]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	bf0c      	ite	eq
 80127c4:	2301      	moveq	r3, #1
 80127c6:	2300      	movne	r3, #0
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80127cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127d0:	b299      	uxth	r1, r3
 80127d2:	6a3b      	ldr	r3, [r7, #32]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	8bba      	ldrh	r2, [r7, #28]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff fdfa 	bl	80123d4 <tcp_output_alloc_header>
 80127e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80127e2:	69bb      	ldr	r3, [r7, #24]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d102      	bne.n	80127ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295
 80127ec:	e04c      	b.n	8012888 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80127f4:	7ffb      	ldrb	r3, [r7, #31]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d011      	beq.n	801281e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	899b      	ldrh	r3, [r3, #12]
 80127fe:	b29b      	uxth	r3, r3
 8012800:	b21b      	sxth	r3, r3
 8012802:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012806:	b21c      	sxth	r4, r3
 8012808:	2011      	movs	r0, #17
 801280a:	f7f7 ff01 	bl	800a610 <lwip_htons>
 801280e:	4603      	mov	r3, r0
 8012810:	b21b      	sxth	r3, r3
 8012812:	4323      	orrs	r3, r4
 8012814:	b21b      	sxth	r3, r3
 8012816:	b29a      	uxth	r2, r3
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	819a      	strh	r2, [r3, #12]
 801281c:	e010      	b.n	8012840 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	3314      	adds	r3, #20
 8012824:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012826:	6a3b      	ldr	r3, [r7, #32]
 8012828:	6858      	ldr	r0, [r3, #4]
 801282a:	6a3b      	ldr	r3, [r7, #32]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	891a      	ldrh	r2, [r3, #8]
 8012830:	6a3b      	ldr	r3, [r7, #32]
 8012832:	891b      	ldrh	r3, [r3, #8]
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	b29b      	uxth	r3, r3
 8012838:	2201      	movs	r2, #1
 801283a:	6939      	ldr	r1, [r7, #16]
 801283c:	f7f9 fda0 	bl	800c380 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012840:	6a3b      	ldr	r3, [r7, #32]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	4618      	mov	r0, r3
 8012848:	f7f7 fef8 	bl	800a63c <lwip_htonl>
 801284c:	4603      	mov	r3, r0
 801284e:	3301      	adds	r3, #1
 8012850:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	2b00      	cmp	r3, #0
 801285c:	da02      	bge.n	8012864 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012868:	2200      	movs	r2, #0
 801286a:	69b9      	ldr	r1, [r7, #24]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f7ff fdef 	bl	8012450 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	3304      	adds	r3, #4
 8012878:	69b9      	ldr	r1, [r7, #24]
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7ff fe26 	bl	80124cc <tcp_output_control_segment>
 8012880:	4603      	mov	r3, r0
 8012882:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012884:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012888:	4618      	mov	r0, r3
 801288a:	372c      	adds	r7, #44	@ 0x2c
 801288c:	46bd      	mov	sp, r7
 801288e:	bd90      	pop	{r4, r7, pc}
 8012890:	0801a5b0 	.word	0x0801a5b0
 8012894:	0801ada8 	.word	0x0801ada8
 8012898:	0801a604 	.word	0x0801a604

0801289c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80128a4:	f7f9 ff12 	bl	800c6cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80128a8:	4b0a      	ldr	r3, [pc, #40]	@ (80128d4 <tcpip_tcp_timer+0x38>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d103      	bne.n	80128b8 <tcpip_tcp_timer+0x1c>
 80128b0:	4b09      	ldr	r3, [pc, #36]	@ (80128d8 <tcpip_tcp_timer+0x3c>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d005      	beq.n	80128c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80128b8:	2200      	movs	r2, #0
 80128ba:	4908      	ldr	r1, [pc, #32]	@ (80128dc <tcpip_tcp_timer+0x40>)
 80128bc:	20fa      	movs	r0, #250	@ 0xfa
 80128be:	f000 f8f3 	bl	8012aa8 <sys_timeout>
 80128c2:	e003      	b.n	80128cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80128c4:	4b06      	ldr	r3, [pc, #24]	@ (80128e0 <tcpip_tcp_timer+0x44>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	601a      	str	r2, [r3, #0]
  }
}
 80128ca:	bf00      	nop
 80128cc:	bf00      	nop
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	2001dd00 	.word	0x2001dd00
 80128d8:	2001dd04 	.word	0x2001dd04
 80128dc:	0801289d 	.word	0x0801289d
 80128e0:	2001dd4c 	.word	0x2001dd4c

080128e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80128e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012914 <tcp_timer_needed+0x30>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10f      	bne.n	8012910 <tcp_timer_needed+0x2c>
 80128f0:	4b09      	ldr	r3, [pc, #36]	@ (8012918 <tcp_timer_needed+0x34>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d103      	bne.n	8012900 <tcp_timer_needed+0x1c>
 80128f8:	4b08      	ldr	r3, [pc, #32]	@ (801291c <tcp_timer_needed+0x38>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d007      	beq.n	8012910 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012900:	4b04      	ldr	r3, [pc, #16]	@ (8012914 <tcp_timer_needed+0x30>)
 8012902:	2201      	movs	r2, #1
 8012904:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012906:	2200      	movs	r2, #0
 8012908:	4905      	ldr	r1, [pc, #20]	@ (8012920 <tcp_timer_needed+0x3c>)
 801290a:	20fa      	movs	r0, #250	@ 0xfa
 801290c:	f000 f8cc 	bl	8012aa8 <sys_timeout>
  }
}
 8012910:	bf00      	nop
 8012912:	bd80      	pop	{r7, pc}
 8012914:	2001dd4c 	.word	0x2001dd4c
 8012918:	2001dd00 	.word	0x2001dd00
 801291c:	2001dd04 	.word	0x2001dd04
 8012920:	0801289d 	.word	0x0801289d

08012924 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b086      	sub	sp, #24
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012930:	200a      	movs	r0, #10
 8012932:	f7f8 fb29 	bl	800af88 <memp_malloc>
 8012936:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d109      	bne.n	8012952 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d151      	bne.n	80129e8 <sys_timeout_abs+0xc4>
 8012944:	4b2a      	ldr	r3, [pc, #168]	@ (80129f0 <sys_timeout_abs+0xcc>)
 8012946:	22be      	movs	r2, #190	@ 0xbe
 8012948:	492a      	ldr	r1, [pc, #168]	@ (80129f4 <sys_timeout_abs+0xd0>)
 801294a:	482b      	ldr	r0, [pc, #172]	@ (80129f8 <sys_timeout_abs+0xd4>)
 801294c:	f005 f98c 	bl	8017c68 <iprintf>
    return;
 8012950:	e04a      	b.n	80129e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	2200      	movs	r2, #0
 8012956:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	68ba      	ldr	r2, [r7, #8]
 801295c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801296a:	4b24      	ldr	r3, [pc, #144]	@ (80129fc <sys_timeout_abs+0xd8>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d103      	bne.n	801297a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012972:	4a22      	ldr	r2, [pc, #136]	@ (80129fc <sys_timeout_abs+0xd8>)
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	6013      	str	r3, [r2, #0]
    return;
 8012978:	e037      	b.n	80129ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	685a      	ldr	r2, [r3, #4]
 801297e:	4b1f      	ldr	r3, [pc, #124]	@ (80129fc <sys_timeout_abs+0xd8>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	1ad3      	subs	r3, r2, r3
 8012986:	0fdb      	lsrs	r3, r3, #31
 8012988:	f003 0301 	and.w	r3, r3, #1
 801298c:	b2db      	uxtb	r3, r3
 801298e:	2b00      	cmp	r3, #0
 8012990:	d007      	beq.n	80129a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012992:	4b1a      	ldr	r3, [pc, #104]	@ (80129fc <sys_timeout_abs+0xd8>)
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801299a:	4a18      	ldr	r2, [pc, #96]	@ (80129fc <sys_timeout_abs+0xd8>)
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	6013      	str	r3, [r2, #0]
 80129a0:	e023      	b.n	80129ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80129a2:	4b16      	ldr	r3, [pc, #88]	@ (80129fc <sys_timeout_abs+0xd8>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	617b      	str	r3, [r7, #20]
 80129a8:	e01a      	b.n	80129e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00b      	beq.n	80129ca <sys_timeout_abs+0xa6>
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	685a      	ldr	r2, [r3, #4]
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	1ad3      	subs	r3, r2, r3
 80129be:	0fdb      	lsrs	r3, r3, #31
 80129c0:	f003 0301 	and.w	r3, r3, #1
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d007      	beq.n	80129da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	693a      	ldr	r2, [r7, #16]
 80129d6:	601a      	str	r2, [r3, #0]
        break;
 80129d8:	e007      	b.n	80129ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1e1      	bne.n	80129aa <sys_timeout_abs+0x86>
 80129e6:	e000      	b.n	80129ea <sys_timeout_abs+0xc6>
    return;
 80129e8:	bf00      	nop
      }
    }
  }
}
 80129ea:	3718      	adds	r7, #24
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	0801adcc 	.word	0x0801adcc
 80129f4:	0801ae00 	.word	0x0801ae00
 80129f8:	0801ae40 	.word	0x0801ae40
 80129fc:	2001dd44 	.word	0x2001dd44

08012a00 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b086      	sub	sp, #24
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	4798      	blx	r3

  now = sys_now();
 8012a12:	f7f4 f997 	bl	8006d44 <sys_now>
 8012a16:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8012a5c <lwip_cyclic_timer+0x5c>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4413      	add	r3, r2
 8012a22:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	0fdb      	lsrs	r3, r3, #31
 8012a2c:	f003 0301 	and.w	r3, r3, #1
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d009      	beq.n	8012a4a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	4907      	ldr	r1, [pc, #28]	@ (8012a60 <lwip_cyclic_timer+0x60>)
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7ff ff6e 	bl	8012924 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012a48:	e004      	b.n	8012a54 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	4904      	ldr	r1, [pc, #16]	@ (8012a60 <lwip_cyclic_timer+0x60>)
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f7ff ff68 	bl	8012924 <sys_timeout_abs>
}
 8012a54:	bf00      	nop
 8012a56:	3718      	adds	r7, #24
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	2001dd48 	.word	0x2001dd48
 8012a60:	08012a01 	.word	0x08012a01

08012a64 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	607b      	str	r3, [r7, #4]
 8012a6e:	e00e      	b.n	8012a8e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012a70:	4a0b      	ldr	r2, [pc, #44]	@ (8012aa0 <sys_timeouts_init+0x3c>)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	00db      	lsls	r3, r3, #3
 8012a7c:	4a08      	ldr	r2, [pc, #32]	@ (8012aa0 <sys_timeouts_init+0x3c>)
 8012a7e:	4413      	add	r3, r2
 8012a80:	461a      	mov	r2, r3
 8012a82:	4908      	ldr	r1, [pc, #32]	@ (8012aa4 <sys_timeouts_init+0x40>)
 8012a84:	f000 f810 	bl	8012aa8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	607b      	str	r3, [r7, #4]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2b04      	cmp	r3, #4
 8012a92:	d9ed      	bls.n	8012a70 <sys_timeouts_init+0xc>
  }
}
 8012a94:	bf00      	nop
 8012a96:	bf00      	nop
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	0801c3d8 	.word	0x0801c3d8
 8012aa4:	08012a01 	.word	0x08012a01

08012aa8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012aba:	d306      	bcc.n	8012aca <sys_timeout+0x22>
 8012abc:	4b0a      	ldr	r3, [pc, #40]	@ (8012ae8 <sys_timeout+0x40>)
 8012abe:	f240 1229 	movw	r2, #297	@ 0x129
 8012ac2:	490a      	ldr	r1, [pc, #40]	@ (8012aec <sys_timeout+0x44>)
 8012ac4:	480a      	ldr	r0, [pc, #40]	@ (8012af0 <sys_timeout+0x48>)
 8012ac6:	f005 f8cf 	bl	8017c68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012aca:	f7f4 f93b 	bl	8006d44 <sys_now>
 8012ace:	4602      	mov	r2, r0
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	68b9      	ldr	r1, [r7, #8]
 8012ada:	6978      	ldr	r0, [r7, #20]
 8012adc:	f7ff ff22 	bl	8012924 <sys_timeout_abs>
#endif
}
 8012ae0:	bf00      	nop
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	0801adcc 	.word	0x0801adcc
 8012aec:	0801ae68 	.word	0x0801ae68
 8012af0:	0801ae40 	.word	0x0801ae40

08012af4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012afa:	f7f4 f923 	bl	8006d44 <sys_now>
 8012afe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012b00:	4b17      	ldr	r3, [pc, #92]	@ (8012b60 <sys_check_timeouts+0x6c>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d022      	beq.n	8012b52 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	1ad3      	subs	r3, r2, r3
 8012b14:	0fdb      	lsrs	r3, r3, #31
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d11a      	bne.n	8012b56 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	4a0e      	ldr	r2, [pc, #56]	@ (8012b60 <sys_check_timeouts+0x6c>)
 8012b26:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	4a0a      	ldr	r2, [pc, #40]	@ (8012b64 <sys_check_timeouts+0x70>)
 8012b3a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012b3c:	68b9      	ldr	r1, [r7, #8]
 8012b3e:	200a      	movs	r0, #10
 8012b40:	f7f8 fa98 	bl	800b074 <memp_free>
    if (handler != NULL) {
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d0da      	beq.n	8012b00 <sys_check_timeouts+0xc>
      handler(arg);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6838      	ldr	r0, [r7, #0]
 8012b4e:	4798      	blx	r3
  do {
 8012b50:	e7d6      	b.n	8012b00 <sys_check_timeouts+0xc>
      return;
 8012b52:	bf00      	nop
 8012b54:	e000      	b.n	8012b58 <sys_check_timeouts+0x64>
      return;
 8012b56:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	2001dd44 	.word	0x2001dd44
 8012b64:	2001dd48 	.word	0x2001dd48

08012b68 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012b6e:	4b16      	ldr	r3, [pc, #88]	@ (8012bc8 <sys_timeouts_sleeptime+0x60>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d102      	bne.n	8012b7c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012b76:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7a:	e020      	b.n	8012bbe <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012b7c:	f7f4 f8e2 	bl	8006d44 <sys_now>
 8012b80:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012b82:	4b11      	ldr	r3, [pc, #68]	@ (8012bc8 <sys_timeouts_sleeptime+0x60>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	685a      	ldr	r2, [r3, #4]
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	0fdb      	lsrs	r3, r3, #31
 8012b8e:	f003 0301 	and.w	r3, r3, #1
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <sys_timeouts_sleeptime+0x34>
    return 0;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	e010      	b.n	8012bbe <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012bc8 <sys_timeouts_sleeptime+0x60>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	685a      	ldr	r2, [r3, #4]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	1ad3      	subs	r3, r2, r3
 8012ba6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	da06      	bge.n	8012bbc <sys_timeouts_sleeptime+0x54>
 8012bae:	4b07      	ldr	r3, [pc, #28]	@ (8012bcc <sys_timeouts_sleeptime+0x64>)
 8012bb0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012bb4:	4906      	ldr	r1, [pc, #24]	@ (8012bd0 <sys_timeouts_sleeptime+0x68>)
 8012bb6:	4807      	ldr	r0, [pc, #28]	@ (8012bd4 <sys_timeouts_sleeptime+0x6c>)
 8012bb8:	f005 f856 	bl	8017c68 <iprintf>
    return ret;
 8012bbc:	683b      	ldr	r3, [r7, #0]
  }
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	3708      	adds	r7, #8
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	2001dd44 	.word	0x2001dd44
 8012bcc:	0801adcc 	.word	0x0801adcc
 8012bd0:	0801aea0 	.word	0x0801aea0
 8012bd4:	0801ae40 	.word	0x0801ae40

08012bd8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012bdc:	f004 ff44 	bl	8017a68 <rand>
 8012be0:	4603      	mov	r3, r0
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	4b01      	ldr	r3, [pc, #4]	@ (8012bf8 <udp_init+0x20>)
 8012bf2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012bf4:	bf00      	nop
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	2000002c 	.word	0x2000002c

08012bfc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012c02:	2300      	movs	r3, #0
 8012c04:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012c06:	4b17      	ldr	r3, [pc, #92]	@ (8012c64 <udp_new_port+0x68>)
 8012c08:	881b      	ldrh	r3, [r3, #0]
 8012c0a:	1c5a      	adds	r2, r3, #1
 8012c0c:	b291      	uxth	r1, r2
 8012c0e:	4a15      	ldr	r2, [pc, #84]	@ (8012c64 <udp_new_port+0x68>)
 8012c10:	8011      	strh	r1, [r2, #0]
 8012c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c16:	4293      	cmp	r3, r2
 8012c18:	d103      	bne.n	8012c22 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012c1a:	4b12      	ldr	r3, [pc, #72]	@ (8012c64 <udp_new_port+0x68>)
 8012c1c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012c20:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c22:	4b11      	ldr	r3, [pc, #68]	@ (8012c68 <udp_new_port+0x6c>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	603b      	str	r3, [r7, #0]
 8012c28:	e011      	b.n	8012c4e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	8a5a      	ldrh	r2, [r3, #18]
 8012c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c64 <udp_new_port+0x68>)
 8012c30:	881b      	ldrh	r3, [r3, #0]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d108      	bne.n	8012c48 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012c36:	88fb      	ldrh	r3, [r7, #6]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	80fb      	strh	r3, [r7, #6]
 8012c3c:	88fb      	ldrh	r3, [r7, #6]
 8012c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012c42:	d3e0      	bcc.n	8012c06 <udp_new_port+0xa>
        return 0;
 8012c44:	2300      	movs	r3, #0
 8012c46:	e007      	b.n	8012c58 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	603b      	str	r3, [r7, #0]
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1ea      	bne.n	8012c2a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012c54:	4b03      	ldr	r3, [pc, #12]	@ (8012c64 <udp_new_port+0x68>)
 8012c56:	881b      	ldrh	r3, [r3, #0]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	2000002c 	.word	0x2000002c
 8012c68:	2001dd50 	.word	0x2001dd50

08012c6c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	4613      	mov	r3, r2
 8012c78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d105      	bne.n	8012c8c <udp_input_local_match+0x20>
 8012c80:	4b27      	ldr	r3, [pc, #156]	@ (8012d20 <udp_input_local_match+0xb4>)
 8012c82:	2287      	movs	r2, #135	@ 0x87
 8012c84:	4927      	ldr	r1, [pc, #156]	@ (8012d24 <udp_input_local_match+0xb8>)
 8012c86:	4828      	ldr	r0, [pc, #160]	@ (8012d28 <udp_input_local_match+0xbc>)
 8012c88:	f004 ffee 	bl	8017c68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d105      	bne.n	8012c9e <udp_input_local_match+0x32>
 8012c92:	4b23      	ldr	r3, [pc, #140]	@ (8012d20 <udp_input_local_match+0xb4>)
 8012c94:	2288      	movs	r2, #136	@ 0x88
 8012c96:	4925      	ldr	r1, [pc, #148]	@ (8012d2c <udp_input_local_match+0xc0>)
 8012c98:	4823      	ldr	r0, [pc, #140]	@ (8012d28 <udp_input_local_match+0xbc>)
 8012c9a:	f004 ffe5 	bl	8017c68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	7a1b      	ldrb	r3, [r3, #8]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d00b      	beq.n	8012cbe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	7a1a      	ldrb	r2, [r3, #8]
 8012caa:	4b21      	ldr	r3, [pc, #132]	@ (8012d30 <udp_input_local_match+0xc4>)
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d001      	beq.n	8012cbe <udp_input_local_match+0x52>
    return 0;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	e02b      	b.n	8012d16 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012cbe:	79fb      	ldrb	r3, [r7, #7]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d018      	beq.n	8012cf6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d013      	beq.n	8012cf2 <udp_input_local_match+0x86>
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d00f      	beq.n	8012cf2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012cd2:	4b17      	ldr	r3, [pc, #92]	@ (8012d30 <udp_input_local_match+0xc4>)
 8012cd4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cda:	d00a      	beq.n	8012cf2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	4b13      	ldr	r3, [pc, #76]	@ (8012d30 <udp_input_local_match+0xc4>)
 8012ce2:	695b      	ldr	r3, [r3, #20]
 8012ce4:	405a      	eors	r2, r3
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	3308      	adds	r3, #8
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d110      	bne.n	8012d14 <udp_input_local_match+0xa8>
          return 1;
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	e00f      	b.n	8012d16 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d009      	beq.n	8012d10 <udp_input_local_match+0xa4>
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d005      	beq.n	8012d10 <udp_input_local_match+0xa4>
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	4b09      	ldr	r3, [pc, #36]	@ (8012d30 <udp_input_local_match+0xc4>)
 8012d0a:	695b      	ldr	r3, [r3, #20]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d101      	bne.n	8012d14 <udp_input_local_match+0xa8>
        return 1;
 8012d10:	2301      	movs	r3, #1
 8012d12:	e000      	b.n	8012d16 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	0801aeb4 	.word	0x0801aeb4
 8012d24:	0801aee4 	.word	0x0801aee4
 8012d28:	0801af08 	.word	0x0801af08
 8012d2c:	0801af30 	.word	0x0801af30
 8012d30:	20010dd0 	.word	0x20010dd0

08012d34 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012d34:	b590      	push	{r4, r7, lr}
 8012d36:	b08d      	sub	sp, #52	@ 0x34
 8012d38:	af02      	add	r7, sp, #8
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d105      	bne.n	8012d54 <udp_input+0x20>
 8012d48:	4b7c      	ldr	r3, [pc, #496]	@ (8012f3c <udp_input+0x208>)
 8012d4a:	22cf      	movs	r2, #207	@ 0xcf
 8012d4c:	497c      	ldr	r1, [pc, #496]	@ (8012f40 <udp_input+0x20c>)
 8012d4e:	487d      	ldr	r0, [pc, #500]	@ (8012f44 <udp_input+0x210>)
 8012d50:	f004 ff8a 	bl	8017c68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d105      	bne.n	8012d66 <udp_input+0x32>
 8012d5a:	4b78      	ldr	r3, [pc, #480]	@ (8012f3c <udp_input+0x208>)
 8012d5c:	22d0      	movs	r2, #208	@ 0xd0
 8012d5e:	497a      	ldr	r1, [pc, #488]	@ (8012f48 <udp_input+0x214>)
 8012d60:	4878      	ldr	r0, [pc, #480]	@ (8012f44 <udp_input+0x210>)
 8012d62:	f004 ff81 	bl	8017c68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	895b      	ldrh	r3, [r3, #10]
 8012d6a:	2b07      	cmp	r3, #7
 8012d6c:	d803      	bhi.n	8012d76 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7f9 f900 	bl	800bf74 <pbuf_free>
    goto end;
 8012d74:	e0de      	b.n	8012f34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012d7c:	4b73      	ldr	r3, [pc, #460]	@ (8012f4c <udp_input+0x218>)
 8012d7e:	695b      	ldr	r3, [r3, #20]
 8012d80:	4a72      	ldr	r2, [pc, #456]	@ (8012f4c <udp_input+0x218>)
 8012d82:	6812      	ldr	r2, [r2, #0]
 8012d84:	4611      	mov	r1, r2
 8012d86:	4618      	mov	r0, r3
 8012d88:	f003 fe02 	bl	8016990 <ip4_addr_isbroadcast_u32>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	881b      	ldrh	r3, [r3, #0]
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7f7 fc3a 	bl	800a610 <lwip_htons>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	885b      	ldrh	r3, [r3, #2]
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7f7 fc32 	bl	800a610 <lwip_htons>
 8012dac:	4603      	mov	r3, r0
 8012dae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012db0:	2300      	movs	r3, #0
 8012db2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012db8:	2300      	movs	r3, #0
 8012dba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dbc:	4b64      	ldr	r3, [pc, #400]	@ (8012f50 <udp_input+0x21c>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dc2:	e054      	b.n	8012e6e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc6:	8a5b      	ldrh	r3, [r3, #18]
 8012dc8:	89fa      	ldrh	r2, [r7, #14]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d14a      	bne.n	8012e64 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012dce:	7cfb      	ldrb	r3, [r7, #19]
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	6839      	ldr	r1, [r7, #0]
 8012dd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dd6:	f7ff ff49 	bl	8012c6c <udp_input_local_match>
 8012dda:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d041      	beq.n	8012e64 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de2:	7c1b      	ldrb	r3, [r3, #16]
 8012de4:	f003 0304 	and.w	r3, r3, #4
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d11d      	bne.n	8012e28 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d102      	bne.n	8012df8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df4:	61fb      	str	r3, [r7, #28]
 8012df6:	e017      	b.n	8012e28 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012df8:	7cfb      	ldrb	r3, [r7, #19]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d014      	beq.n	8012e28 <udp_input+0xf4>
 8012dfe:	4b53      	ldr	r3, [pc, #332]	@ (8012f4c <udp_input+0x218>)
 8012e00:	695b      	ldr	r3, [r3, #20]
 8012e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e06:	d10f      	bne.n	8012e28 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	681a      	ldr	r2, [r3, #0]
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	3304      	adds	r3, #4
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d008      	beq.n	8012e28 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d101      	bne.n	8012e28 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e26:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e2a:	8a9b      	ldrh	r3, [r3, #20]
 8012e2c:	8a3a      	ldrh	r2, [r7, #16]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d118      	bne.n	8012e64 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e34:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d005      	beq.n	8012e46 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e3c:	685a      	ldr	r2, [r3, #4]
 8012e3e:	4b43      	ldr	r3, [pc, #268]	@ (8012f4c <udp_input+0x218>)
 8012e40:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d10e      	bne.n	8012e64 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d014      	beq.n	8012e76 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4e:	68da      	ldr	r2, [r3, #12]
 8012e50:	6a3b      	ldr	r3, [r7, #32]
 8012e52:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012e54:	4b3e      	ldr	r3, [pc, #248]	@ (8012f50 <udp_input+0x21c>)
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e5a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8012f50 <udp_input+0x21c>)
 8012e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e60:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012e62:	e008      	b.n	8012e76 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e66:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d1a7      	bne.n	8012dc4 <udp_input+0x90>
 8012e74:	e000      	b.n	8012e78 <udp_input+0x144>
        break;
 8012e76:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d101      	bne.n	8012e82 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d002      	beq.n	8012e8e <udp_input+0x15a>
    for_us = 1;
 8012e88:	2301      	movs	r3, #1
 8012e8a:	76fb      	strb	r3, [r7, #27]
 8012e8c:	e00a      	b.n	8012ea4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	3304      	adds	r3, #4
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	4b2d      	ldr	r3, [pc, #180]	@ (8012f4c <udp_input+0x218>)
 8012e96:	695b      	ldr	r3, [r3, #20]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	bf0c      	ite	eq
 8012e9c:	2301      	moveq	r3, #1
 8012e9e:	2300      	movne	r3, #0
 8012ea0:	b2db      	uxtb	r3, r3
 8012ea2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012ea4:	7efb      	ldrb	r3, [r7, #27]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d041      	beq.n	8012f2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012eaa:	2108      	movs	r1, #8
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f7f8 ffdb 	bl	800be68 <pbuf_remove_header>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00a      	beq.n	8012ece <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012eb8:	4b20      	ldr	r3, [pc, #128]	@ (8012f3c <udp_input+0x208>)
 8012eba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8012ebe:	4925      	ldr	r1, [pc, #148]	@ (8012f54 <udp_input+0x220>)
 8012ec0:	4820      	ldr	r0, [pc, #128]	@ (8012f44 <udp_input+0x210>)
 8012ec2:	f004 fed1 	bl	8017c68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7f9 f854 	bl	800bf74 <pbuf_free>
      goto end;
 8012ecc:	e032      	b.n	8012f34 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d012      	beq.n	8012efa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d00a      	beq.n	8012ef2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ede:	699c      	ldr	r4, [r3, #24]
 8012ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee2:	69d8      	ldr	r0, [r3, #28]
 8012ee4:	8a3b      	ldrh	r3, [r7, #16]
 8012ee6:	9300      	str	r3, [sp, #0]
 8012ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8012f58 <udp_input+0x224>)
 8012eea:	687a      	ldr	r2, [r7, #4]
 8012eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012eee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012ef0:	e021      	b.n	8012f36 <udp_input+0x202>
        pbuf_free(p);
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f7f9 f83e 	bl	800bf74 <pbuf_free>
        goto end;
 8012ef8:	e01c      	b.n	8012f34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012efa:	7cfb      	ldrb	r3, [r7, #19]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d112      	bne.n	8012f26 <udp_input+0x1f2>
 8012f00:	4b12      	ldr	r3, [pc, #72]	@ (8012f4c <udp_input+0x218>)
 8012f02:	695b      	ldr	r3, [r3, #20]
 8012f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f08:	2be0      	cmp	r3, #224	@ 0xe0
 8012f0a:	d00c      	beq.n	8012f26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8012f4c <udp_input+0x218>)
 8012f0e:	899b      	ldrh	r3, [r3, #12]
 8012f10:	3308      	adds	r3, #8
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	b21b      	sxth	r3, r3
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7f9 f818 	bl	800bf4e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012f1e:	2103      	movs	r1, #3
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f003 f9f7 	bl	8016314 <icmp_dest_unreach>
      pbuf_free(p);
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7f9 f824 	bl	800bf74 <pbuf_free>
  return;
 8012f2c:	e003      	b.n	8012f36 <udp_input+0x202>
    pbuf_free(p);
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7f9 f820 	bl	800bf74 <pbuf_free>
  return;
 8012f34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012f36:	372c      	adds	r7, #44	@ 0x2c
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd90      	pop	{r4, r7, pc}
 8012f3c:	0801aeb4 	.word	0x0801aeb4
 8012f40:	0801af58 	.word	0x0801af58
 8012f44:	0801af08 	.word	0x0801af08
 8012f48:	0801af70 	.word	0x0801af70
 8012f4c:	20010dd0 	.word	0x20010dd0
 8012f50:	2001dd50 	.word	0x2001dd50
 8012f54:	0801af8c 	.word	0x0801af8c
 8012f58:	20010de0 	.word	0x20010de0

08012f5c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b088      	sub	sp, #32
 8012f60:	af02      	add	r7, sp, #8
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
 8012f68:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d109      	bne.n	8012f84 <udp_sendto_if+0x28>
 8012f70:	4b2e      	ldr	r3, [pc, #184]	@ (801302c <udp_sendto_if+0xd0>)
 8012f72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f76:	492e      	ldr	r1, [pc, #184]	@ (8013030 <udp_sendto_if+0xd4>)
 8012f78:	482e      	ldr	r0, [pc, #184]	@ (8013034 <udp_sendto_if+0xd8>)
 8012f7a:	f004 fe75 	bl	8017c68 <iprintf>
 8012f7e:	f06f 030f 	mvn.w	r3, #15
 8012f82:	e04f      	b.n	8013024 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d109      	bne.n	8012f9e <udp_sendto_if+0x42>
 8012f8a:	4b28      	ldr	r3, [pc, #160]	@ (801302c <udp_sendto_if+0xd0>)
 8012f8c:	f240 2281 	movw	r2, #641	@ 0x281
 8012f90:	4929      	ldr	r1, [pc, #164]	@ (8013038 <udp_sendto_if+0xdc>)
 8012f92:	4828      	ldr	r0, [pc, #160]	@ (8013034 <udp_sendto_if+0xd8>)
 8012f94:	f004 fe68 	bl	8017c68 <iprintf>
 8012f98:	f06f 030f 	mvn.w	r3, #15
 8012f9c:	e042      	b.n	8013024 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d109      	bne.n	8012fb8 <udp_sendto_if+0x5c>
 8012fa4:	4b21      	ldr	r3, [pc, #132]	@ (801302c <udp_sendto_if+0xd0>)
 8012fa6:	f240 2282 	movw	r2, #642	@ 0x282
 8012faa:	4924      	ldr	r1, [pc, #144]	@ (801303c <udp_sendto_if+0xe0>)
 8012fac:	4821      	ldr	r0, [pc, #132]	@ (8013034 <udp_sendto_if+0xd8>)
 8012fae:	f004 fe5b 	bl	8017c68 <iprintf>
 8012fb2:	f06f 030f 	mvn.w	r3, #15
 8012fb6:	e035      	b.n	8013024 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012fb8:	6a3b      	ldr	r3, [r7, #32]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d109      	bne.n	8012fd2 <udp_sendto_if+0x76>
 8012fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801302c <udp_sendto_if+0xd0>)
 8012fc0:	f240 2283 	movw	r2, #643	@ 0x283
 8012fc4:	491e      	ldr	r1, [pc, #120]	@ (8013040 <udp_sendto_if+0xe4>)
 8012fc6:	481b      	ldr	r0, [pc, #108]	@ (8013034 <udp_sendto_if+0xd8>)
 8012fc8:	f004 fe4e 	bl	8017c68 <iprintf>
 8012fcc:	f06f 030f 	mvn.w	r3, #15
 8012fd0:	e028      	b.n	8013024 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d009      	beq.n	8012fec <udp_sendto_if+0x90>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d005      	beq.n	8012fec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fe8:	2be0      	cmp	r3, #224	@ 0xe0
 8012fea:	d103      	bne.n	8012ff4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012fec:	6a3b      	ldr	r3, [r7, #32]
 8012fee:	3304      	adds	r3, #4
 8012ff0:	617b      	str	r3, [r7, #20]
 8012ff2:	e00b      	b.n	801300c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	6a3b      	ldr	r3, [r7, #32]
 8012ffa:	3304      	adds	r3, #4
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d002      	beq.n	8013008 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013002:	f06f 0303 	mvn.w	r3, #3
 8013006:	e00d      	b.n	8013024 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801300c:	887a      	ldrh	r2, [r7, #2]
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	9301      	str	r3, [sp, #4]
 8013012:	6a3b      	ldr	r3, [r7, #32]
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	4613      	mov	r3, r2
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	68b9      	ldr	r1, [r7, #8]
 801301c:	68f8      	ldr	r0, [r7, #12]
 801301e:	f000 f811 	bl	8013044 <udp_sendto_if_src>
 8013022:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013024:	4618      	mov	r0, r3
 8013026:	3718      	adds	r7, #24
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	0801aeb4 	.word	0x0801aeb4
 8013030:	0801b028 	.word	0x0801b028
 8013034:	0801af08 	.word	0x0801af08
 8013038:	0801b044 	.word	0x0801b044
 801303c:	0801b060 	.word	0x0801b060
 8013040:	0801b080 	.word	0x0801b080

08013044 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b08c      	sub	sp, #48	@ 0x30
 8013048:	af04      	add	r7, sp, #16
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
 8013050:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d109      	bne.n	801306c <udp_sendto_if_src+0x28>
 8013058:	4b65      	ldr	r3, [pc, #404]	@ (80131f0 <udp_sendto_if_src+0x1ac>)
 801305a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801305e:	4965      	ldr	r1, [pc, #404]	@ (80131f4 <udp_sendto_if_src+0x1b0>)
 8013060:	4865      	ldr	r0, [pc, #404]	@ (80131f8 <udp_sendto_if_src+0x1b4>)
 8013062:	f004 fe01 	bl	8017c68 <iprintf>
 8013066:	f06f 030f 	mvn.w	r3, #15
 801306a:	e0bc      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d109      	bne.n	8013086 <udp_sendto_if_src+0x42>
 8013072:	4b5f      	ldr	r3, [pc, #380]	@ (80131f0 <udp_sendto_if_src+0x1ac>)
 8013074:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013078:	4960      	ldr	r1, [pc, #384]	@ (80131fc <udp_sendto_if_src+0x1b8>)
 801307a:	485f      	ldr	r0, [pc, #380]	@ (80131f8 <udp_sendto_if_src+0x1b4>)
 801307c:	f004 fdf4 	bl	8017c68 <iprintf>
 8013080:	f06f 030f 	mvn.w	r3, #15
 8013084:	e0af      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d109      	bne.n	80130a0 <udp_sendto_if_src+0x5c>
 801308c:	4b58      	ldr	r3, [pc, #352]	@ (80131f0 <udp_sendto_if_src+0x1ac>)
 801308e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013092:	495b      	ldr	r1, [pc, #364]	@ (8013200 <udp_sendto_if_src+0x1bc>)
 8013094:	4858      	ldr	r0, [pc, #352]	@ (80131f8 <udp_sendto_if_src+0x1b4>)
 8013096:	f004 fde7 	bl	8017c68 <iprintf>
 801309a:	f06f 030f 	mvn.w	r3, #15
 801309e:	e0a2      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80130a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d109      	bne.n	80130ba <udp_sendto_if_src+0x76>
 80130a6:	4b52      	ldr	r3, [pc, #328]	@ (80131f0 <udp_sendto_if_src+0x1ac>)
 80130a8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80130ac:	4955      	ldr	r1, [pc, #340]	@ (8013204 <udp_sendto_if_src+0x1c0>)
 80130ae:	4852      	ldr	r0, [pc, #328]	@ (80131f8 <udp_sendto_if_src+0x1b4>)
 80130b0:	f004 fdda 	bl	8017c68 <iprintf>
 80130b4:	f06f 030f 	mvn.w	r3, #15
 80130b8:	e095      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80130ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d109      	bne.n	80130d4 <udp_sendto_if_src+0x90>
 80130c0:	4b4b      	ldr	r3, [pc, #300]	@ (80131f0 <udp_sendto_if_src+0x1ac>)
 80130c2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80130c6:	4950      	ldr	r1, [pc, #320]	@ (8013208 <udp_sendto_if_src+0x1c4>)
 80130c8:	484b      	ldr	r0, [pc, #300]	@ (80131f8 <udp_sendto_if_src+0x1b4>)
 80130ca:	f004 fdcd 	bl	8017c68 <iprintf>
 80130ce:	f06f 030f 	mvn.w	r3, #15
 80130d2:	e088      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	8a5b      	ldrh	r3, [r3, #18]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d10f      	bne.n	80130fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80130dc:	68f9      	ldr	r1, [r7, #12]
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	8a5b      	ldrh	r3, [r3, #18]
 80130e2:	461a      	mov	r2, r3
 80130e4:	68f8      	ldr	r0, [r7, #12]
 80130e6:	f000 f893 	bl	8013210 <udp_bind>
 80130ea:	4603      	mov	r3, r0
 80130ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80130ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d002      	beq.n	80130fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80130f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80130fa:	e074      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	891b      	ldrh	r3, [r3, #8]
 8013100:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013104:	4293      	cmp	r3, r2
 8013106:	d902      	bls.n	801310e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013108:	f04f 33ff 	mov.w	r3, #4294967295
 801310c:	e06b      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801310e:	2108      	movs	r1, #8
 8013110:	68b8      	ldr	r0, [r7, #8]
 8013112:	f7f8 fe99 	bl	800be48 <pbuf_add_header>
 8013116:	4603      	mov	r3, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d015      	beq.n	8013148 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801311c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013120:	2108      	movs	r1, #8
 8013122:	2022      	movs	r0, #34	@ 0x22
 8013124:	f7f8 fc44 	bl	800b9b0 <pbuf_alloc>
 8013128:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d102      	bne.n	8013136 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013130:	f04f 33ff 	mov.w	r3, #4294967295
 8013134:	e057      	b.n	80131e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	891b      	ldrh	r3, [r3, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d006      	beq.n	801314c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801313e:	68b9      	ldr	r1, [r7, #8]
 8013140:	69f8      	ldr	r0, [r7, #28]
 8013142:	f7f9 f83b 	bl	800c1bc <pbuf_chain>
 8013146:	e001      	b.n	801314c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	895b      	ldrh	r3, [r3, #10]
 8013150:	2b07      	cmp	r3, #7
 8013152:	d806      	bhi.n	8013162 <udp_sendto_if_src+0x11e>
 8013154:	4b26      	ldr	r3, [pc, #152]	@ (80131f0 <udp_sendto_if_src+0x1ac>)
 8013156:	f240 320d 	movw	r2, #781	@ 0x30d
 801315a:	492c      	ldr	r1, [pc, #176]	@ (801320c <udp_sendto_if_src+0x1c8>)
 801315c:	4826      	ldr	r0, [pc, #152]	@ (80131f8 <udp_sendto_if_src+0x1b4>)
 801315e:	f004 fd83 	bl	8017c68 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	8a5b      	ldrh	r3, [r3, #18]
 801316c:	4618      	mov	r0, r3
 801316e:	f7f7 fa4f 	bl	800a610 <lwip_htons>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801317a:	887b      	ldrh	r3, [r7, #2]
 801317c:	4618      	mov	r0, r3
 801317e:	f7f7 fa47 	bl	800a610 <lwip_htons>
 8013182:	4603      	mov	r3, r0
 8013184:	461a      	mov	r2, r3
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	2200      	movs	r2, #0
 801318e:	719a      	strb	r2, [r3, #6]
 8013190:	2200      	movs	r2, #0
 8013192:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013194:	69fb      	ldr	r3, [r7, #28]
 8013196:	891b      	ldrh	r3, [r3, #8]
 8013198:	4618      	mov	r0, r3
 801319a:	f7f7 fa39 	bl	800a610 <lwip_htons>
 801319e:	4603      	mov	r3, r0
 80131a0:	461a      	mov	r2, r3
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80131a6:	2311      	movs	r3, #17
 80131a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	7adb      	ldrb	r3, [r3, #11]
 80131ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	7a9b      	ldrb	r3, [r3, #10]
 80131b4:	7cb9      	ldrb	r1, [r7, #18]
 80131b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131b8:	9202      	str	r2, [sp, #8]
 80131ba:	7cfa      	ldrb	r2, [r7, #19]
 80131bc:	9201      	str	r2, [sp, #4]
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	460b      	mov	r3, r1
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80131c6:	69f8      	ldr	r0, [r7, #28]
 80131c8:	f003 fb34 	bl	8016834 <ip4_output_if_src>
 80131cc:	4603      	mov	r3, r0
 80131ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80131d0:	69fa      	ldr	r2, [r7, #28]
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d004      	beq.n	80131e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80131d8:	69f8      	ldr	r0, [r7, #28]
 80131da:	f7f8 fecb 	bl	800bf74 <pbuf_free>
    q = NULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80131e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3720      	adds	r7, #32
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	0801aeb4 	.word	0x0801aeb4
 80131f4:	0801b0a0 	.word	0x0801b0a0
 80131f8:	0801af08 	.word	0x0801af08
 80131fc:	0801b0c0 	.word	0x0801b0c0
 8013200:	0801b0e0 	.word	0x0801b0e0
 8013204:	0801b104 	.word	0x0801b104
 8013208:	0801b128 	.word	0x0801b128
 801320c:	0801b14c 	.word	0x0801b14c

08013210 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b086      	sub	sp, #24
 8013214:	af00      	add	r7, sp, #0
 8013216:	60f8      	str	r0, [r7, #12]
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	4613      	mov	r3, r2
 801321c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d101      	bne.n	8013228 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013224:	4b39      	ldr	r3, [pc, #228]	@ (801330c <udp_bind+0xfc>)
 8013226:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d109      	bne.n	8013242 <udp_bind+0x32>
 801322e:	4b38      	ldr	r3, [pc, #224]	@ (8013310 <udp_bind+0x100>)
 8013230:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013234:	4937      	ldr	r1, [pc, #220]	@ (8013314 <udp_bind+0x104>)
 8013236:	4838      	ldr	r0, [pc, #224]	@ (8013318 <udp_bind+0x108>)
 8013238:	f004 fd16 	bl	8017c68 <iprintf>
 801323c:	f06f 030f 	mvn.w	r3, #15
 8013240:	e060      	b.n	8013304 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013246:	4b35      	ldr	r3, [pc, #212]	@ (801331c <udp_bind+0x10c>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	617b      	str	r3, [r7, #20]
 801324c:	e009      	b.n	8013262 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801324e:	68fa      	ldr	r2, [r7, #12]
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	429a      	cmp	r2, r3
 8013254:	d102      	bne.n	801325c <udp_bind+0x4c>
      rebind = 1;
 8013256:	2301      	movs	r3, #1
 8013258:	74fb      	strb	r3, [r7, #19]
      break;
 801325a:	e005      	b.n	8013268 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	617b      	str	r3, [r7, #20]
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d1f2      	bne.n	801324e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013268:	88fb      	ldrh	r3, [r7, #6]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d109      	bne.n	8013282 <udp_bind+0x72>
    port = udp_new_port();
 801326e:	f7ff fcc5 	bl	8012bfc <udp_new_port>
 8013272:	4603      	mov	r3, r0
 8013274:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013276:	88fb      	ldrh	r3, [r7, #6]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d12c      	bne.n	80132d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801327c:	f06f 0307 	mvn.w	r3, #7
 8013280:	e040      	b.n	8013304 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013282:	4b26      	ldr	r3, [pc, #152]	@ (801331c <udp_bind+0x10c>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	617b      	str	r3, [r7, #20]
 8013288:	e022      	b.n	80132d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801328a:	68fa      	ldr	r2, [r7, #12]
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	429a      	cmp	r2, r3
 8013290:	d01b      	beq.n	80132ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	8a5b      	ldrh	r3, [r3, #18]
 8013296:	88fa      	ldrh	r2, [r7, #6]
 8013298:	429a      	cmp	r2, r3
 801329a:	d116      	bne.n	80132ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d00d      	beq.n	80132c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d00a      	beq.n	80132c4 <udp_bind+0xb4>
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d006      	beq.n	80132c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d003      	beq.n	80132c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d102      	bne.n	80132ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80132c4:	f06f 0307 	mvn.w	r3, #7
 80132c8:	e01c      	b.n	8013304 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	68db      	ldr	r3, [r3, #12]
 80132ce:	617b      	str	r3, [r7, #20]
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d1d9      	bne.n	801328a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <udp_bind+0xd2>
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	e000      	b.n	80132e4 <udp_bind+0xd4>
 80132e2:	2300      	movs	r3, #0
 80132e4:	68fa      	ldr	r2, [r7, #12]
 80132e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	88fa      	ldrh	r2, [r7, #6]
 80132ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80132ee:	7cfb      	ldrb	r3, [r7, #19]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d106      	bne.n	8013302 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80132f4:	4b09      	ldr	r3, [pc, #36]	@ (801331c <udp_bind+0x10c>)
 80132f6:	681a      	ldr	r2, [r3, #0]
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80132fc:	4a07      	ldr	r2, [pc, #28]	@ (801331c <udp_bind+0x10c>)
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3718      	adds	r7, #24
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	0801c400 	.word	0x0801c400
 8013310:	0801aeb4 	.word	0x0801aeb4
 8013314:	0801b17c 	.word	0x0801b17c
 8013318:	0801af08 	.word	0x0801af08
 801331c:	2001dd50 	.word	0x2001dd50

08013320 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	4613      	mov	r3, r2
 801332c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d109      	bne.n	8013348 <udp_connect+0x28>
 8013334:	4b2c      	ldr	r3, [pc, #176]	@ (80133e8 <udp_connect+0xc8>)
 8013336:	f240 4235 	movw	r2, #1077	@ 0x435
 801333a:	492c      	ldr	r1, [pc, #176]	@ (80133ec <udp_connect+0xcc>)
 801333c:	482c      	ldr	r0, [pc, #176]	@ (80133f0 <udp_connect+0xd0>)
 801333e:	f004 fc93 	bl	8017c68 <iprintf>
 8013342:	f06f 030f 	mvn.w	r3, #15
 8013346:	e04b      	b.n	80133e0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d109      	bne.n	8013362 <udp_connect+0x42>
 801334e:	4b26      	ldr	r3, [pc, #152]	@ (80133e8 <udp_connect+0xc8>)
 8013350:	f240 4236 	movw	r2, #1078	@ 0x436
 8013354:	4927      	ldr	r1, [pc, #156]	@ (80133f4 <udp_connect+0xd4>)
 8013356:	4826      	ldr	r0, [pc, #152]	@ (80133f0 <udp_connect+0xd0>)
 8013358:	f004 fc86 	bl	8017c68 <iprintf>
 801335c:	f06f 030f 	mvn.w	r3, #15
 8013360:	e03e      	b.n	80133e0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	8a5b      	ldrh	r3, [r3, #18]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d10f      	bne.n	801338a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801336a:	68f9      	ldr	r1, [r7, #12]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	8a5b      	ldrh	r3, [r3, #18]
 8013370:	461a      	mov	r2, r3
 8013372:	68f8      	ldr	r0, [r7, #12]
 8013374:	f7ff ff4c 	bl	8013210 <udp_bind>
 8013378:	4603      	mov	r3, r0
 801337a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801337c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d002      	beq.n	801338a <udp_connect+0x6a>
      return err;
 8013384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013388:	e02a      	b.n	80133e0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <udp_connect+0x76>
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	e000      	b.n	8013398 <udp_connect+0x78>
 8013396:	2300      	movs	r3, #0
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	88fa      	ldrh	r2, [r7, #6]
 80133a0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	7c1b      	ldrb	r3, [r3, #16]
 80133a6:	f043 0304 	orr.w	r3, r3, #4
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133b0:	4b11      	ldr	r3, [pc, #68]	@ (80133f8 <udp_connect+0xd8>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	617b      	str	r3, [r7, #20]
 80133b6:	e008      	b.n	80133ca <udp_connect+0xaa>
    if (pcb == ipcb) {
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d101      	bne.n	80133c4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	e00d      	b.n	80133e0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	617b      	str	r3, [r7, #20]
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d1f3      	bne.n	80133b8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80133d0:	4b09      	ldr	r3, [pc, #36]	@ (80133f8 <udp_connect+0xd8>)
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80133d8:	4a07      	ldr	r2, [pc, #28]	@ (80133f8 <udp_connect+0xd8>)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80133de:	2300      	movs	r3, #0
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3718      	adds	r7, #24
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	0801aeb4 	.word	0x0801aeb4
 80133ec:	0801b194 	.word	0x0801b194
 80133f0:	0801af08 	.word	0x0801af08
 80133f4:	0801b1b0 	.word	0x0801b1b0
 80133f8:	2001dd50 	.word	0x2001dd50

080133fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d107      	bne.n	801341e <udp_recv+0x22>
 801340e:	4b08      	ldr	r3, [pc, #32]	@ (8013430 <udp_recv+0x34>)
 8013410:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013414:	4907      	ldr	r1, [pc, #28]	@ (8013434 <udp_recv+0x38>)
 8013416:	4808      	ldr	r0, [pc, #32]	@ (8013438 <udp_recv+0x3c>)
 8013418:	f004 fc26 	bl	8017c68 <iprintf>
 801341c:	e005      	b.n	801342a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	61da      	str	r2, [r3, #28]
}
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	0801aeb4 	.word	0x0801aeb4
 8013434:	0801b1e8 	.word	0x0801b1e8
 8013438:	0801af08 	.word	0x0801af08

0801343c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d107      	bne.n	801345a <udp_remove+0x1e>
 801344a:	4b19      	ldr	r3, [pc, #100]	@ (80134b0 <udp_remove+0x74>)
 801344c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013450:	4918      	ldr	r1, [pc, #96]	@ (80134b4 <udp_remove+0x78>)
 8013452:	4819      	ldr	r0, [pc, #100]	@ (80134b8 <udp_remove+0x7c>)
 8013454:	f004 fc08 	bl	8017c68 <iprintf>
 8013458:	e026      	b.n	80134a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801345a:	4b18      	ldr	r3, [pc, #96]	@ (80134bc <udp_remove+0x80>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	429a      	cmp	r2, r3
 8013462:	d105      	bne.n	8013470 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013464:	4b15      	ldr	r3, [pc, #84]	@ (80134bc <udp_remove+0x80>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	4a14      	ldr	r2, [pc, #80]	@ (80134bc <udp_remove+0x80>)
 801346c:	6013      	str	r3, [r2, #0]
 801346e:	e017      	b.n	80134a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013470:	4b12      	ldr	r3, [pc, #72]	@ (80134bc <udp_remove+0x80>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	60fb      	str	r3, [r7, #12]
 8013476:	e010      	b.n	801349a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d009      	beq.n	8013494 <udp_remove+0x58>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	429a      	cmp	r2, r3
 8013488:	d104      	bne.n	8013494 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	68da      	ldr	r2, [r3, #12]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	60da      	str	r2, [r3, #12]
        break;
 8013492:	e005      	b.n	80134a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	60fb      	str	r3, [r7, #12]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d1eb      	bne.n	8013478 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80134a0:	6879      	ldr	r1, [r7, #4]
 80134a2:	2000      	movs	r0, #0
 80134a4:	f7f7 fde6 	bl	800b074 <memp_free>
}
 80134a8:	3710      	adds	r7, #16
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	0801aeb4 	.word	0x0801aeb4
 80134b4:	0801b200 	.word	0x0801b200
 80134b8:	0801af08 	.word	0x0801af08
 80134bc:	2001dd50 	.word	0x2001dd50

080134c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80134c6:	2000      	movs	r0, #0
 80134c8:	f7f7 fd5e 	bl	800af88 <memp_malloc>
 80134cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d007      	beq.n	80134e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80134d4:	2220      	movs	r2, #32
 80134d6:	2100      	movs	r1, #0
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f004 fc2a 	bl	8017d32 <memset>
    pcb->ttl = UDP_TTL;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	22ff      	movs	r2, #255	@ 0xff
 80134e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80134e4:	687b      	ldr	r3, [r7, #4]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3708      	adds	r7, #8
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
	...

080134f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b085      	sub	sp, #20
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d01e      	beq.n	801353e <udp_netif_ip_addr_changed+0x4e>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d01a      	beq.n	801353e <udp_netif_ip_addr_changed+0x4e>
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d017      	beq.n	801353e <udp_netif_ip_addr_changed+0x4e>
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d013      	beq.n	801353e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013516:	4b0d      	ldr	r3, [pc, #52]	@ (801354c <udp_netif_ip_addr_changed+0x5c>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	60fb      	str	r3, [r7, #12]
 801351c:	e00c      	b.n	8013538 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	429a      	cmp	r2, r3
 8013528:	d103      	bne.n	8013532 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	60fb      	str	r3, [r7, #12]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d1ef      	bne.n	801351e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801353e:	bf00      	nop
 8013540:	3714      	adds	r7, #20
 8013542:	46bd      	mov	sp, r7
 8013544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013548:	4770      	bx	lr
 801354a:	bf00      	nop
 801354c:	2001dd50 	.word	0x2001dd50

08013550 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013554:	4b20      	ldr	r3, [pc, #128]	@ (80135d8 <dhcp_inc_pcb_refcount+0x88>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d133      	bne.n	80135c4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801355c:	4b1f      	ldr	r3, [pc, #124]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d005      	beq.n	8013570 <dhcp_inc_pcb_refcount+0x20>
 8013564:	4b1e      	ldr	r3, [pc, #120]	@ (80135e0 <dhcp_inc_pcb_refcount+0x90>)
 8013566:	22e5      	movs	r2, #229	@ 0xe5
 8013568:	491e      	ldr	r1, [pc, #120]	@ (80135e4 <dhcp_inc_pcb_refcount+0x94>)
 801356a:	481f      	ldr	r0, [pc, #124]	@ (80135e8 <dhcp_inc_pcb_refcount+0x98>)
 801356c:	f004 fb7c 	bl	8017c68 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013570:	f7ff ffa6 	bl	80134c0 <udp_new>
 8013574:	4603      	mov	r3, r0
 8013576:	4a19      	ldr	r2, [pc, #100]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 8013578:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801357a:	4b18      	ldr	r3, [pc, #96]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d102      	bne.n	8013588 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013582:	f04f 33ff 	mov.w	r3, #4294967295
 8013586:	e024      	b.n	80135d2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013588:	4b14      	ldr	r3, [pc, #80]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	7a5a      	ldrb	r2, [r3, #9]
 801358e:	4b13      	ldr	r3, [pc, #76]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f042 0220 	orr.w	r2, r2, #32
 8013596:	b2d2      	uxtb	r2, r2
 8013598:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801359a:	4b10      	ldr	r3, [pc, #64]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2244      	movs	r2, #68	@ 0x44
 80135a0:	4912      	ldr	r1, [pc, #72]	@ (80135ec <dhcp_inc_pcb_refcount+0x9c>)
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff fe34 	bl	8013210 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80135a8:	4b0c      	ldr	r3, [pc, #48]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2243      	movs	r2, #67	@ 0x43
 80135ae:	490f      	ldr	r1, [pc, #60]	@ (80135ec <dhcp_inc_pcb_refcount+0x9c>)
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff feb5 	bl	8013320 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80135b6:	4b09      	ldr	r3, [pc, #36]	@ (80135dc <dhcp_inc_pcb_refcount+0x8c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	2200      	movs	r2, #0
 80135bc:	490c      	ldr	r1, [pc, #48]	@ (80135f0 <dhcp_inc_pcb_refcount+0xa0>)
 80135be:	4618      	mov	r0, r3
 80135c0:	f7ff ff1c 	bl	80133fc <udp_recv>
  }

  dhcp_pcb_refcount++;
 80135c4:	4b04      	ldr	r3, [pc, #16]	@ (80135d8 <dhcp_inc_pcb_refcount+0x88>)
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	3301      	adds	r3, #1
 80135ca:	b2da      	uxtb	r2, r3
 80135cc:	4b02      	ldr	r3, [pc, #8]	@ (80135d8 <dhcp_inc_pcb_refcount+0x88>)
 80135ce:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	2001dd80 	.word	0x2001dd80
 80135dc:	2001dd7c 	.word	0x2001dd7c
 80135e0:	0801b218 	.word	0x0801b218
 80135e4:	0801b250 	.word	0x0801b250
 80135e8:	0801b278 	.word	0x0801b278
 80135ec:	0801c400 	.word	0x0801c400
 80135f0:	08014e7d 	.word	0x08014e7d

080135f4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80135f8:	4b0e      	ldr	r3, [pc, #56]	@ (8013634 <dhcp_dec_pcb_refcount+0x40>)
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d105      	bne.n	801360c <dhcp_dec_pcb_refcount+0x18>
 8013600:	4b0d      	ldr	r3, [pc, #52]	@ (8013638 <dhcp_dec_pcb_refcount+0x44>)
 8013602:	22ff      	movs	r2, #255	@ 0xff
 8013604:	490d      	ldr	r1, [pc, #52]	@ (801363c <dhcp_dec_pcb_refcount+0x48>)
 8013606:	480e      	ldr	r0, [pc, #56]	@ (8013640 <dhcp_dec_pcb_refcount+0x4c>)
 8013608:	f004 fb2e 	bl	8017c68 <iprintf>
  dhcp_pcb_refcount--;
 801360c:	4b09      	ldr	r3, [pc, #36]	@ (8013634 <dhcp_dec_pcb_refcount+0x40>)
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	3b01      	subs	r3, #1
 8013612:	b2da      	uxtb	r2, r3
 8013614:	4b07      	ldr	r3, [pc, #28]	@ (8013634 <dhcp_dec_pcb_refcount+0x40>)
 8013616:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013618:	4b06      	ldr	r3, [pc, #24]	@ (8013634 <dhcp_dec_pcb_refcount+0x40>)
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d107      	bne.n	8013630 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013620:	4b08      	ldr	r3, [pc, #32]	@ (8013644 <dhcp_dec_pcb_refcount+0x50>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4618      	mov	r0, r3
 8013626:	f7ff ff09 	bl	801343c <udp_remove>
    dhcp_pcb = NULL;
 801362a:	4b06      	ldr	r3, [pc, #24]	@ (8013644 <dhcp_dec_pcb_refcount+0x50>)
 801362c:	2200      	movs	r2, #0
 801362e:	601a      	str	r2, [r3, #0]
  }
}
 8013630:	bf00      	nop
 8013632:	bd80      	pop	{r7, pc}
 8013634:	2001dd80 	.word	0x2001dd80
 8013638:	0801b218 	.word	0x0801b218
 801363c:	0801b2a0 	.word	0x0801b2a0
 8013640:	0801b278 	.word	0x0801b278
 8013644:	2001dd7c 	.word	0x2001dd7c

08013648 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013654:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013656:	210c      	movs	r1, #12
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f001 f851 	bl	8014700 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801365e:	4b06      	ldr	r3, [pc, #24]	@ (8013678 <dhcp_handle_nak+0x30>)
 8013660:	4a05      	ldr	r2, [pc, #20]	@ (8013678 <dhcp_handle_nak+0x30>)
 8013662:	4905      	ldr	r1, [pc, #20]	@ (8013678 <dhcp_handle_nak+0x30>)
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f7f7 fedd 	bl	800b424 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 fc4a 	bl	8013f04 <dhcp_discover>
}
 8013670:	bf00      	nop
 8013672:	3710      	adds	r7, #16
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	0801c400 	.word	0x0801c400

0801367c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013688:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801368a:	2108      	movs	r1, #8
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	f001 f837 	bl	8014700 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	331c      	adds	r3, #28
 8013696:	2200      	movs	r2, #0
 8013698:	4619      	mov	r1, r3
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f002 fb38 	bl	8015d10 <etharp_query>
 80136a0:	4603      	mov	r3, r0
 80136a2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	799b      	ldrb	r3, [r3, #6]
 80136a8:	2bff      	cmp	r3, #255	@ 0xff
 80136aa:	d005      	beq.n	80136b8 <dhcp_check+0x3c>
    dhcp->tries++;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	799b      	ldrb	r3, [r3, #6]
 80136b0:	3301      	adds	r3, #1
 80136b2:	b2da      	uxtb	r2, r3
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80136b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80136bc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80136be:	893b      	ldrh	r3, [r7, #8]
 80136c0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80136c4:	4a06      	ldr	r2, [pc, #24]	@ (80136e0 <dhcp_check+0x64>)
 80136c6:	fb82 1203 	smull	r1, r2, r2, r3
 80136ca:	1152      	asrs	r2, r2, #5
 80136cc:	17db      	asrs	r3, r3, #31
 80136ce:	1ad3      	subs	r3, r2, r3
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80136d6:	bf00      	nop
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	10624dd3 	.word	0x10624dd3

080136e4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80136f4:	4b0c      	ldr	r3, [pc, #48]	@ (8013728 <dhcp_handle_offer+0x44>)
 80136f6:	789b      	ldrb	r3, [r3, #2]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d011      	beq.n	8013720 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2200      	movs	r2, #0
 8013700:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013702:	4b0a      	ldr	r3, [pc, #40]	@ (801372c <dhcp_handle_offer+0x48>)
 8013704:	689b      	ldr	r3, [r3, #8]
 8013706:	4618      	mov	r0, r3
 8013708:	f7f6 ff98 	bl	800a63c <lwip_htonl>
 801370c:	4602      	mov	r2, r0
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	691a      	ldr	r2, [r3, #16]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f000 f808 	bl	8013730 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013720:	bf00      	nop
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	2001dd74 	.word	0x2001dd74
 801372c:	2001dd54 	.word	0x2001dd54

08013730 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013730:	b5b0      	push	{r4, r5, r7, lr}
 8013732:	b08a      	sub	sp, #40	@ 0x28
 8013734:	af02      	add	r7, sp, #8
 8013736:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d109      	bne.n	8013752 <dhcp_select+0x22>
 801373e:	4b71      	ldr	r3, [pc, #452]	@ (8013904 <dhcp_select+0x1d4>)
 8013740:	f240 1277 	movw	r2, #375	@ 0x177
 8013744:	4970      	ldr	r1, [pc, #448]	@ (8013908 <dhcp_select+0x1d8>)
 8013746:	4871      	ldr	r0, [pc, #452]	@ (801390c <dhcp_select+0x1dc>)
 8013748:	f004 fa8e 	bl	8017c68 <iprintf>
 801374c:	f06f 030f 	mvn.w	r3, #15
 8013750:	e0d3      	b.n	80138fa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013756:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d109      	bne.n	8013772 <dhcp_select+0x42>
 801375e:	4b69      	ldr	r3, [pc, #420]	@ (8013904 <dhcp_select+0x1d4>)
 8013760:	f240 1279 	movw	r2, #377	@ 0x179
 8013764:	496a      	ldr	r1, [pc, #424]	@ (8013910 <dhcp_select+0x1e0>)
 8013766:	4869      	ldr	r0, [pc, #420]	@ (801390c <dhcp_select+0x1dc>)
 8013768:	f004 fa7e 	bl	8017c68 <iprintf>
 801376c:	f06f 0305 	mvn.w	r3, #5
 8013770:	e0c3      	b.n	80138fa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013772:	2101      	movs	r1, #1
 8013774:	69b8      	ldr	r0, [r7, #24]
 8013776:	f000 ffc3 	bl	8014700 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801377a:	f107 030c 	add.w	r3, r7, #12
 801377e:	2203      	movs	r2, #3
 8013780:	69b9      	ldr	r1, [r7, #24]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f001 fc48 	bl	8015018 <dhcp_create_msg>
 8013788:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	2b00      	cmp	r3, #0
 801378e:	f000 8085 	beq.w	801389c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	685b      	ldr	r3, [r3, #4]
 8013796:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013798:	89b8      	ldrh	r0, [r7, #12]
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80137a0:	2302      	movs	r3, #2
 80137a2:	2239      	movs	r2, #57	@ 0x39
 80137a4:	f000 ffc6 	bl	8014734 <dhcp_option>
 80137a8:	4603      	mov	r3, r0
 80137aa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80137ac:	89b8      	ldrh	r0, [r7, #12]
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80137b8:	461a      	mov	r2, r3
 80137ba:	f001 f815 	bl	80147e8 <dhcp_option_short>
 80137be:	4603      	mov	r3, r0
 80137c0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80137c2:	89b8      	ldrh	r0, [r7, #12]
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80137ca:	2304      	movs	r3, #4
 80137cc:	2232      	movs	r2, #50	@ 0x32
 80137ce:	f000 ffb1 	bl	8014734 <dhcp_option>
 80137d2:	4603      	mov	r3, r0
 80137d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80137d6:	89bc      	ldrh	r4, [r7, #12]
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	69db      	ldr	r3, [r3, #28]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7f6 ff2a 	bl	800a63c <lwip_htonl>
 80137e8:	4603      	mov	r3, r0
 80137ea:	461a      	mov	r2, r3
 80137ec:	4629      	mov	r1, r5
 80137ee:	4620      	mov	r0, r4
 80137f0:	f001 f82c 	bl	801484c <dhcp_option_long>
 80137f4:	4603      	mov	r3, r0
 80137f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80137f8:	89b8      	ldrh	r0, [r7, #12]
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013800:	2304      	movs	r3, #4
 8013802:	2236      	movs	r2, #54	@ 0x36
 8013804:	f000 ff96 	bl	8014734 <dhcp_option>
 8013808:	4603      	mov	r3, r0
 801380a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801380c:	89bc      	ldrh	r4, [r7, #12]
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	4618      	mov	r0, r3
 801381a:	f7f6 ff0f 	bl	800a63c <lwip_htonl>
 801381e:	4603      	mov	r3, r0
 8013820:	461a      	mov	r2, r3
 8013822:	4629      	mov	r1, r5
 8013824:	4620      	mov	r0, r4
 8013826:	f001 f811 	bl	801484c <dhcp_option_long>
 801382a:	4603      	mov	r3, r0
 801382c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801382e:	89b8      	ldrh	r0, [r7, #12]
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013836:	2303      	movs	r3, #3
 8013838:	2237      	movs	r2, #55	@ 0x37
 801383a:	f000 ff7b 	bl	8014734 <dhcp_option>
 801383e:	4603      	mov	r3, r0
 8013840:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013842:	2300      	movs	r3, #0
 8013844:	77bb      	strb	r3, [r7, #30]
 8013846:	e00e      	b.n	8013866 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013848:	89b8      	ldrh	r0, [r7, #12]
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013850:	7fbb      	ldrb	r3, [r7, #30]
 8013852:	4a30      	ldr	r2, [pc, #192]	@ (8013914 <dhcp_select+0x1e4>)
 8013854:	5cd3      	ldrb	r3, [r2, r3]
 8013856:	461a      	mov	r2, r3
 8013858:	f000 ffa0 	bl	801479c <dhcp_option_byte>
 801385c:	4603      	mov	r3, r0
 801385e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013860:	7fbb      	ldrb	r3, [r7, #30]
 8013862:	3301      	adds	r3, #1
 8013864:	77bb      	strb	r3, [r7, #30]
 8013866:	7fbb      	ldrb	r3, [r7, #30]
 8013868:	2b02      	cmp	r3, #2
 801386a:	d9ed      	bls.n	8013848 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801386c:	89b8      	ldrh	r0, [r7, #12]
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	33f0      	adds	r3, #240	@ 0xf0
 8013872:	697a      	ldr	r2, [r7, #20]
 8013874:	4619      	mov	r1, r3
 8013876:	f001 fca5 	bl	80151c4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801387a:	4b27      	ldr	r3, [pc, #156]	@ (8013918 <dhcp_select+0x1e8>)
 801387c:	6818      	ldr	r0, [r3, #0]
 801387e:	4b27      	ldr	r3, [pc, #156]	@ (801391c <dhcp_select+0x1ec>)
 8013880:	9301      	str	r3, [sp, #4]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	2343      	movs	r3, #67	@ 0x43
 8013888:	4a25      	ldr	r2, [pc, #148]	@ (8013920 <dhcp_select+0x1f0>)
 801388a:	6979      	ldr	r1, [r7, #20]
 801388c:	f7ff fbda 	bl	8013044 <udp_sendto_if_src>
 8013890:	4603      	mov	r3, r0
 8013892:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013894:	6978      	ldr	r0, [r7, #20]
 8013896:	f7f8 fb6d 	bl	800bf74 <pbuf_free>
 801389a:	e001      	b.n	80138a0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801389c:	23ff      	movs	r3, #255	@ 0xff
 801389e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	799b      	ldrb	r3, [r3, #6]
 80138a4:	2bff      	cmp	r3, #255	@ 0xff
 80138a6:	d005      	beq.n	80138b4 <dhcp_select+0x184>
    dhcp->tries++;
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	799b      	ldrb	r3, [r3, #6]
 80138ac:	3301      	adds	r3, #1
 80138ae:	b2da      	uxtb	r2, r3
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	799b      	ldrb	r3, [r3, #6]
 80138b8:	2b05      	cmp	r3, #5
 80138ba:	d80d      	bhi.n	80138d8 <dhcp_select+0x1a8>
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	799b      	ldrb	r3, [r3, #6]
 80138c0:	461a      	mov	r2, r3
 80138c2:	2301      	movs	r3, #1
 80138c4:	4093      	lsls	r3, r2
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	461a      	mov	r2, r3
 80138ca:	0152      	lsls	r2, r2, #5
 80138cc:	1ad2      	subs	r2, r2, r3
 80138ce:	0092      	lsls	r2, r2, #2
 80138d0:	4413      	add	r3, r2
 80138d2:	00db      	lsls	r3, r3, #3
 80138d4:	b29b      	uxth	r3, r3
 80138d6:	e001      	b.n	80138dc <dhcp_select+0x1ac>
 80138d8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80138dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80138de:	89fb      	ldrh	r3, [r7, #14]
 80138e0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80138e4:	4a0f      	ldr	r2, [pc, #60]	@ (8013924 <dhcp_select+0x1f4>)
 80138e6:	fb82 1203 	smull	r1, r2, r2, r3
 80138ea:	1152      	asrs	r2, r2, #5
 80138ec:	17db      	asrs	r3, r3, #31
 80138ee:	1ad3      	subs	r3, r2, r3
 80138f0:	b29a      	uxth	r2, r3
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80138f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3720      	adds	r7, #32
 80138fe:	46bd      	mov	sp, r7
 8013900:	bdb0      	pop	{r4, r5, r7, pc}
 8013902:	bf00      	nop
 8013904:	0801b218 	.word	0x0801b218
 8013908:	0801b2c4 	.word	0x0801b2c4
 801390c:	0801b278 	.word	0x0801b278
 8013910:	0801b2e0 	.word	0x0801b2e0
 8013914:	20000030 	.word	0x20000030
 8013918:	2001dd7c 	.word	0x2001dd7c
 801391c:	0801c400 	.word	0x0801c400
 8013920:	0801c404 	.word	0x0801c404
 8013924:	10624dd3 	.word	0x10624dd3

08013928 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801392e:	4b27      	ldr	r3, [pc, #156]	@ (80139cc <dhcp_coarse_tmr+0xa4>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	607b      	str	r3, [r7, #4]
 8013934:	e042      	b.n	80139bc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801393a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d039      	beq.n	80139b6 <dhcp_coarse_tmr+0x8e>
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	795b      	ldrb	r3, [r3, #5]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d035      	beq.n	80139b6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	8a9b      	ldrh	r3, [r3, #20]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d012      	beq.n	8013978 <dhcp_coarse_tmr+0x50>
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	8a5b      	ldrh	r3, [r3, #18]
 8013956:	3301      	adds	r3, #1
 8013958:	b29a      	uxth	r2, r3
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	825a      	strh	r2, [r3, #18]
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	8a5a      	ldrh	r2, [r3, #18]
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	8a9b      	ldrh	r3, [r3, #20]
 8013966:	429a      	cmp	r2, r3
 8013968:	d106      	bne.n	8013978 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 fe2e 	bl	80145cc <dhcp_release_and_stop>
        dhcp_start(netif);
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f000 f96b 	bl	8013c4c <dhcp_start>
 8013976:	e01e      	b.n	80139b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	8a1b      	ldrh	r3, [r3, #16]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <dhcp_coarse_tmr+0x70>
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	8a1b      	ldrh	r3, [r3, #16]
 8013984:	1e5a      	subs	r2, r3, #1
 8013986:	b291      	uxth	r1, r2
 8013988:	683a      	ldr	r2, [r7, #0]
 801398a:	8211      	strh	r1, [r2, #16]
 801398c:	2b01      	cmp	r3, #1
 801398e:	d103      	bne.n	8013998 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f8c7 	bl	8013b24 <dhcp_t2_timeout>
 8013996:	e00e      	b.n	80139b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	89db      	ldrh	r3, [r3, #14]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00a      	beq.n	80139b6 <dhcp_coarse_tmr+0x8e>
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	89db      	ldrh	r3, [r3, #14]
 80139a4:	1e5a      	subs	r2, r3, #1
 80139a6:	b291      	uxth	r1, r2
 80139a8:	683a      	ldr	r2, [r7, #0]
 80139aa:	81d1      	strh	r1, [r2, #14]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d102      	bne.n	80139b6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 f888 	bl	8013ac6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	607b      	str	r3, [r7, #4]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1b9      	bne.n	8013936 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80139c2:	bf00      	nop
 80139c4:	bf00      	nop
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	2001dce8 	.word	0x2001dce8

080139d0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80139d6:	4b16      	ldr	r3, [pc, #88]	@ (8013a30 <dhcp_fine_tmr+0x60>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	607b      	str	r3, [r7, #4]
 80139dc:	e020      	b.n	8013a20 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139e2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d017      	beq.n	8013a1a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	891b      	ldrh	r3, [r3, #8]
 80139ee:	2b01      	cmp	r3, #1
 80139f0:	d906      	bls.n	8013a00 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	891b      	ldrh	r3, [r3, #8]
 80139f6:	3b01      	subs	r3, #1
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	811a      	strh	r2, [r3, #8]
 80139fe:	e00c      	b.n	8013a1a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	891b      	ldrh	r3, [r3, #8]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d108      	bne.n	8013a1a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	891b      	ldrh	r3, [r3, #8]
 8013a0c:	3b01      	subs	r3, #1
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 f80d 	bl	8013a34 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	607b      	str	r3, [r7, #4]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1db      	bne.n	80139de <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013a26:	bf00      	nop
 8013a28:	bf00      	nop
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	2001dce8 	.word	0x2001dce8

08013a34 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b084      	sub	sp, #16
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a40:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	795b      	ldrb	r3, [r3, #5]
 8013a46:	2b0c      	cmp	r3, #12
 8013a48:	d003      	beq.n	8013a52 <dhcp_timeout+0x1e>
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	795b      	ldrb	r3, [r3, #5]
 8013a4e:	2b06      	cmp	r3, #6
 8013a50:	d103      	bne.n	8013a5a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f000 fa56 	bl	8013f04 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013a58:	e031      	b.n	8013abe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	795b      	ldrb	r3, [r3, #5]
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d10e      	bne.n	8013a80 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	799b      	ldrb	r3, [r3, #6]
 8013a66:	2b05      	cmp	r3, #5
 8013a68:	d803      	bhi.n	8013a72 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f7ff fe60 	bl	8013730 <dhcp_select>
}
 8013a70:	e025      	b.n	8013abe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f000 fdaa 	bl	80145cc <dhcp_release_and_stop>
      dhcp_start(netif);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f8e7 	bl	8013c4c <dhcp_start>
}
 8013a7e:	e01e      	b.n	8013abe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	795b      	ldrb	r3, [r3, #5]
 8013a84:	2b08      	cmp	r3, #8
 8013a86:	d10b      	bne.n	8013aa0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	799b      	ldrb	r3, [r3, #6]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d803      	bhi.n	8013a98 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f7ff fdf3 	bl	801367c <dhcp_check>
}
 8013a96:	e012      	b.n	8013abe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fad5 	bl	8014048 <dhcp_bind>
}
 8013a9e:	e00e      	b.n	8013abe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	795b      	ldrb	r3, [r3, #5]
 8013aa4:	2b03      	cmp	r3, #3
 8013aa6:	d10a      	bne.n	8013abe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	799b      	ldrb	r3, [r3, #6]
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d803      	bhi.n	8013ab8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 fcd7 	bl	8014464 <dhcp_reboot>
}
 8013ab6:	e002      	b.n	8013abe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 fa23 	bl	8013f04 <dhcp_discover>
}
 8013abe:	bf00      	nop
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}

08013ac6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b084      	sub	sp, #16
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ad2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	795b      	ldrb	r3, [r3, #5]
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	d007      	beq.n	8013aec <dhcp_t1_timeout+0x26>
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	795b      	ldrb	r3, [r3, #5]
 8013ae0:	2b0a      	cmp	r3, #10
 8013ae2:	d003      	beq.n	8013aec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ae8:	2b05      	cmp	r3, #5
 8013aea:	d117      	bne.n	8013b1c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f000 fb85 	bl	80141fc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	899b      	ldrh	r3, [r3, #12]
 8013af6:	461a      	mov	r2, r3
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	8a5b      	ldrh	r3, [r3, #18]
 8013afc:	1ad3      	subs	r3, r2, r3
 8013afe:	2b01      	cmp	r3, #1
 8013b00:	dd0c      	ble.n	8013b1c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	899b      	ldrh	r3, [r3, #12]
 8013b06:	461a      	mov	r2, r3
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	8a5b      	ldrh	r3, [r3, #18]
 8013b0c:	1ad3      	subs	r3, r2, r3
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	da00      	bge.n	8013b14 <dhcp_t1_timeout+0x4e>
 8013b12:	3301      	adds	r3, #1
 8013b14:	105b      	asrs	r3, r3, #1
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013b1c:	bf00      	nop
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	795b      	ldrb	r3, [r3, #5]
 8013b36:	2b01      	cmp	r3, #1
 8013b38:	d00b      	beq.n	8013b52 <dhcp_t2_timeout+0x2e>
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	795b      	ldrb	r3, [r3, #5]
 8013b3e:	2b0a      	cmp	r3, #10
 8013b40:	d007      	beq.n	8013b52 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b46:	2b05      	cmp	r3, #5
 8013b48:	d003      	beq.n	8013b52 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	795b      	ldrb	r3, [r3, #5]
 8013b4e:	2b04      	cmp	r3, #4
 8013b50:	d117      	bne.n	8013b82 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fbec 	bl	8014330 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	8a9b      	ldrh	r3, [r3, #20]
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	8a5b      	ldrh	r3, [r3, #18]
 8013b62:	1ad3      	subs	r3, r2, r3
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	dd0c      	ble.n	8013b82 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	8a9b      	ldrh	r3, [r3, #20]
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	8a5b      	ldrh	r3, [r3, #18]
 8013b72:	1ad3      	subs	r3, r2, r3
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	da00      	bge.n	8013b7a <dhcp_t2_timeout+0x56>
 8013b78:	3301      	adds	r3, #1
 8013b7a:	105b      	asrs	r3, r3, #1
 8013b7c:	b29a      	uxth	r2, r3
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013b82:	bf00      	nop
 8013b84:	3710      	adds	r7, #16
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
	...

08013b8c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b9a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013ba8:	4b26      	ldr	r3, [pc, #152]	@ (8013c44 <dhcp_handle_ack+0xb8>)
 8013baa:	78db      	ldrb	r3, [r3, #3]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d003      	beq.n	8013bb8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013bb0:	4b25      	ldr	r3, [pc, #148]	@ (8013c48 <dhcp_handle_ack+0xbc>)
 8013bb2:	68da      	ldr	r2, [r3, #12]
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013bb8:	4b22      	ldr	r3, [pc, #136]	@ (8013c44 <dhcp_handle_ack+0xb8>)
 8013bba:	791b      	ldrb	r3, [r3, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d004      	beq.n	8013bca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013bc0:	4b21      	ldr	r3, [pc, #132]	@ (8013c48 <dhcp_handle_ack+0xbc>)
 8013bc2:	691a      	ldr	r2, [r3, #16]
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bc8:	e004      	b.n	8013bd4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bce:	085a      	lsrs	r2, r3, #1
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8013c44 <dhcp_handle_ack+0xb8>)
 8013bd6:	795b      	ldrb	r3, [r3, #5]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d004      	beq.n	8013be6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8013c48 <dhcp_handle_ack+0xbc>)
 8013bde:	695a      	ldr	r2, [r3, #20]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8013be4:	e007      	b.n	8013bf6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013bea:	4613      	mov	r3, r2
 8013bec:	00db      	lsls	r3, r3, #3
 8013bee:	1a9b      	subs	r3, r3, r2
 8013bf0:	08da      	lsrs	r2, r3, #3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	691a      	ldr	r2, [r3, #16]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013bfe:	4b11      	ldr	r3, [pc, #68]	@ (8013c44 <dhcp_handle_ack+0xb8>)
 8013c00:	799b      	ldrb	r3, [r3, #6]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d00b      	beq.n	8013c1e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013c06:	4b10      	ldr	r3, [pc, #64]	@ (8013c48 <dhcp_handle_ack+0xbc>)
 8013c08:	699b      	ldr	r3, [r3, #24]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7f6 fd16 	bl	800a63c <lwip_htonl>
 8013c10:	4602      	mov	r2, r0
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2201      	movs	r2, #1
 8013c1a:	71da      	strb	r2, [r3, #7]
 8013c1c:	e002      	b.n	8013c24 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2200      	movs	r2, #0
 8013c22:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013c24:	4b07      	ldr	r3, [pc, #28]	@ (8013c44 <dhcp_handle_ack+0xb8>)
 8013c26:	79db      	ldrb	r3, [r3, #7]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d007      	beq.n	8013c3c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013c2c:	4b06      	ldr	r3, [pc, #24]	@ (8013c48 <dhcp_handle_ack+0xbc>)
 8013c2e:	69db      	ldr	r3, [r3, #28]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7f6 fd03 	bl	800a63c <lwip_htonl>
 8013c36:	4602      	mov	r2, r0
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013c3c:	bf00      	nop
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	2001dd74 	.word	0x2001dd74
 8013c48:	2001dd54 	.word	0x2001dd54

08013c4c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d109      	bne.n	8013c6e <dhcp_start+0x22>
 8013c5a:	4b37      	ldr	r3, [pc, #220]	@ (8013d38 <dhcp_start+0xec>)
 8013c5c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8013c60:	4936      	ldr	r1, [pc, #216]	@ (8013d3c <dhcp_start+0xf0>)
 8013c62:	4837      	ldr	r0, [pc, #220]	@ (8013d40 <dhcp_start+0xf4>)
 8013c64:	f004 f800 	bl	8017c68 <iprintf>
 8013c68:	f06f 030f 	mvn.w	r3, #15
 8013c6c:	e060      	b.n	8013d30 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013c74:	f003 0301 	and.w	r3, r3, #1
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d109      	bne.n	8013c90 <dhcp_start+0x44>
 8013c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8013d38 <dhcp_start+0xec>)
 8013c7e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8013c82:	4930      	ldr	r1, [pc, #192]	@ (8013d44 <dhcp_start+0xf8>)
 8013c84:	482e      	ldr	r0, [pc, #184]	@ (8013d40 <dhcp_start+0xf4>)
 8013c86:	f003 ffef 	bl	8017c68 <iprintf>
 8013c8a:	f06f 030f 	mvn.w	r3, #15
 8013c8e:	e04f      	b.n	8013d30 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013c9a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013c9e:	d202      	bcs.n	8013ca6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca4:	e044      	b.n	8013d30 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d10d      	bne.n	8013cc8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013cac:	2034      	movs	r0, #52	@ 0x34
 8013cae:	f7f6 ffd1 	bl	800ac54 <mem_malloc>
 8013cb2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d102      	bne.n	8013cc0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013cba:	f04f 33ff 	mov.w	r3, #4294967295
 8013cbe:	e037      	b.n	8013d30 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8013cc6:	e005      	b.n	8013cd4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	791b      	ldrb	r3, [r3, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d001      	beq.n	8013cd4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013cd0:	f7ff fc90 	bl	80135f4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013cd4:	2234      	movs	r2, #52	@ 0x34
 8013cd6:	2100      	movs	r1, #0
 8013cd8:	68f8      	ldr	r0, [r7, #12]
 8013cda:	f004 f82a 	bl	8017d32 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013cde:	f7ff fc37 	bl	8013550 <dhcp_inc_pcb_refcount>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d002      	beq.n	8013cee <dhcp_start+0xa2>
    return ERR_MEM;
 8013ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cec:	e020      	b.n	8013d30 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013cfa:	f003 0304 	and.w	r3, r3, #4
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d105      	bne.n	8013d0e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013d02:	2102      	movs	r1, #2
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f000 fcfb 	bl	8014700 <dhcp_set_state>
    return ERR_OK;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	e010      	b.n	8013d30 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f000 f8f8 	bl	8013f04 <dhcp_discover>
 8013d14:	4603      	mov	r3, r0
 8013d16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013d18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d005      	beq.n	8013d2c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f000 fc53 	bl	80145cc <dhcp_release_and_stop>
    return ERR_MEM;
 8013d26:	f04f 33ff 	mov.w	r3, #4294967295
 8013d2a:	e001      	b.n	8013d30 <dhcp_start+0xe4>
  }
  return result;
 8013d2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	0801b218 	.word	0x0801b218
 8013d3c:	0801b2fc 	.word	0x0801b2fc
 8013d40:	0801b278 	.word	0x0801b278
 8013d44:	0801b340 	.word	0x0801b340

08013d48 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d54:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d025      	beq.n	8013da8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	795b      	ldrb	r3, [r3, #5]
 8013d60:	2b0a      	cmp	r3, #10
 8013d62:	d008      	beq.n	8013d76 <dhcp_network_changed+0x2e>
 8013d64:	2b0a      	cmp	r3, #10
 8013d66:	dc0d      	bgt.n	8013d84 <dhcp_network_changed+0x3c>
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d01f      	beq.n	8013dac <dhcp_network_changed+0x64>
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	db09      	blt.n	8013d84 <dhcp_network_changed+0x3c>
 8013d70:	3b03      	subs	r3, #3
 8013d72:	2b02      	cmp	r3, #2
 8013d74:	d806      	bhi.n	8013d84 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 fb71 	bl	8014464 <dhcp_reboot>
      break;
 8013d82:	e014      	b.n	8013dae <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	795b      	ldrb	r3, [r3, #5]
 8013d88:	2b0c      	cmp	r3, #12
 8013d8a:	d906      	bls.n	8013d9a <dhcp_network_changed+0x52>
 8013d8c:	4b09      	ldr	r3, [pc, #36]	@ (8013db4 <dhcp_network_changed+0x6c>)
 8013d8e:	f240 326d 	movw	r2, #877	@ 0x36d
 8013d92:	4909      	ldr	r1, [pc, #36]	@ (8013db8 <dhcp_network_changed+0x70>)
 8013d94:	4809      	ldr	r0, [pc, #36]	@ (8013dbc <dhcp_network_changed+0x74>)
 8013d96:	f003 ff67 	bl	8017c68 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f8af 	bl	8013f04 <dhcp_discover>
      break;
 8013da6:	e002      	b.n	8013dae <dhcp_network_changed+0x66>
    return;
 8013da8:	bf00      	nop
 8013daa:	e000      	b.n	8013dae <dhcp_network_changed+0x66>
      break;
 8013dac:	bf00      	nop
  }
}
 8013dae:	3710      	adds	r7, #16
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	0801b218 	.word	0x0801b218
 8013db8:	0801b364 	.word	0x0801b364
 8013dbc:	0801b278 	.word	0x0801b278

08013dc0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d107      	bne.n	8013de0 <dhcp_arp_reply+0x20>
 8013dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8013e0c <dhcp_arp_reply+0x4c>)
 8013dd2:	f240 328b 	movw	r2, #907	@ 0x38b
 8013dd6:	490e      	ldr	r1, [pc, #56]	@ (8013e10 <dhcp_arp_reply+0x50>)
 8013dd8:	480e      	ldr	r0, [pc, #56]	@ (8013e14 <dhcp_arp_reply+0x54>)
 8013dda:	f003 ff45 	bl	8017c68 <iprintf>
 8013dde:	e012      	b.n	8013e06 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013de4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d00c      	beq.n	8013e06 <dhcp_arp_reply+0x46>
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	795b      	ldrb	r3, [r3, #5]
 8013df0:	2b08      	cmp	r3, #8
 8013df2:	d108      	bne.n	8013e06 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	69db      	ldr	r3, [r3, #28]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d102      	bne.n	8013e06 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 f809 	bl	8013e18 <dhcp_decline>
    }
  }
}
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	0801b218 	.word	0x0801b218
 8013e10:	0801b2fc 	.word	0x0801b2fc
 8013e14:	0801b278 	.word	0x0801b278

08013e18 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013e18:	b5b0      	push	{r4, r5, r7, lr}
 8013e1a:	b08a      	sub	sp, #40	@ 0x28
 8013e1c:	af02      	add	r7, sp, #8
 8013e1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e24:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013e26:	210c      	movs	r1, #12
 8013e28:	69b8      	ldr	r0, [r7, #24]
 8013e2a:	f000 fc69 	bl	8014700 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013e2e:	f107 030c 	add.w	r3, r7, #12
 8013e32:	2204      	movs	r2, #4
 8013e34:	69b9      	ldr	r1, [r7, #24]
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f001 f8ee 	bl	8015018 <dhcp_create_msg>
 8013e3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d035      	beq.n	8013eb0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013e4a:	89b8      	ldrh	r0, [r7, #12]
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013e52:	2304      	movs	r3, #4
 8013e54:	2232      	movs	r2, #50	@ 0x32
 8013e56:	f000 fc6d 	bl	8014734 <dhcp_option>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013e5e:	89bc      	ldrh	r4, [r7, #12]
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	69db      	ldr	r3, [r3, #28]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7f6 fbe6 	bl	800a63c <lwip_htonl>
 8013e70:	4603      	mov	r3, r0
 8013e72:	461a      	mov	r2, r3
 8013e74:	4629      	mov	r1, r5
 8013e76:	4620      	mov	r0, r4
 8013e78:	f000 fce8 	bl	801484c <dhcp_option_long>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013e80:	89b8      	ldrh	r0, [r7, #12]
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	33f0      	adds	r3, #240	@ 0xf0
 8013e86:	697a      	ldr	r2, [r7, #20]
 8013e88:	4619      	mov	r1, r3
 8013e8a:	f001 f99b 	bl	80151c4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013e8e:	4b19      	ldr	r3, [pc, #100]	@ (8013ef4 <dhcp_decline+0xdc>)
 8013e90:	6818      	ldr	r0, [r3, #0]
 8013e92:	4b19      	ldr	r3, [pc, #100]	@ (8013ef8 <dhcp_decline+0xe0>)
 8013e94:	9301      	str	r3, [sp, #4]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	9300      	str	r3, [sp, #0]
 8013e9a:	2343      	movs	r3, #67	@ 0x43
 8013e9c:	4a17      	ldr	r2, [pc, #92]	@ (8013efc <dhcp_decline+0xe4>)
 8013e9e:	6979      	ldr	r1, [r7, #20]
 8013ea0:	f7ff f8d0 	bl	8013044 <udp_sendto_if_src>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013ea8:	6978      	ldr	r0, [r7, #20]
 8013eaa:	f7f8 f863 	bl	800bf74 <pbuf_free>
 8013eae:	e001      	b.n	8013eb4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013eb0:	23ff      	movs	r3, #255	@ 0xff
 8013eb2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	799b      	ldrb	r3, [r3, #6]
 8013eb8:	2bff      	cmp	r3, #255	@ 0xff
 8013eba:	d005      	beq.n	8013ec8 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	799b      	ldrb	r3, [r3, #6]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	b2da      	uxtb	r2, r3
 8013ec4:	69bb      	ldr	r3, [r7, #24]
 8013ec6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013ec8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013ecc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013ece:	89fb      	ldrh	r3, [r7, #14]
 8013ed0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8013f00 <dhcp_decline+0xe8>)
 8013ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8013eda:	1152      	asrs	r2, r2, #5
 8013edc:	17db      	asrs	r3, r3, #31
 8013ede:	1ad3      	subs	r3, r2, r3
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3720      	adds	r7, #32
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	2001dd7c 	.word	0x2001dd7c
 8013ef8:	0801c400 	.word	0x0801c400
 8013efc:	0801c404 	.word	0x0801c404
 8013f00:	10624dd3 	.word	0x10624dd3

08013f04 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b08a      	sub	sp, #40	@ 0x28
 8013f08:	af02      	add	r7, sp, #8
 8013f0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f10:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013f12:	2300      	movs	r3, #0
 8013f14:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013f1c:	2106      	movs	r1, #6
 8013f1e:	69b8      	ldr	r0, [r7, #24]
 8013f20:	f000 fbee 	bl	8014700 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013f24:	f107 0308 	add.w	r3, r7, #8
 8013f28:	2201      	movs	r2, #1
 8013f2a:	69b9      	ldr	r1, [r7, #24]
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f001 f873 	bl	8015018 <dhcp_create_msg>
 8013f32:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d04b      	beq.n	8013fd2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	685b      	ldr	r3, [r3, #4]
 8013f3e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013f40:	8938      	ldrh	r0, [r7, #8]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f48:	2302      	movs	r3, #2
 8013f4a:	2239      	movs	r2, #57	@ 0x39
 8013f4c:	f000 fbf2 	bl	8014734 <dhcp_option>
 8013f50:	4603      	mov	r3, r0
 8013f52:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013f54:	8938      	ldrh	r0, [r7, #8]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013f60:	461a      	mov	r2, r3
 8013f62:	f000 fc41 	bl	80147e8 <dhcp_option_short>
 8013f66:	4603      	mov	r3, r0
 8013f68:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f6a:	8938      	ldrh	r0, [r7, #8]
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f72:	2303      	movs	r3, #3
 8013f74:	2237      	movs	r2, #55	@ 0x37
 8013f76:	f000 fbdd 	bl	8014734 <dhcp_option>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f7e:	2300      	movs	r3, #0
 8013f80:	77fb      	strb	r3, [r7, #31]
 8013f82:	e00e      	b.n	8013fa2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013f84:	8938      	ldrh	r0, [r7, #8]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f8c:	7ffb      	ldrb	r3, [r7, #31]
 8013f8e:	4a29      	ldr	r2, [pc, #164]	@ (8014034 <dhcp_discover+0x130>)
 8013f90:	5cd3      	ldrb	r3, [r2, r3]
 8013f92:	461a      	mov	r2, r3
 8013f94:	f000 fc02 	bl	801479c <dhcp_option_byte>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f9c:	7ffb      	ldrb	r3, [r7, #31]
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	77fb      	strb	r3, [r7, #31]
 8013fa2:	7ffb      	ldrb	r3, [r7, #31]
 8013fa4:	2b02      	cmp	r3, #2
 8013fa6:	d9ed      	bls.n	8013f84 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013fa8:	8938      	ldrh	r0, [r7, #8]
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	33f0      	adds	r3, #240	@ 0xf0
 8013fae:	693a      	ldr	r2, [r7, #16]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	f001 f907 	bl	80151c4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013fb6:	4b20      	ldr	r3, [pc, #128]	@ (8014038 <dhcp_discover+0x134>)
 8013fb8:	6818      	ldr	r0, [r3, #0]
 8013fba:	4b20      	ldr	r3, [pc, #128]	@ (801403c <dhcp_discover+0x138>)
 8013fbc:	9301      	str	r3, [sp, #4]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	9300      	str	r3, [sp, #0]
 8013fc2:	2343      	movs	r3, #67	@ 0x43
 8013fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8014040 <dhcp_discover+0x13c>)
 8013fc6:	6939      	ldr	r1, [r7, #16]
 8013fc8:	f7ff f83c 	bl	8013044 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013fcc:	6938      	ldr	r0, [r7, #16]
 8013fce:	f7f7 ffd1 	bl	800bf74 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013fd2:	69bb      	ldr	r3, [r7, #24]
 8013fd4:	799b      	ldrb	r3, [r3, #6]
 8013fd6:	2bff      	cmp	r3, #255	@ 0xff
 8013fd8:	d005      	beq.n	8013fe6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013fda:	69bb      	ldr	r3, [r7, #24]
 8013fdc:	799b      	ldrb	r3, [r3, #6]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	b2da      	uxtb	r2, r3
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	799b      	ldrb	r3, [r3, #6]
 8013fea:	2b05      	cmp	r3, #5
 8013fec:	d80d      	bhi.n	801400a <dhcp_discover+0x106>
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	799b      	ldrb	r3, [r3, #6]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	4093      	lsls	r3, r2
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	0152      	lsls	r2, r2, #5
 8013ffe:	1ad2      	subs	r2, r2, r3
 8014000:	0092      	lsls	r2, r2, #2
 8014002:	4413      	add	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	b29b      	uxth	r3, r3
 8014008:	e001      	b.n	801400e <dhcp_discover+0x10a>
 801400a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801400e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014010:	897b      	ldrh	r3, [r7, #10]
 8014012:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014016:	4a0b      	ldr	r2, [pc, #44]	@ (8014044 <dhcp_discover+0x140>)
 8014018:	fb82 1203 	smull	r1, r2, r2, r3
 801401c:	1152      	asrs	r2, r2, #5
 801401e:	17db      	asrs	r3, r3, #31
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	b29a      	uxth	r2, r3
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014028:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801402c:	4618      	mov	r0, r3
 801402e:	3720      	adds	r7, #32
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	20000030 	.word	0x20000030
 8014038:	2001dd7c 	.word	0x2001dd7c
 801403c:	0801c400 	.word	0x0801c400
 8014040:	0801c404 	.word	0x0801c404
 8014044:	10624dd3 	.word	0x10624dd3

08014048 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b088      	sub	sp, #32
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d107      	bne.n	8014066 <dhcp_bind+0x1e>
 8014056:	4b64      	ldr	r3, [pc, #400]	@ (80141e8 <dhcp_bind+0x1a0>)
 8014058:	f240 4215 	movw	r2, #1045	@ 0x415
 801405c:	4963      	ldr	r1, [pc, #396]	@ (80141ec <dhcp_bind+0x1a4>)
 801405e:	4864      	ldr	r0, [pc, #400]	@ (80141f0 <dhcp_bind+0x1a8>)
 8014060:	f003 fe02 	bl	8017c68 <iprintf>
 8014064:	e0bc      	b.n	80141e0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801406a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801406c:	69bb      	ldr	r3, [r7, #24]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d107      	bne.n	8014082 <dhcp_bind+0x3a>
 8014072:	4b5d      	ldr	r3, [pc, #372]	@ (80141e8 <dhcp_bind+0x1a0>)
 8014074:	f240 4217 	movw	r2, #1047	@ 0x417
 8014078:	495e      	ldr	r1, [pc, #376]	@ (80141f4 <dhcp_bind+0x1ac>)
 801407a:	485d      	ldr	r0, [pc, #372]	@ (80141f0 <dhcp_bind+0x1a8>)
 801407c:	f003 fdf4 	bl	8017c68 <iprintf>
 8014080:	e0ae      	b.n	80141e0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014082:	69bb      	ldr	r3, [r7, #24]
 8014084:	2200      	movs	r2, #0
 8014086:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014090:	d019      	beq.n	80140c6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014096:	331e      	adds	r3, #30
 8014098:	4a57      	ldr	r2, [pc, #348]	@ (80141f8 <dhcp_bind+0x1b0>)
 801409a:	fba2 2303 	umull	r2, r3, r2, r3
 801409e:	095b      	lsrs	r3, r3, #5
 80140a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140a8:	d302      	bcc.n	80140b0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80140aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80140ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80140b0:	69fb      	ldr	r3, [r7, #28]
 80140b2:	b29a      	uxth	r2, r3
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80140b8:	69bb      	ldr	r3, [r7, #24]
 80140ba:	8a9b      	ldrh	r3, [r3, #20]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d102      	bne.n	80140c6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	2201      	movs	r2, #1
 80140c4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80140c6:	69bb      	ldr	r3, [r7, #24]
 80140c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ce:	d01d      	beq.n	801410c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140d4:	331e      	adds	r3, #30
 80140d6:	4a48      	ldr	r2, [pc, #288]	@ (80141f8 <dhcp_bind+0x1b0>)
 80140d8:	fba2 2303 	umull	r2, r3, r2, r3
 80140dc:	095b      	lsrs	r3, r3, #5
 80140de:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140e6:	d302      	bcc.n	80140ee <dhcp_bind+0xa6>
      timeout = 0xffff;
 80140e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80140ec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80140ee:	69fb      	ldr	r3, [r7, #28]
 80140f0:	b29a      	uxth	r2, r3
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	895b      	ldrh	r3, [r3, #10]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d102      	bne.n	8014104 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	2201      	movs	r2, #1
 8014102:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	895a      	ldrh	r2, [r3, #10]
 8014108:	69bb      	ldr	r3, [r7, #24]
 801410a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014114:	d01d      	beq.n	8014152 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801411a:	331e      	adds	r3, #30
 801411c:	4a36      	ldr	r2, [pc, #216]	@ (80141f8 <dhcp_bind+0x1b0>)
 801411e:	fba2 2303 	umull	r2, r3, r2, r3
 8014122:	095b      	lsrs	r3, r3, #5
 8014124:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801412c:	d302      	bcc.n	8014134 <dhcp_bind+0xec>
      timeout = 0xffff;
 801412e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014132:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	b29a      	uxth	r2, r3
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	899b      	ldrh	r3, [r3, #12]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d102      	bne.n	801414a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	2201      	movs	r2, #1
 8014148:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	899a      	ldrh	r2, [r3, #12]
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	895a      	ldrh	r2, [r3, #10]
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	899b      	ldrh	r3, [r3, #12]
 801415a:	429a      	cmp	r2, r3
 801415c:	d306      	bcc.n	801416c <dhcp_bind+0x124>
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	899b      	ldrh	r3, [r3, #12]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d002      	beq.n	801416c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	2200      	movs	r2, #0
 801416a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	79db      	ldrb	r3, [r3, #7]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d003      	beq.n	801417c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	6a1b      	ldr	r3, [r3, #32]
 8014178:	613b      	str	r3, [r7, #16]
 801417a:	e014      	b.n	80141a6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801417c:	69bb      	ldr	r3, [r7, #24]
 801417e:	331c      	adds	r3, #28
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014188:	2b00      	cmp	r3, #0
 801418a:	db02      	blt.n	8014192 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801418c:	23ff      	movs	r3, #255	@ 0xff
 801418e:	613b      	str	r3, [r7, #16]
 8014190:	e009      	b.n	80141a6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014192:	7dfb      	ldrb	r3, [r7, #23]
 8014194:	2bbf      	cmp	r3, #191	@ 0xbf
 8014196:	d903      	bls.n	80141a0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014198:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801419c:	613b      	str	r3, [r7, #16]
 801419e:	e002      	b.n	80141a6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80141a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80141a4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141aa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d108      	bne.n	80141c4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80141b2:	69bb      	ldr	r3, [r7, #24]
 80141b4:	69da      	ldr	r2, [r3, #28]
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	4013      	ands	r3, r2
 80141ba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80141c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80141c4:	210a      	movs	r1, #10
 80141c6:	69b8      	ldr	r0, [r7, #24]
 80141c8:	f000 fa9a 	bl	8014700 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	f103 011c 	add.w	r1, r3, #28
 80141d2:	f107 030c 	add.w	r3, r7, #12
 80141d6:	f107 0210 	add.w	r2, r7, #16
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f7f7 f922 	bl	800b424 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80141e0:	3720      	adds	r7, #32
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
 80141e6:	bf00      	nop
 80141e8:	0801b218 	.word	0x0801b218
 80141ec:	0801b378 	.word	0x0801b378
 80141f0:	0801b278 	.word	0x0801b278
 80141f4:	0801b394 	.word	0x0801b394
 80141f8:	88888889 	.word	0x88888889

080141fc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b08a      	sub	sp, #40	@ 0x28
 8014200:	af02      	add	r7, sp, #8
 8014202:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014208:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801420a:	2105      	movs	r1, #5
 801420c:	69b8      	ldr	r0, [r7, #24]
 801420e:	f000 fa77 	bl	8014700 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014212:	f107 030c 	add.w	r3, r7, #12
 8014216:	2203      	movs	r2, #3
 8014218:	69b9      	ldr	r1, [r7, #24]
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 fefc 	bl	8015018 <dhcp_create_msg>
 8014220:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d04e      	beq.n	80142c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801422e:	89b8      	ldrh	r0, [r7, #12]
 8014230:	693b      	ldr	r3, [r7, #16]
 8014232:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014236:	2302      	movs	r3, #2
 8014238:	2239      	movs	r2, #57	@ 0x39
 801423a:	f000 fa7b 	bl	8014734 <dhcp_option>
 801423e:	4603      	mov	r3, r0
 8014240:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014242:	89b8      	ldrh	r0, [r7, #12]
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801424e:	461a      	mov	r2, r3
 8014250:	f000 faca 	bl	80147e8 <dhcp_option_short>
 8014254:	4603      	mov	r3, r0
 8014256:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014258:	89b8      	ldrh	r0, [r7, #12]
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014260:	2303      	movs	r3, #3
 8014262:	2237      	movs	r2, #55	@ 0x37
 8014264:	f000 fa66 	bl	8014734 <dhcp_option>
 8014268:	4603      	mov	r3, r0
 801426a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801426c:	2300      	movs	r3, #0
 801426e:	77bb      	strb	r3, [r7, #30]
 8014270:	e00e      	b.n	8014290 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014272:	89b8      	ldrh	r0, [r7, #12]
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801427a:	7fbb      	ldrb	r3, [r7, #30]
 801427c:	4a29      	ldr	r2, [pc, #164]	@ (8014324 <dhcp_renew+0x128>)
 801427e:	5cd3      	ldrb	r3, [r2, r3]
 8014280:	461a      	mov	r2, r3
 8014282:	f000 fa8b 	bl	801479c <dhcp_option_byte>
 8014286:	4603      	mov	r3, r0
 8014288:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801428a:	7fbb      	ldrb	r3, [r7, #30]
 801428c:	3301      	adds	r3, #1
 801428e:	77bb      	strb	r3, [r7, #30]
 8014290:	7fbb      	ldrb	r3, [r7, #30]
 8014292:	2b02      	cmp	r3, #2
 8014294:	d9ed      	bls.n	8014272 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014296:	89b8      	ldrh	r0, [r7, #12]
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	33f0      	adds	r3, #240	@ 0xf0
 801429c:	697a      	ldr	r2, [r7, #20]
 801429e:	4619      	mov	r1, r3
 80142a0:	f000 ff90 	bl	80151c4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80142a4:	4b20      	ldr	r3, [pc, #128]	@ (8014328 <dhcp_renew+0x12c>)
 80142a6:	6818      	ldr	r0, [r3, #0]
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	f103 0218 	add.w	r2, r3, #24
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	9300      	str	r3, [sp, #0]
 80142b2:	2343      	movs	r3, #67	@ 0x43
 80142b4:	6979      	ldr	r1, [r7, #20]
 80142b6:	f7fe fe51 	bl	8012f5c <udp_sendto_if>
 80142ba:	4603      	mov	r3, r0
 80142bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80142be:	6978      	ldr	r0, [r7, #20]
 80142c0:	f7f7 fe58 	bl	800bf74 <pbuf_free>
 80142c4:	e001      	b.n	80142ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80142c6:	23ff      	movs	r3, #255	@ 0xff
 80142c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	799b      	ldrb	r3, [r3, #6]
 80142ce:	2bff      	cmp	r3, #255	@ 0xff
 80142d0:	d005      	beq.n	80142de <dhcp_renew+0xe2>
    dhcp->tries++;
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	799b      	ldrb	r3, [r3, #6]
 80142d6:	3301      	adds	r3, #1
 80142d8:	b2da      	uxtb	r2, r3
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	799b      	ldrb	r3, [r3, #6]
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	d809      	bhi.n	80142fa <dhcp_renew+0xfe>
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	799b      	ldrb	r3, [r3, #6]
 80142ea:	461a      	mov	r2, r3
 80142ec:	0152      	lsls	r2, r2, #5
 80142ee:	1ad2      	subs	r2, r2, r3
 80142f0:	0092      	lsls	r2, r2, #2
 80142f2:	4413      	add	r3, r2
 80142f4:	011b      	lsls	r3, r3, #4
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	e001      	b.n	80142fe <dhcp_renew+0x102>
 80142fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80142fe:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014300:	89fb      	ldrh	r3, [r7, #14]
 8014302:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014306:	4a09      	ldr	r2, [pc, #36]	@ (801432c <dhcp_renew+0x130>)
 8014308:	fb82 1203 	smull	r1, r2, r2, r3
 801430c:	1152      	asrs	r2, r2, #5
 801430e:	17db      	asrs	r3, r3, #31
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	b29a      	uxth	r2, r3
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014318:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801431c:	4618      	mov	r0, r3
 801431e:	3720      	adds	r7, #32
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	20000030 	.word	0x20000030
 8014328:	2001dd7c 	.word	0x2001dd7c
 801432c:	10624dd3 	.word	0x10624dd3

08014330 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08a      	sub	sp, #40	@ 0x28
 8014334:	af02      	add	r7, sp, #8
 8014336:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801433c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801433e:	2104      	movs	r1, #4
 8014340:	69b8      	ldr	r0, [r7, #24]
 8014342:	f000 f9dd 	bl	8014700 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014346:	f107 030c 	add.w	r3, r7, #12
 801434a:	2203      	movs	r2, #3
 801434c:	69b9      	ldr	r1, [r7, #24]
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f000 fe62 	bl	8015018 <dhcp_create_msg>
 8014354:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d04c      	beq.n	80143f6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	685b      	ldr	r3, [r3, #4]
 8014360:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014362:	89b8      	ldrh	r0, [r7, #12]
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801436a:	2302      	movs	r3, #2
 801436c:	2239      	movs	r2, #57	@ 0x39
 801436e:	f000 f9e1 	bl	8014734 <dhcp_option>
 8014372:	4603      	mov	r3, r0
 8014374:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014376:	89b8      	ldrh	r0, [r7, #12]
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014382:	461a      	mov	r2, r3
 8014384:	f000 fa30 	bl	80147e8 <dhcp_option_short>
 8014388:	4603      	mov	r3, r0
 801438a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801438c:	89b8      	ldrh	r0, [r7, #12]
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014394:	2303      	movs	r3, #3
 8014396:	2237      	movs	r2, #55	@ 0x37
 8014398:	f000 f9cc 	bl	8014734 <dhcp_option>
 801439c:	4603      	mov	r3, r0
 801439e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143a0:	2300      	movs	r3, #0
 80143a2:	77bb      	strb	r3, [r7, #30]
 80143a4:	e00e      	b.n	80143c4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80143a6:	89b8      	ldrh	r0, [r7, #12]
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80143ae:	7fbb      	ldrb	r3, [r7, #30]
 80143b0:	4a28      	ldr	r2, [pc, #160]	@ (8014454 <dhcp_rebind+0x124>)
 80143b2:	5cd3      	ldrb	r3, [r2, r3]
 80143b4:	461a      	mov	r2, r3
 80143b6:	f000 f9f1 	bl	801479c <dhcp_option_byte>
 80143ba:	4603      	mov	r3, r0
 80143bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143be:	7fbb      	ldrb	r3, [r7, #30]
 80143c0:	3301      	adds	r3, #1
 80143c2:	77bb      	strb	r3, [r7, #30]
 80143c4:	7fbb      	ldrb	r3, [r7, #30]
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	d9ed      	bls.n	80143a6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80143ca:	89b8      	ldrh	r0, [r7, #12]
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	33f0      	adds	r3, #240	@ 0xf0
 80143d0:	697a      	ldr	r2, [r7, #20]
 80143d2:	4619      	mov	r1, r3
 80143d4:	f000 fef6 	bl	80151c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80143d8:	4b1f      	ldr	r3, [pc, #124]	@ (8014458 <dhcp_rebind+0x128>)
 80143da:	6818      	ldr	r0, [r3, #0]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	9300      	str	r3, [sp, #0]
 80143e0:	2343      	movs	r3, #67	@ 0x43
 80143e2:	4a1e      	ldr	r2, [pc, #120]	@ (801445c <dhcp_rebind+0x12c>)
 80143e4:	6979      	ldr	r1, [r7, #20]
 80143e6:	f7fe fdb9 	bl	8012f5c <udp_sendto_if>
 80143ea:	4603      	mov	r3, r0
 80143ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80143ee:	6978      	ldr	r0, [r7, #20]
 80143f0:	f7f7 fdc0 	bl	800bf74 <pbuf_free>
 80143f4:	e001      	b.n	80143fa <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80143f6:	23ff      	movs	r3, #255	@ 0xff
 80143f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80143fa:	69bb      	ldr	r3, [r7, #24]
 80143fc:	799b      	ldrb	r3, [r3, #6]
 80143fe:	2bff      	cmp	r3, #255	@ 0xff
 8014400:	d005      	beq.n	801440e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	799b      	ldrb	r3, [r3, #6]
 8014406:	3301      	adds	r3, #1
 8014408:	b2da      	uxtb	r2, r3
 801440a:	69bb      	ldr	r3, [r7, #24]
 801440c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	799b      	ldrb	r3, [r3, #6]
 8014412:	2b09      	cmp	r3, #9
 8014414:	d809      	bhi.n	801442a <dhcp_rebind+0xfa>
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	799b      	ldrb	r3, [r3, #6]
 801441a:	461a      	mov	r2, r3
 801441c:	0152      	lsls	r2, r2, #5
 801441e:	1ad2      	subs	r2, r2, r3
 8014420:	0092      	lsls	r2, r2, #2
 8014422:	4413      	add	r3, r2
 8014424:	00db      	lsls	r3, r3, #3
 8014426:	b29b      	uxth	r3, r3
 8014428:	e001      	b.n	801442e <dhcp_rebind+0xfe>
 801442a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801442e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014430:	89fb      	ldrh	r3, [r7, #14]
 8014432:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014436:	4a0a      	ldr	r2, [pc, #40]	@ (8014460 <dhcp_rebind+0x130>)
 8014438:	fb82 1203 	smull	r1, r2, r2, r3
 801443c:	1152      	asrs	r2, r2, #5
 801443e:	17db      	asrs	r3, r3, #31
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	b29a      	uxth	r2, r3
 8014444:	69bb      	ldr	r3, [r7, #24]
 8014446:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014448:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801444c:	4618      	mov	r0, r3
 801444e:	3720      	adds	r7, #32
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}
 8014454:	20000030 	.word	0x20000030
 8014458:	2001dd7c 	.word	0x2001dd7c
 801445c:	0801c404 	.word	0x0801c404
 8014460:	10624dd3 	.word	0x10624dd3

08014464 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014464:	b5b0      	push	{r4, r5, r7, lr}
 8014466:	b08a      	sub	sp, #40	@ 0x28
 8014468:	af02      	add	r7, sp, #8
 801446a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014470:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014472:	2103      	movs	r1, #3
 8014474:	69b8      	ldr	r0, [r7, #24]
 8014476:	f000 f943 	bl	8014700 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801447a:	f107 030c 	add.w	r3, r7, #12
 801447e:	2203      	movs	r2, #3
 8014480:	69b9      	ldr	r1, [r7, #24]
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f000 fdc8 	bl	8015018 <dhcp_create_msg>
 8014488:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d066      	beq.n	801455e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014496:	89b8      	ldrh	r0, [r7, #12]
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801449e:	2302      	movs	r3, #2
 80144a0:	2239      	movs	r2, #57	@ 0x39
 80144a2:	f000 f947 	bl	8014734 <dhcp_option>
 80144a6:	4603      	mov	r3, r0
 80144a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80144aa:	89b8      	ldrh	r0, [r7, #12]
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	33f0      	adds	r3, #240	@ 0xf0
 80144b0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80144b4:	4619      	mov	r1, r3
 80144b6:	f000 f997 	bl	80147e8 <dhcp_option_short>
 80144ba:	4603      	mov	r3, r0
 80144bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80144be:	89b8      	ldrh	r0, [r7, #12]
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80144c6:	2304      	movs	r3, #4
 80144c8:	2232      	movs	r2, #50	@ 0x32
 80144ca:	f000 f933 	bl	8014734 <dhcp_option>
 80144ce:	4603      	mov	r3, r0
 80144d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80144d2:	89bc      	ldrh	r4, [r7, #12]
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	69db      	ldr	r3, [r3, #28]
 80144de:	4618      	mov	r0, r3
 80144e0:	f7f6 f8ac 	bl	800a63c <lwip_htonl>
 80144e4:	4603      	mov	r3, r0
 80144e6:	461a      	mov	r2, r3
 80144e8:	4629      	mov	r1, r5
 80144ea:	4620      	mov	r0, r4
 80144ec:	f000 f9ae 	bl	801484c <dhcp_option_long>
 80144f0:	4603      	mov	r3, r0
 80144f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80144f4:	89b8      	ldrh	r0, [r7, #12]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80144fc:	2303      	movs	r3, #3
 80144fe:	2237      	movs	r2, #55	@ 0x37
 8014500:	f000 f918 	bl	8014734 <dhcp_option>
 8014504:	4603      	mov	r3, r0
 8014506:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014508:	2300      	movs	r3, #0
 801450a:	77bb      	strb	r3, [r7, #30]
 801450c:	e00e      	b.n	801452c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801450e:	89b8      	ldrh	r0, [r7, #12]
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014516:	7fbb      	ldrb	r3, [r7, #30]
 8014518:	4a28      	ldr	r2, [pc, #160]	@ (80145bc <dhcp_reboot+0x158>)
 801451a:	5cd3      	ldrb	r3, [r2, r3]
 801451c:	461a      	mov	r2, r3
 801451e:	f000 f93d 	bl	801479c <dhcp_option_byte>
 8014522:	4603      	mov	r3, r0
 8014524:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014526:	7fbb      	ldrb	r3, [r7, #30]
 8014528:	3301      	adds	r3, #1
 801452a:	77bb      	strb	r3, [r7, #30]
 801452c:	7fbb      	ldrb	r3, [r7, #30]
 801452e:	2b02      	cmp	r3, #2
 8014530:	d9ed      	bls.n	801450e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014532:	89b8      	ldrh	r0, [r7, #12]
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	33f0      	adds	r3, #240	@ 0xf0
 8014538:	697a      	ldr	r2, [r7, #20]
 801453a:	4619      	mov	r1, r3
 801453c:	f000 fe42 	bl	80151c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014540:	4b1f      	ldr	r3, [pc, #124]	@ (80145c0 <dhcp_reboot+0x15c>)
 8014542:	6818      	ldr	r0, [r3, #0]
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	9300      	str	r3, [sp, #0]
 8014548:	2343      	movs	r3, #67	@ 0x43
 801454a:	4a1e      	ldr	r2, [pc, #120]	@ (80145c4 <dhcp_reboot+0x160>)
 801454c:	6979      	ldr	r1, [r7, #20]
 801454e:	f7fe fd05 	bl	8012f5c <udp_sendto_if>
 8014552:	4603      	mov	r3, r0
 8014554:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014556:	6978      	ldr	r0, [r7, #20]
 8014558:	f7f7 fd0c 	bl	800bf74 <pbuf_free>
 801455c:	e001      	b.n	8014562 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801455e:	23ff      	movs	r3, #255	@ 0xff
 8014560:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014562:	69bb      	ldr	r3, [r7, #24]
 8014564:	799b      	ldrb	r3, [r3, #6]
 8014566:	2bff      	cmp	r3, #255	@ 0xff
 8014568:	d005      	beq.n	8014576 <dhcp_reboot+0x112>
    dhcp->tries++;
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	799b      	ldrb	r3, [r3, #6]
 801456e:	3301      	adds	r3, #1
 8014570:	b2da      	uxtb	r2, r3
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	799b      	ldrb	r3, [r3, #6]
 801457a:	2b09      	cmp	r3, #9
 801457c:	d809      	bhi.n	8014592 <dhcp_reboot+0x12e>
 801457e:	69bb      	ldr	r3, [r7, #24]
 8014580:	799b      	ldrb	r3, [r3, #6]
 8014582:	461a      	mov	r2, r3
 8014584:	0152      	lsls	r2, r2, #5
 8014586:	1ad2      	subs	r2, r2, r3
 8014588:	0092      	lsls	r2, r2, #2
 801458a:	4413      	add	r3, r2
 801458c:	00db      	lsls	r3, r3, #3
 801458e:	b29b      	uxth	r3, r3
 8014590:	e001      	b.n	8014596 <dhcp_reboot+0x132>
 8014592:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014596:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014598:	89fb      	ldrh	r3, [r7, #14]
 801459a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801459e:	4a0a      	ldr	r2, [pc, #40]	@ (80145c8 <dhcp_reboot+0x164>)
 80145a0:	fb82 1203 	smull	r1, r2, r2, r3
 80145a4:	1152      	asrs	r2, r2, #5
 80145a6:	17db      	asrs	r3, r3, #31
 80145a8:	1ad3      	subs	r3, r2, r3
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80145b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3720      	adds	r7, #32
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bdb0      	pop	{r4, r5, r7, pc}
 80145bc:	20000030 	.word	0x20000030
 80145c0:	2001dd7c 	.word	0x2001dd7c
 80145c4:	0801c404 	.word	0x0801c404
 80145c8:	10624dd3 	.word	0x10624dd3

080145cc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80145cc:	b5b0      	push	{r4, r5, r7, lr}
 80145ce:	b08a      	sub	sp, #40	@ 0x28
 80145d0:	af02      	add	r7, sp, #8
 80145d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	f000 8084 	beq.w	80146ea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80145e2:	69fb      	ldr	r3, [r7, #28]
 80145e4:	795b      	ldrb	r3, [r3, #5]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f000 8081 	beq.w	80146ee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	699b      	ldr	r3, [r3, #24]
 80145f0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	2200      	movs	r2, #0
 80145f6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	2200      	movs	r2, #0
 80145fc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	2200      	movs	r2, #0
 8014602:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014604:	69fb      	ldr	r3, [r7, #28]
 8014606:	2200      	movs	r2, #0
 8014608:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	2200      	movs	r2, #0
 801460e:	631a      	str	r2, [r3, #48]	@ 0x30
 8014610:	69fb      	ldr	r3, [r7, #28]
 8014612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014618:	69fb      	ldr	r3, [r7, #28]
 801461a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	2200      	movs	r2, #0
 8014624:	829a      	strh	r2, [r3, #20]
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	8a9a      	ldrh	r2, [r3, #20]
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	825a      	strh	r2, [r3, #18]
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	8a5a      	ldrh	r2, [r3, #18]
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	821a      	strh	r2, [r3, #16]
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	8a1a      	ldrh	r2, [r3, #16]
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 fdee 	bl	8015220 <dhcp_supplied_address>
 8014644:	4603      	mov	r3, r0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d03b      	beq.n	80146c2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801464a:	f107 030e 	add.w	r3, r7, #14
 801464e:	2207      	movs	r2, #7
 8014650:	69f9      	ldr	r1, [r7, #28]
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f000 fce0 	bl	8015018 <dhcp_create_msg>
 8014658:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d030      	beq.n	80146c2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014660:	69bb      	ldr	r3, [r7, #24]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014666:	89f8      	ldrh	r0, [r7, #14]
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801466e:	2304      	movs	r3, #4
 8014670:	2236      	movs	r2, #54	@ 0x36
 8014672:	f000 f85f 	bl	8014734 <dhcp_option>
 8014676:	4603      	mov	r3, r0
 8014678:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801467a:	89fc      	ldrh	r4, [r7, #14]
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	4618      	mov	r0, r3
 8014686:	f7f5 ffd9 	bl	800a63c <lwip_htonl>
 801468a:	4603      	mov	r3, r0
 801468c:	461a      	mov	r2, r3
 801468e:	4629      	mov	r1, r5
 8014690:	4620      	mov	r0, r4
 8014692:	f000 f8db 	bl	801484c <dhcp_option_long>
 8014696:	4603      	mov	r3, r0
 8014698:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801469a:	89f8      	ldrh	r0, [r7, #14]
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	33f0      	adds	r3, #240	@ 0xf0
 80146a0:	69ba      	ldr	r2, [r7, #24]
 80146a2:	4619      	mov	r1, r3
 80146a4:	f000 fd8e 	bl	80151c4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80146a8:	4b13      	ldr	r3, [pc, #76]	@ (80146f8 <dhcp_release_and_stop+0x12c>)
 80146aa:	6818      	ldr	r0, [r3, #0]
 80146ac:	f107 0210 	add.w	r2, r7, #16
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	2343      	movs	r3, #67	@ 0x43
 80146b6:	69b9      	ldr	r1, [r7, #24]
 80146b8:	f7fe fc50 	bl	8012f5c <udp_sendto_if>
      pbuf_free(p_out);
 80146bc:	69b8      	ldr	r0, [r7, #24]
 80146be:	f7f7 fc59 	bl	800bf74 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80146c2:	4b0e      	ldr	r3, [pc, #56]	@ (80146fc <dhcp_release_and_stop+0x130>)
 80146c4:	4a0d      	ldr	r2, [pc, #52]	@ (80146fc <dhcp_release_and_stop+0x130>)
 80146c6:	490d      	ldr	r1, [pc, #52]	@ (80146fc <dhcp_release_and_stop+0x130>)
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f7f6 feab 	bl	800b424 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80146ce:	2100      	movs	r1, #0
 80146d0:	69f8      	ldr	r0, [r7, #28]
 80146d2:	f000 f815 	bl	8014700 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80146d6:	69fb      	ldr	r3, [r7, #28]
 80146d8:	791b      	ldrb	r3, [r3, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d008      	beq.n	80146f0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80146de:	f7fe ff89 	bl	80135f4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	2200      	movs	r2, #0
 80146e6:	711a      	strb	r2, [r3, #4]
 80146e8:	e002      	b.n	80146f0 <dhcp_release_and_stop+0x124>
    return;
 80146ea:	bf00      	nop
 80146ec:	e000      	b.n	80146f0 <dhcp_release_and_stop+0x124>
    return;
 80146ee:	bf00      	nop
  }
}
 80146f0:	3720      	adds	r7, #32
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bdb0      	pop	{r4, r5, r7, pc}
 80146f6:	bf00      	nop
 80146f8:	2001dd7c 	.word	0x2001dd7c
 80146fc:	0801c400 	.word	0x0801c400

08014700 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	460b      	mov	r3, r1
 801470a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	795b      	ldrb	r3, [r3, #5]
 8014710:	78fa      	ldrb	r2, [r7, #3]
 8014712:	429a      	cmp	r2, r3
 8014714:	d008      	beq.n	8014728 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	78fa      	ldrb	r2, [r7, #3]
 801471a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2200      	movs	r2, #0
 8014720:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2200      	movs	r2, #0
 8014726:	811a      	strh	r2, [r3, #8]
  }
}
 8014728:	bf00      	nop
 801472a:	370c      	adds	r7, #12
 801472c:	46bd      	mov	sp, r7
 801472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014732:	4770      	bx	lr

08014734 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6039      	str	r1, [r7, #0]
 801473c:	4611      	mov	r1, r2
 801473e:	461a      	mov	r2, r3
 8014740:	4603      	mov	r3, r0
 8014742:	80fb      	strh	r3, [r7, #6]
 8014744:	460b      	mov	r3, r1
 8014746:	717b      	strb	r3, [r7, #5]
 8014748:	4613      	mov	r3, r2
 801474a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801474c:	88fa      	ldrh	r2, [r7, #6]
 801474e:	793b      	ldrb	r3, [r7, #4]
 8014750:	4413      	add	r3, r2
 8014752:	3302      	adds	r3, #2
 8014754:	2b44      	cmp	r3, #68	@ 0x44
 8014756:	d906      	bls.n	8014766 <dhcp_option+0x32>
 8014758:	4b0d      	ldr	r3, [pc, #52]	@ (8014790 <dhcp_option+0x5c>)
 801475a:	f240 529a 	movw	r2, #1434	@ 0x59a
 801475e:	490d      	ldr	r1, [pc, #52]	@ (8014794 <dhcp_option+0x60>)
 8014760:	480d      	ldr	r0, [pc, #52]	@ (8014798 <dhcp_option+0x64>)
 8014762:	f003 fa81 	bl	8017c68 <iprintf>
  options[options_out_len++] = option_type;
 8014766:	88fb      	ldrh	r3, [r7, #6]
 8014768:	1c5a      	adds	r2, r3, #1
 801476a:	80fa      	strh	r2, [r7, #6]
 801476c:	461a      	mov	r2, r3
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	4413      	add	r3, r2
 8014772:	797a      	ldrb	r2, [r7, #5]
 8014774:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014776:	88fb      	ldrh	r3, [r7, #6]
 8014778:	1c5a      	adds	r2, r3, #1
 801477a:	80fa      	strh	r2, [r7, #6]
 801477c:	461a      	mov	r2, r3
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	4413      	add	r3, r2
 8014782:	793a      	ldrb	r2, [r7, #4]
 8014784:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014786:	88fb      	ldrh	r3, [r7, #6]
}
 8014788:	4618      	mov	r0, r3
 801478a:	3708      	adds	r7, #8
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}
 8014790:	0801b218 	.word	0x0801b218
 8014794:	0801b3ac 	.word	0x0801b3ac
 8014798:	0801b278 	.word	0x0801b278

0801479c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	4603      	mov	r3, r0
 80147a4:	6039      	str	r1, [r7, #0]
 80147a6:	80fb      	strh	r3, [r7, #6]
 80147a8:	4613      	mov	r3, r2
 80147aa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80147ac:	88fb      	ldrh	r3, [r7, #6]
 80147ae:	2b43      	cmp	r3, #67	@ 0x43
 80147b0:	d906      	bls.n	80147c0 <dhcp_option_byte+0x24>
 80147b2:	4b0a      	ldr	r3, [pc, #40]	@ (80147dc <dhcp_option_byte+0x40>)
 80147b4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80147b8:	4909      	ldr	r1, [pc, #36]	@ (80147e0 <dhcp_option_byte+0x44>)
 80147ba:	480a      	ldr	r0, [pc, #40]	@ (80147e4 <dhcp_option_byte+0x48>)
 80147bc:	f003 fa54 	bl	8017c68 <iprintf>
  options[options_out_len++] = value;
 80147c0:	88fb      	ldrh	r3, [r7, #6]
 80147c2:	1c5a      	adds	r2, r3, #1
 80147c4:	80fa      	strh	r2, [r7, #6]
 80147c6:	461a      	mov	r2, r3
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	4413      	add	r3, r2
 80147cc:	797a      	ldrb	r2, [r7, #5]
 80147ce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80147d0:	88fb      	ldrh	r3, [r7, #6]
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	0801b218 	.word	0x0801b218
 80147e0:	0801b3f0 	.word	0x0801b3f0
 80147e4:	0801b278 	.word	0x0801b278

080147e8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	4603      	mov	r3, r0
 80147f0:	6039      	str	r1, [r7, #0]
 80147f2:	80fb      	strh	r3, [r7, #6]
 80147f4:	4613      	mov	r3, r2
 80147f6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80147f8:	88fb      	ldrh	r3, [r7, #6]
 80147fa:	3302      	adds	r3, #2
 80147fc:	2b44      	cmp	r3, #68	@ 0x44
 80147fe:	d906      	bls.n	801480e <dhcp_option_short+0x26>
 8014800:	4b0f      	ldr	r3, [pc, #60]	@ (8014840 <dhcp_option_short+0x58>)
 8014802:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8014806:	490f      	ldr	r1, [pc, #60]	@ (8014844 <dhcp_option_short+0x5c>)
 8014808:	480f      	ldr	r0, [pc, #60]	@ (8014848 <dhcp_option_short+0x60>)
 801480a:	f003 fa2d 	bl	8017c68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801480e:	88bb      	ldrh	r3, [r7, #4]
 8014810:	0a1b      	lsrs	r3, r3, #8
 8014812:	b29a      	uxth	r2, r3
 8014814:	88fb      	ldrh	r3, [r7, #6]
 8014816:	1c59      	adds	r1, r3, #1
 8014818:	80f9      	strh	r1, [r7, #6]
 801481a:	4619      	mov	r1, r3
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	440b      	add	r3, r1
 8014820:	b2d2      	uxtb	r2, r2
 8014822:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014824:	88fb      	ldrh	r3, [r7, #6]
 8014826:	1c5a      	adds	r2, r3, #1
 8014828:	80fa      	strh	r2, [r7, #6]
 801482a:	461a      	mov	r2, r3
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	4413      	add	r3, r2
 8014830:	88ba      	ldrh	r2, [r7, #4]
 8014832:	b2d2      	uxtb	r2, r2
 8014834:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014836:	88fb      	ldrh	r3, [r7, #6]
}
 8014838:	4618      	mov	r0, r3
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	0801b218 	.word	0x0801b218
 8014844:	0801b428 	.word	0x0801b428
 8014848:	0801b278 	.word	0x0801b278

0801484c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	4603      	mov	r3, r0
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	607a      	str	r2, [r7, #4]
 8014858:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801485a:	89fb      	ldrh	r3, [r7, #14]
 801485c:	3304      	adds	r3, #4
 801485e:	2b44      	cmp	r3, #68	@ 0x44
 8014860:	d906      	bls.n	8014870 <dhcp_option_long+0x24>
 8014862:	4b19      	ldr	r3, [pc, #100]	@ (80148c8 <dhcp_option_long+0x7c>)
 8014864:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8014868:	4918      	ldr	r1, [pc, #96]	@ (80148cc <dhcp_option_long+0x80>)
 801486a:	4819      	ldr	r0, [pc, #100]	@ (80148d0 <dhcp_option_long+0x84>)
 801486c:	f003 f9fc 	bl	8017c68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	0e1a      	lsrs	r2, r3, #24
 8014874:	89fb      	ldrh	r3, [r7, #14]
 8014876:	1c59      	adds	r1, r3, #1
 8014878:	81f9      	strh	r1, [r7, #14]
 801487a:	4619      	mov	r1, r3
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	440b      	add	r3, r1
 8014880:	b2d2      	uxtb	r2, r2
 8014882:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	0c1a      	lsrs	r2, r3, #16
 8014888:	89fb      	ldrh	r3, [r7, #14]
 801488a:	1c59      	adds	r1, r3, #1
 801488c:	81f9      	strh	r1, [r7, #14]
 801488e:	4619      	mov	r1, r3
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	440b      	add	r3, r1
 8014894:	b2d2      	uxtb	r2, r2
 8014896:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	0a1a      	lsrs	r2, r3, #8
 801489c:	89fb      	ldrh	r3, [r7, #14]
 801489e:	1c59      	adds	r1, r3, #1
 80148a0:	81f9      	strh	r1, [r7, #14]
 80148a2:	4619      	mov	r1, r3
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	440b      	add	r3, r1
 80148a8:	b2d2      	uxtb	r2, r2
 80148aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80148ac:	89fb      	ldrh	r3, [r7, #14]
 80148ae:	1c5a      	adds	r2, r3, #1
 80148b0:	81fa      	strh	r2, [r7, #14]
 80148b2:	461a      	mov	r2, r3
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	4413      	add	r3, r2
 80148b8:	687a      	ldr	r2, [r7, #4]
 80148ba:	b2d2      	uxtb	r2, r2
 80148bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80148be:	89fb      	ldrh	r3, [r7, #14]
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3710      	adds	r7, #16
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	0801b218 	.word	0x0801b218
 80148cc:	0801b464 	.word	0x0801b464
 80148d0:	0801b278 	.word	0x0801b278

080148d4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b090      	sub	sp, #64	@ 0x40
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80148de:	2300      	movs	r3, #0
 80148e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80148e6:	2208      	movs	r2, #8
 80148e8:	2100      	movs	r1, #0
 80148ea:	48b5      	ldr	r0, [pc, #724]	@ (8014bc0 <dhcp_parse_reply+0x2ec>)
 80148ec:	f003 fa21 	bl	8017d32 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	895b      	ldrh	r3, [r3, #10]
 80148f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80148f6:	d802      	bhi.n	80148fe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80148f8:	f06f 0301 	mvn.w	r3, #1
 80148fc:	e2a7      	b.n	8014e4e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014904:	23f0      	movs	r3, #240	@ 0xf0
 8014906:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	891b      	ldrh	r3, [r3, #8]
 801490c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014912:	e00c      	b.n	801492e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014916:	895b      	ldrh	r3, [r3, #10]
 8014918:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014920:	895b      	ldrh	r3, [r3, #10]
 8014922:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8014928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014930:	2b00      	cmp	r3, #0
 8014932:	d004      	beq.n	801493e <dhcp_parse_reply+0x6a>
 8014934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014936:	895b      	ldrh	r3, [r3, #10]
 8014938:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801493a:	429a      	cmp	r2, r3
 801493c:	d2ea      	bcs.n	8014914 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014940:	2b00      	cmp	r3, #0
 8014942:	d102      	bne.n	801494a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014944:	f06f 0301 	mvn.w	r3, #1
 8014948:	e281      	b.n	8014e4e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801494a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801494c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801494e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014950:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8014952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014958:	e239      	b.n	8014dce <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801495a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801495c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801495e:	4413      	add	r3, r2
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014964:	2300      	movs	r3, #0
 8014966:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801496a:	f04f 33ff 	mov.w	r3, #4294967295
 801496e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014970:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014972:	3302      	adds	r3, #2
 8014974:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014976:	8bfa      	ldrh	r2, [r7, #30]
 8014978:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801497a:	429a      	cmp	r2, r3
 801497c:	d202      	bcs.n	8014984 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801497e:	f06f 0301 	mvn.w	r3, #1
 8014982:	e264      	b.n	8014e4e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014984:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014986:	3301      	adds	r3, #1
 8014988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801498a:	8952      	ldrh	r2, [r2, #10]
 801498c:	4293      	cmp	r3, r2
 801498e:	da07      	bge.n	80149a0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014990:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014992:	3301      	adds	r3, #1
 8014994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014996:	4413      	add	r3, r2
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801499e:	e00b      	b.n	80149b8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80149a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d004      	beq.n	80149b2 <dhcp_parse_reply+0xde>
 80149a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	e000      	b.n	80149b4 <dhcp_parse_reply+0xe0>
 80149b2:	2300      	movs	r3, #0
 80149b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80149b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80149c0:	7dfb      	ldrb	r3, [r7, #23]
 80149c2:	2b3b      	cmp	r3, #59	@ 0x3b
 80149c4:	f200 812c 	bhi.w	8014c20 <dhcp_parse_reply+0x34c>
 80149c8:	a201      	add	r2, pc, #4	@ (adr r2, 80149d0 <dhcp_parse_reply+0xfc>)
 80149ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ce:	bf00      	nop
 80149d0:	08014ac1 	.word	0x08014ac1
 80149d4:	08014ad1 	.word	0x08014ad1
 80149d8:	08014c21 	.word	0x08014c21
 80149dc:	08014af3 	.word	0x08014af3
 80149e0:	08014c21 	.word	0x08014c21
 80149e4:	08014c21 	.word	0x08014c21
 80149e8:	08014c21 	.word	0x08014c21
 80149ec:	08014c21 	.word	0x08014c21
 80149f0:	08014c21 	.word	0x08014c21
 80149f4:	08014c21 	.word	0x08014c21
 80149f8:	08014c21 	.word	0x08014c21
 80149fc:	08014c21 	.word	0x08014c21
 8014a00:	08014c21 	.word	0x08014c21
 8014a04:	08014c21 	.word	0x08014c21
 8014a08:	08014c21 	.word	0x08014c21
 8014a0c:	08014c21 	.word	0x08014c21
 8014a10:	08014c21 	.word	0x08014c21
 8014a14:	08014c21 	.word	0x08014c21
 8014a18:	08014c21 	.word	0x08014c21
 8014a1c:	08014c21 	.word	0x08014c21
 8014a20:	08014c21 	.word	0x08014c21
 8014a24:	08014c21 	.word	0x08014c21
 8014a28:	08014c21 	.word	0x08014c21
 8014a2c:	08014c21 	.word	0x08014c21
 8014a30:	08014c21 	.word	0x08014c21
 8014a34:	08014c21 	.word	0x08014c21
 8014a38:	08014c21 	.word	0x08014c21
 8014a3c:	08014c21 	.word	0x08014c21
 8014a40:	08014c21 	.word	0x08014c21
 8014a44:	08014c21 	.word	0x08014c21
 8014a48:	08014c21 	.word	0x08014c21
 8014a4c:	08014c21 	.word	0x08014c21
 8014a50:	08014c21 	.word	0x08014c21
 8014a54:	08014c21 	.word	0x08014c21
 8014a58:	08014c21 	.word	0x08014c21
 8014a5c:	08014c21 	.word	0x08014c21
 8014a60:	08014c21 	.word	0x08014c21
 8014a64:	08014c21 	.word	0x08014c21
 8014a68:	08014c21 	.word	0x08014c21
 8014a6c:	08014c21 	.word	0x08014c21
 8014a70:	08014c21 	.word	0x08014c21
 8014a74:	08014c21 	.word	0x08014c21
 8014a78:	08014c21 	.word	0x08014c21
 8014a7c:	08014c21 	.word	0x08014c21
 8014a80:	08014c21 	.word	0x08014c21
 8014a84:	08014c21 	.word	0x08014c21
 8014a88:	08014c21 	.word	0x08014c21
 8014a8c:	08014c21 	.word	0x08014c21
 8014a90:	08014c21 	.word	0x08014c21
 8014a94:	08014c21 	.word	0x08014c21
 8014a98:	08014c21 	.word	0x08014c21
 8014a9c:	08014b1f 	.word	0x08014b1f
 8014aa0:	08014b41 	.word	0x08014b41
 8014aa4:	08014b7d 	.word	0x08014b7d
 8014aa8:	08014b9f 	.word	0x08014b9f
 8014aac:	08014c21 	.word	0x08014c21
 8014ab0:	08014c21 	.word	0x08014c21
 8014ab4:	08014c21 	.word	0x08014c21
 8014ab8:	08014bdd 	.word	0x08014bdd
 8014abc:	08014bff 	.word	0x08014bff
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014aca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8014ace:	e0ab      	b.n	8014c28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ad4:	2b04      	cmp	r3, #4
 8014ad6:	d009      	beq.n	8014aec <dhcp_parse_reply+0x218>
 8014ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014ada:	f240 622e 	movw	r2, #1582	@ 0x62e
 8014ade:	493a      	ldr	r1, [pc, #232]	@ (8014bc8 <dhcp_parse_reply+0x2f4>)
 8014ae0:	483a      	ldr	r0, [pc, #232]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014ae2:	f003 f8c1 	bl	8017c68 <iprintf>
 8014ae6:	f06f 0305 	mvn.w	r3, #5
 8014aea:	e1b0      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014aec:	2306      	movs	r3, #6
 8014aee:	623b      	str	r3, [r7, #32]
        break;
 8014af0:	e09a      	b.n	8014c28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014af2:	2304      	movs	r3, #4
 8014af4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014af8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014afc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d209      	bcs.n	8014b18 <dhcp_parse_reply+0x244>
 8014b04:	4b2f      	ldr	r3, [pc, #188]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014b06:	f240 6233 	movw	r2, #1587	@ 0x633
 8014b0a:	4931      	ldr	r1, [pc, #196]	@ (8014bd0 <dhcp_parse_reply+0x2fc>)
 8014b0c:	482f      	ldr	r0, [pc, #188]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014b0e:	f003 f8ab 	bl	8017c68 <iprintf>
 8014b12:	f06f 0305 	mvn.w	r3, #5
 8014b16:	e19a      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014b18:	2307      	movs	r3, #7
 8014b1a:	623b      	str	r3, [r7, #32]
        break;
 8014b1c:	e084      	b.n	8014c28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b22:	2b04      	cmp	r3, #4
 8014b24:	d009      	beq.n	8014b3a <dhcp_parse_reply+0x266>
 8014b26:	4b27      	ldr	r3, [pc, #156]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014b28:	f240 6241 	movw	r2, #1601	@ 0x641
 8014b2c:	4926      	ldr	r1, [pc, #152]	@ (8014bc8 <dhcp_parse_reply+0x2f4>)
 8014b2e:	4827      	ldr	r0, [pc, #156]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014b30:	f003 f89a 	bl	8017c68 <iprintf>
 8014b34:	f06f 0305 	mvn.w	r3, #5
 8014b38:	e189      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014b3a:	2303      	movs	r3, #3
 8014b3c:	623b      	str	r3, [r7, #32]
        break;
 8014b3e:	e073      	b.n	8014c28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d009      	beq.n	8014b5c <dhcp_parse_reply+0x288>
 8014b48:	4b1e      	ldr	r3, [pc, #120]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014b4a:	f240 624f 	movw	r2, #1615	@ 0x64f
 8014b4e:	4921      	ldr	r1, [pc, #132]	@ (8014bd4 <dhcp_parse_reply+0x300>)
 8014b50:	481e      	ldr	r0, [pc, #120]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014b52:	f003 f889 	bl	8017c68 <iprintf>
 8014b56:	f06f 0305 	mvn.w	r3, #5
 8014b5a:	e178      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014b5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014b5e:	2bf0      	cmp	r3, #240	@ 0xf0
 8014b60:	d009      	beq.n	8014b76 <dhcp_parse_reply+0x2a2>
 8014b62:	4b18      	ldr	r3, [pc, #96]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014b64:	f240 6251 	movw	r2, #1617	@ 0x651
 8014b68:	491b      	ldr	r1, [pc, #108]	@ (8014bd8 <dhcp_parse_reply+0x304>)
 8014b6a:	4818      	ldr	r0, [pc, #96]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014b6c:	f003 f87c 	bl	8017c68 <iprintf>
 8014b70:	f06f 0305 	mvn.w	r3, #5
 8014b74:	e16b      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014b76:	2300      	movs	r3, #0
 8014b78:	623b      	str	r3, [r7, #32]
        break;
 8014b7a:	e055      	b.n	8014c28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d009      	beq.n	8014b98 <dhcp_parse_reply+0x2c4>
 8014b84:	4b0f      	ldr	r3, [pc, #60]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014b86:	f240 6255 	movw	r2, #1621	@ 0x655
 8014b8a:	4912      	ldr	r1, [pc, #72]	@ (8014bd4 <dhcp_parse_reply+0x300>)
 8014b8c:	480f      	ldr	r0, [pc, #60]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014b8e:	f003 f86b 	bl	8017c68 <iprintf>
 8014b92:	f06f 0305 	mvn.w	r3, #5
 8014b96:	e15a      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014b98:	2301      	movs	r3, #1
 8014b9a:	623b      	str	r3, [r7, #32]
        break;
 8014b9c:	e044      	b.n	8014c28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ba2:	2b04      	cmp	r3, #4
 8014ba4:	d009      	beq.n	8014bba <dhcp_parse_reply+0x2e6>
 8014ba6:	4b07      	ldr	r3, [pc, #28]	@ (8014bc4 <dhcp_parse_reply+0x2f0>)
 8014ba8:	f240 6259 	movw	r2, #1625	@ 0x659
 8014bac:	4906      	ldr	r1, [pc, #24]	@ (8014bc8 <dhcp_parse_reply+0x2f4>)
 8014bae:	4807      	ldr	r0, [pc, #28]	@ (8014bcc <dhcp_parse_reply+0x2f8>)
 8014bb0:	f003 f85a 	bl	8017c68 <iprintf>
 8014bb4:	f06f 0305 	mvn.w	r3, #5
 8014bb8:	e149      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014bba:	2302      	movs	r3, #2
 8014bbc:	623b      	str	r3, [r7, #32]
        break;
 8014bbe:	e033      	b.n	8014c28 <dhcp_parse_reply+0x354>
 8014bc0:	2001dd74 	.word	0x2001dd74
 8014bc4:	0801b218 	.word	0x0801b218
 8014bc8:	0801b4a0 	.word	0x0801b4a0
 8014bcc:	0801b278 	.word	0x0801b278
 8014bd0:	0801b4ac 	.word	0x0801b4ac
 8014bd4:	0801b4c0 	.word	0x0801b4c0
 8014bd8:	0801b4cc 	.word	0x0801b4cc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014be0:	2b04      	cmp	r3, #4
 8014be2:	d009      	beq.n	8014bf8 <dhcp_parse_reply+0x324>
 8014be4:	4b9c      	ldr	r3, [pc, #624]	@ (8014e58 <dhcp_parse_reply+0x584>)
 8014be6:	f240 625d 	movw	r2, #1629	@ 0x65d
 8014bea:	499c      	ldr	r1, [pc, #624]	@ (8014e5c <dhcp_parse_reply+0x588>)
 8014bec:	489c      	ldr	r0, [pc, #624]	@ (8014e60 <dhcp_parse_reply+0x58c>)
 8014bee:	f003 f83b 	bl	8017c68 <iprintf>
 8014bf2:	f06f 0305 	mvn.w	r3, #5
 8014bf6:	e12a      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014bf8:	2304      	movs	r3, #4
 8014bfa:	623b      	str	r3, [r7, #32]
        break;
 8014bfc:	e014      	b.n	8014c28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c02:	2b04      	cmp	r3, #4
 8014c04:	d009      	beq.n	8014c1a <dhcp_parse_reply+0x346>
 8014c06:	4b94      	ldr	r3, [pc, #592]	@ (8014e58 <dhcp_parse_reply+0x584>)
 8014c08:	f240 6261 	movw	r2, #1633	@ 0x661
 8014c0c:	4993      	ldr	r1, [pc, #588]	@ (8014e5c <dhcp_parse_reply+0x588>)
 8014c0e:	4894      	ldr	r0, [pc, #592]	@ (8014e60 <dhcp_parse_reply+0x58c>)
 8014c10:	f003 f82a 	bl	8017c68 <iprintf>
 8014c14:	f06f 0305 	mvn.w	r3, #5
 8014c18:	e119      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014c1a:	2305      	movs	r3, #5
 8014c1c:	623b      	str	r3, [r7, #32]
        break;
 8014c1e:	e003      	b.n	8014c28 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014c20:	2300      	movs	r3, #0
 8014c22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014c26:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014c28:	7dfb      	ldrb	r3, [r7, #23]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d103      	bne.n	8014c36 <dhcp_parse_reply+0x362>
      offset++;
 8014c2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014c30:	3301      	adds	r3, #1
 8014c32:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8014c34:	e0a1      	b.n	8014d7a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014c36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c3c:	4413      	add	r3, r2
 8014c3e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8014c42:	4293      	cmp	r3, r2
 8014c44:	dd02      	ble.n	8014c4c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8014c46:	f06f 0301 	mvn.w	r3, #1
 8014c4a:	e100      	b.n	8014e4e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014c54:	4413      	add	r3, r2
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	3302      	adds	r3, #2
 8014c5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8014c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f000 808a 	beq.w	8014d7a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8014c66:	2300      	movs	r3, #0
 8014c68:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014c6a:	6a3b      	ldr	r3, [r7, #32]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	db02      	blt.n	8014c76 <dhcp_parse_reply+0x3a2>
 8014c70:	6a3b      	ldr	r3, [r7, #32]
 8014c72:	2b07      	cmp	r3, #7
 8014c74:	dd06      	ble.n	8014c84 <dhcp_parse_reply+0x3b0>
 8014c76:	4b78      	ldr	r3, [pc, #480]	@ (8014e58 <dhcp_parse_reply+0x584>)
 8014c78:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8014c7c:	4979      	ldr	r1, [pc, #484]	@ (8014e64 <dhcp_parse_reply+0x590>)
 8014c7e:	4878      	ldr	r0, [pc, #480]	@ (8014e60 <dhcp_parse_reply+0x58c>)
 8014c80:	f002 fff2 	bl	8017c68 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014c84:	4a78      	ldr	r2, [pc, #480]	@ (8014e68 <dhcp_parse_reply+0x594>)
 8014c86:	6a3b      	ldr	r3, [r7, #32]
 8014c88:	4413      	add	r3, r2
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d174      	bne.n	8014d7a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8014c90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014c94:	2b04      	cmp	r3, #4
 8014c96:	bf28      	it	cs
 8014c98:	2304      	movcs	r3, #4
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014c9e:	8bfb      	ldrh	r3, [r7, #30]
 8014ca0:	8aba      	ldrh	r2, [r7, #20]
 8014ca2:	f107 0108 	add.w	r1, r7, #8
 8014ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ca8:	f7f7 fb6a 	bl	800c380 <pbuf_copy_partial>
 8014cac:	4603      	mov	r3, r0
 8014cae:	461a      	mov	r2, r3
 8014cb0:	8abb      	ldrh	r3, [r7, #20]
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	d002      	beq.n	8014cbc <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8014cb6:	f06f 0301 	mvn.w	r3, #1
 8014cba:	e0c8      	b.n	8014e4e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8014cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014cc0:	2b04      	cmp	r3, #4
 8014cc2:	d933      	bls.n	8014d2c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014cc8:	f003 0303 	and.w	r3, r3, #3
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d009      	beq.n	8014ce6 <dhcp_parse_reply+0x412>
 8014cd2:	4b61      	ldr	r3, [pc, #388]	@ (8014e58 <dhcp_parse_reply+0x584>)
 8014cd4:	f240 6281 	movw	r2, #1665	@ 0x681
 8014cd8:	4964      	ldr	r1, [pc, #400]	@ (8014e6c <dhcp_parse_reply+0x598>)
 8014cda:	4861      	ldr	r0, [pc, #388]	@ (8014e60 <dhcp_parse_reply+0x58c>)
 8014cdc:	f002 ffc4 	bl	8017c68 <iprintf>
 8014ce0:	f06f 0305 	mvn.w	r3, #5
 8014ce4:	e0b3      	b.n	8014e4e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8014ce6:	4a60      	ldr	r2, [pc, #384]	@ (8014e68 <dhcp_parse_reply+0x594>)
 8014ce8:	6a3b      	ldr	r3, [r7, #32]
 8014cea:	4413      	add	r3, r2
 8014cec:	2201      	movs	r2, #1
 8014cee:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7f5 fca2 	bl	800a63c <lwip_htonl>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	495d      	ldr	r1, [pc, #372]	@ (8014e70 <dhcp_parse_reply+0x59c>)
 8014cfc:	6a3b      	ldr	r3, [r7, #32]
 8014cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014d02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014d06:	3b04      	subs	r3, #4
 8014d08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014d0c:	8bfb      	ldrh	r3, [r7, #30]
 8014d0e:	3304      	adds	r3, #4
 8014d10:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014d12:	8a7a      	ldrh	r2, [r7, #18]
 8014d14:	8bfb      	ldrh	r3, [r7, #30]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d202      	bcs.n	8014d20 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8014d1a:	f06f 0301 	mvn.w	r3, #1
 8014d1e:	e096      	b.n	8014e4e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014d20:	8a7b      	ldrh	r3, [r7, #18]
 8014d22:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014d24:	6a3b      	ldr	r3, [r7, #32]
 8014d26:	3301      	adds	r3, #1
 8014d28:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014d2a:	e79e      	b.n	8014c6a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014d30:	2b04      	cmp	r3, #4
 8014d32:	d106      	bne.n	8014d42 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f5 fc80 	bl	800a63c <lwip_htonl>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	60bb      	str	r3, [r7, #8]
 8014d40:	e011      	b.n	8014d66 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014d42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d009      	beq.n	8014d5e <dhcp_parse_reply+0x48a>
 8014d4a:	4b43      	ldr	r3, [pc, #268]	@ (8014e58 <dhcp_parse_reply+0x584>)
 8014d4c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8014d50:	4948      	ldr	r1, [pc, #288]	@ (8014e74 <dhcp_parse_reply+0x5a0>)
 8014d52:	4843      	ldr	r0, [pc, #268]	@ (8014e60 <dhcp_parse_reply+0x58c>)
 8014d54:	f002 ff88 	bl	8017c68 <iprintf>
 8014d58:	f06f 0305 	mvn.w	r3, #5
 8014d5c:	e077      	b.n	8014e4e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014d5e:	f107 0308 	add.w	r3, r7, #8
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014d66:	4a40      	ldr	r2, [pc, #256]	@ (8014e68 <dhcp_parse_reply+0x594>)
 8014d68:	6a3b      	ldr	r3, [r7, #32]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014d70:	68ba      	ldr	r2, [r7, #8]
 8014d72:	493f      	ldr	r1, [pc, #252]	@ (8014e70 <dhcp_parse_reply+0x59c>)
 8014d74:	6a3b      	ldr	r3, [r7, #32]
 8014d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d7c:	895b      	ldrh	r3, [r3, #10]
 8014d7e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d324      	bcc.n	8014dce <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d86:	895b      	ldrh	r3, [r3, #10]
 8014d88:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d90:	895b      	ldrh	r3, [r3, #10]
 8014d92:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8014d98:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014d9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d213      	bcs.n	8014dc8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8014da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d109      	bne.n	8014dc0 <dhcp_parse_reply+0x4ec>
 8014dac:	4b2a      	ldr	r3, [pc, #168]	@ (8014e58 <dhcp_parse_reply+0x584>)
 8014dae:	f240 629d 	movw	r2, #1693	@ 0x69d
 8014db2:	4931      	ldr	r1, [pc, #196]	@ (8014e78 <dhcp_parse_reply+0x5a4>)
 8014db4:	482a      	ldr	r0, [pc, #168]	@ (8014e60 <dhcp_parse_reply+0x58c>)
 8014db6:	f002 ff57 	bl	8017c68 <iprintf>
 8014dba:	f06f 0305 	mvn.w	r3, #5
 8014dbe:	e046      	b.n	8014e4e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8014dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dc6:	e002      	b.n	8014dce <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014dc8:	f06f 0301 	mvn.w	r3, #1
 8014dcc:	e03f      	b.n	8014e4e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d00a      	beq.n	8014dea <dhcp_parse_reply+0x516>
 8014dd4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014dd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d206      	bcs.n	8014dea <dhcp_parse_reply+0x516>
 8014ddc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014dde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014de0:	4413      	add	r3, r2
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	2bff      	cmp	r3, #255	@ 0xff
 8014de6:	f47f adb8 	bne.w	801495a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014dea:	4b1f      	ldr	r3, [pc, #124]	@ (8014e68 <dhcp_parse_reply+0x594>)
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d018      	beq.n	8014e24 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014df2:	4b1f      	ldr	r3, [pc, #124]	@ (8014e70 <dhcp_parse_reply+0x59c>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014df8:	4b1b      	ldr	r3, [pc, #108]	@ (8014e68 <dhcp_parse_reply+0x594>)
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d102      	bne.n	8014e0a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8014e04:	2301      	movs	r3, #1
 8014e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014e08:	e00c      	b.n	8014e24 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	2b02      	cmp	r3, #2
 8014e0e:	d102      	bne.n	8014e16 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8014e10:	2301      	movs	r3, #1
 8014e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014e14:	e006      	b.n	8014e24 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2b03      	cmp	r3, #3
 8014e1a:	d103      	bne.n	8014e24 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8014e20:	2301      	movs	r3, #1
 8014e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d006      	beq.n	8014e38 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8014e2e:	236c      	movs	r3, #108	@ 0x6c
 8014e30:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014e32:	23ec      	movs	r3, #236	@ 0xec
 8014e34:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014e36:	e56a      	b.n	801490e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d006      	beq.n	8014e4c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8014e42:	232c      	movs	r3, #44	@ 0x2c
 8014e44:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014e46:	236c      	movs	r3, #108	@ 0x6c
 8014e48:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8014e4a:	e560      	b.n	801490e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014e4c:	2300      	movs	r3, #0
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3740      	adds	r7, #64	@ 0x40
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	0801b218 	.word	0x0801b218
 8014e5c:	0801b4a0 	.word	0x0801b4a0
 8014e60:	0801b278 	.word	0x0801b278
 8014e64:	0801b4e4 	.word	0x0801b4e4
 8014e68:	2001dd74 	.word	0x2001dd74
 8014e6c:	0801b4f8 	.word	0x0801b4f8
 8014e70:	2001dd54 	.word	0x2001dd54
 8014e74:	0801b510 	.word	0x0801b510
 8014e78:	0801b524 	.word	0x0801b524

08014e7c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b08a      	sub	sp, #40	@ 0x28
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
 8014e88:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014e8a:	4b60      	ldr	r3, [pc, #384]	@ (801500c <dhcp_recv+0x190>)
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e94:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	685b      	ldr	r3, [r3, #4]
 8014e9a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	f000 809d 	beq.w	8014fde <dhcp_recv+0x162>
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	791b      	ldrb	r3, [r3, #4]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f000 8098 	beq.w	8014fde <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	895b      	ldrh	r3, [r3, #10]
 8014eb2:	2b2b      	cmp	r3, #43	@ 0x2b
 8014eb4:	f240 8095 	bls.w	8014fe2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014eb8:	69bb      	ldr	r3, [r7, #24]
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	2b02      	cmp	r3, #2
 8014ebe:	f040 8092 	bne.w	8014fe6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ec8:	e012      	b.n	8014ef0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ece:	6a3a      	ldr	r2, [r7, #32]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8014ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014eda:	69b9      	ldr	r1, [r7, #24]
 8014edc:	440b      	add	r3, r1
 8014ede:	7f1b      	ldrb	r3, [r3, #28]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	f040 8082 	bne.w	8014fea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014eea:	3301      	adds	r3, #1
 8014eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ef0:	6a3b      	ldr	r3, [r7, #32]
 8014ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d203      	bcs.n	8014f06 <dhcp_recv+0x8a>
 8014efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f02:	2b05      	cmp	r3, #5
 8014f04:	d9e1      	bls.n	8014eca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014f06:	69bb      	ldr	r3, [r7, #24]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7f5 fb96 	bl	800a63c <lwip_htonl>
 8014f10:	4602      	mov	r2, r0
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d169      	bne.n	8014fee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014f1a:	69f9      	ldr	r1, [r7, #28]
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7ff fcd9 	bl	80148d4 <dhcp_parse_reply>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d164      	bne.n	8014ff2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014f28:	4b39      	ldr	r3, [pc, #228]	@ (8015010 <dhcp_recv+0x194>)
 8014f2a:	785b      	ldrb	r3, [r3, #1]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d062      	beq.n	8014ff6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014f36:	4b37      	ldr	r3, [pc, #220]	@ (8015014 <dhcp_recv+0x198>)
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014f3c:	7cfb      	ldrb	r3, [r7, #19]
 8014f3e:	2b05      	cmp	r3, #5
 8014f40:	d12a      	bne.n	8014f98 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	795b      	ldrb	r3, [r3, #5]
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d112      	bne.n	8014f70 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014f4a:	6979      	ldr	r1, [r7, #20]
 8014f4c:	6a38      	ldr	r0, [r7, #32]
 8014f4e:	f7fe fe1d 	bl	8013b8c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014f52:	6a3b      	ldr	r3, [r7, #32]
 8014f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014f58:	f003 0308 	and.w	r3, r3, #8
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d003      	beq.n	8014f68 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014f60:	6a38      	ldr	r0, [r7, #32]
 8014f62:	f7fe fb8b 	bl	801367c <dhcp_check>
 8014f66:	e049      	b.n	8014ffc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014f68:	6a38      	ldr	r0, [r7, #32]
 8014f6a:	f7ff f86d 	bl	8014048 <dhcp_bind>
 8014f6e:	e045      	b.n	8014ffc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	795b      	ldrb	r3, [r3, #5]
 8014f74:	2b03      	cmp	r3, #3
 8014f76:	d007      	beq.n	8014f88 <dhcp_recv+0x10c>
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	795b      	ldrb	r3, [r3, #5]
 8014f7c:	2b04      	cmp	r3, #4
 8014f7e:	d003      	beq.n	8014f88 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014f80:	69fb      	ldr	r3, [r7, #28]
 8014f82:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014f84:	2b05      	cmp	r3, #5
 8014f86:	d139      	bne.n	8014ffc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014f88:	6979      	ldr	r1, [r7, #20]
 8014f8a:	6a38      	ldr	r0, [r7, #32]
 8014f8c:	f7fe fdfe 	bl	8013b8c <dhcp_handle_ack>
      dhcp_bind(netif);
 8014f90:	6a38      	ldr	r0, [r7, #32]
 8014f92:	f7ff f859 	bl	8014048 <dhcp_bind>
 8014f96:	e031      	b.n	8014ffc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014f98:	7cfb      	ldrb	r3, [r7, #19]
 8014f9a:	2b06      	cmp	r3, #6
 8014f9c:	d113      	bne.n	8014fc6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014fa2:	2b03      	cmp	r3, #3
 8014fa4:	d00b      	beq.n	8014fbe <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	795b      	ldrb	r3, [r3, #5]
 8014faa:	2b01      	cmp	r3, #1
 8014fac:	d007      	beq.n	8014fbe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014fb2:	2b04      	cmp	r3, #4
 8014fb4:	d003      	beq.n	8014fbe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	795b      	ldrb	r3, [r3, #5]
 8014fba:	2b05      	cmp	r3, #5
 8014fbc:	d103      	bne.n	8014fc6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014fbe:	6a38      	ldr	r0, [r7, #32]
 8014fc0:	f7fe fb42 	bl	8013648 <dhcp_handle_nak>
 8014fc4:	e01a      	b.n	8014ffc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014fc6:	7cfb      	ldrb	r3, [r7, #19]
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d116      	bne.n	8014ffa <dhcp_recv+0x17e>
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	795b      	ldrb	r3, [r3, #5]
 8014fd0:	2b06      	cmp	r3, #6
 8014fd2:	d112      	bne.n	8014ffa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014fd4:	6979      	ldr	r1, [r7, #20]
 8014fd6:	6a38      	ldr	r0, [r7, #32]
 8014fd8:	f7fe fb84 	bl	80136e4 <dhcp_handle_offer>
 8014fdc:	e00e      	b.n	8014ffc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014fde:	bf00      	nop
 8014fe0:	e00c      	b.n	8014ffc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014fe2:	bf00      	nop
 8014fe4:	e00a      	b.n	8014ffc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014fe6:	bf00      	nop
 8014fe8:	e008      	b.n	8014ffc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014fea:	bf00      	nop
 8014fec:	e006      	b.n	8014ffc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014fee:	bf00      	nop
 8014ff0:	e004      	b.n	8014ffc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014ff2:	bf00      	nop
 8014ff4:	e002      	b.n	8014ffc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014ff6:	bf00      	nop
 8014ff8:	e000      	b.n	8014ffc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014ffa:	bf00      	nop
  pbuf_free(p);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f7f6 ffb9 	bl	800bf74 <pbuf_free>
}
 8015002:	bf00      	nop
 8015004:	3728      	adds	r7, #40	@ 0x28
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop
 801500c:	20010dd0 	.word	0x20010dd0
 8015010:	2001dd74 	.word	0x2001dd74
 8015014:	2001dd54 	.word	0x2001dd54

08015018 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b088      	sub	sp, #32
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	603b      	str	r3, [r7, #0]
 8015024:	4613      	mov	r3, r2
 8015026:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d108      	bne.n	8015040 <dhcp_create_msg+0x28>
 801502e:	4b5f      	ldr	r3, [pc, #380]	@ (80151ac <dhcp_create_msg+0x194>)
 8015030:	f240 7269 	movw	r2, #1897	@ 0x769
 8015034:	495e      	ldr	r1, [pc, #376]	@ (80151b0 <dhcp_create_msg+0x198>)
 8015036:	485f      	ldr	r0, [pc, #380]	@ (80151b4 <dhcp_create_msg+0x19c>)
 8015038:	f002 fe16 	bl	8017c68 <iprintf>
 801503c:	2300      	movs	r3, #0
 801503e:	e0b1      	b.n	80151a4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d108      	bne.n	8015058 <dhcp_create_msg+0x40>
 8015046:	4b59      	ldr	r3, [pc, #356]	@ (80151ac <dhcp_create_msg+0x194>)
 8015048:	f240 726a 	movw	r2, #1898	@ 0x76a
 801504c:	495a      	ldr	r1, [pc, #360]	@ (80151b8 <dhcp_create_msg+0x1a0>)
 801504e:	4859      	ldr	r0, [pc, #356]	@ (80151b4 <dhcp_create_msg+0x19c>)
 8015050:	f002 fe0a 	bl	8017c68 <iprintf>
 8015054:	2300      	movs	r3, #0
 8015056:	e0a5      	b.n	80151a4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015058:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801505c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015060:	2036      	movs	r0, #54	@ 0x36
 8015062:	f7f6 fca5 	bl	800b9b0 <pbuf_alloc>
 8015066:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015068:	69bb      	ldr	r3, [r7, #24]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d101      	bne.n	8015072 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801506e:	2300      	movs	r3, #0
 8015070:	e098      	b.n	80151a4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015072:	69bb      	ldr	r3, [r7, #24]
 8015074:	895b      	ldrh	r3, [r3, #10]
 8015076:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801507a:	d206      	bcs.n	801508a <dhcp_create_msg+0x72>
 801507c:	4b4b      	ldr	r3, [pc, #300]	@ (80151ac <dhcp_create_msg+0x194>)
 801507e:	f240 7271 	movw	r2, #1905	@ 0x771
 8015082:	494e      	ldr	r1, [pc, #312]	@ (80151bc <dhcp_create_msg+0x1a4>)
 8015084:	484b      	ldr	r0, [pc, #300]	@ (80151b4 <dhcp_create_msg+0x19c>)
 8015086:	f002 fdef 	bl	8017c68 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801508a:	79fb      	ldrb	r3, [r7, #7]
 801508c:	2b03      	cmp	r3, #3
 801508e:	d103      	bne.n	8015098 <dhcp_create_msg+0x80>
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	795b      	ldrb	r3, [r3, #5]
 8015094:	2b03      	cmp	r3, #3
 8015096:	d10d      	bne.n	80150b4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015098:	68bb      	ldr	r3, [r7, #8]
 801509a:	799b      	ldrb	r3, [r3, #6]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d105      	bne.n	80150ac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80150a0:	f002 fce2 	bl	8017a68 <rand>
 80150a4:	4603      	mov	r3, r0
 80150a6:	461a      	mov	r2, r3
 80150a8:	4b45      	ldr	r3, [pc, #276]	@ (80151c0 <dhcp_create_msg+0x1a8>)
 80150aa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80150ac:	4b44      	ldr	r3, [pc, #272]	@ (80151c0 <dhcp_create_msg+0x1a8>)
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80150ba:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80150be:	2100      	movs	r1, #0
 80150c0:	6978      	ldr	r0, [r7, #20]
 80150c2:	f002 fe36 	bl	8017d32 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80150c6:	697b      	ldr	r3, [r7, #20]
 80150c8:	2201      	movs	r2, #1
 80150ca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80150cc:	697b      	ldr	r3, [r7, #20]
 80150ce:	2201      	movs	r2, #1
 80150d0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7f5 faab 	bl	800a63c <lwip_htonl>
 80150e6:	4602      	mov	r2, r0
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80150ec:	79fb      	ldrb	r3, [r7, #7]
 80150ee:	2b08      	cmp	r3, #8
 80150f0:	d010      	beq.n	8015114 <dhcp_create_msg+0xfc>
 80150f2:	79fb      	ldrb	r3, [r7, #7]
 80150f4:	2b04      	cmp	r3, #4
 80150f6:	d00d      	beq.n	8015114 <dhcp_create_msg+0xfc>
 80150f8:	79fb      	ldrb	r3, [r7, #7]
 80150fa:	2b07      	cmp	r3, #7
 80150fc:	d00a      	beq.n	8015114 <dhcp_create_msg+0xfc>
 80150fe:	79fb      	ldrb	r3, [r7, #7]
 8015100:	2b03      	cmp	r3, #3
 8015102:	d10c      	bne.n	801511e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015108:	2b05      	cmp	r3, #5
 801510a:	d003      	beq.n	8015114 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	795b      	ldrb	r3, [r3, #5]
 8015110:	2b04      	cmp	r3, #4
 8015112:	d104      	bne.n	801511e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	3304      	adds	r3, #4
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801511e:	2300      	movs	r3, #0
 8015120:	83fb      	strh	r3, [r7, #30]
 8015122:	e00c      	b.n	801513e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015124:	8bfa      	ldrh	r2, [r7, #30]
 8015126:	8bfb      	ldrh	r3, [r7, #30]
 8015128:	68f9      	ldr	r1, [r7, #12]
 801512a:	440a      	add	r2, r1
 801512c:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8015130:	697a      	ldr	r2, [r7, #20]
 8015132:	4413      	add	r3, r2
 8015134:	460a      	mov	r2, r1
 8015136:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015138:	8bfb      	ldrh	r3, [r7, #30]
 801513a:	3301      	adds	r3, #1
 801513c:	83fb      	strh	r3, [r7, #30]
 801513e:	8bfb      	ldrh	r3, [r7, #30]
 8015140:	2b05      	cmp	r3, #5
 8015142:	d9ef      	bls.n	8015124 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	2200      	movs	r2, #0
 8015148:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801514c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8015150:	2200      	movs	r2, #0
 8015152:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8015156:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801515a:	2200      	movs	r2, #0
 801515c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8015160:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8015164:	2200      	movs	r2, #0
 8015166:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801516a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015174:	2301      	movs	r3, #1
 8015176:	2235      	movs	r2, #53	@ 0x35
 8015178:	2000      	movs	r0, #0
 801517a:	f7ff fadb 	bl	8014734 <dhcp_option>
 801517e:	4603      	mov	r3, r0
 8015180:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015188:	79fa      	ldrb	r2, [r7, #7]
 801518a:	8a7b      	ldrh	r3, [r7, #18]
 801518c:	4618      	mov	r0, r3
 801518e:	f7ff fb05 	bl	801479c <dhcp_option_byte>
 8015192:	4603      	mov	r3, r0
 8015194:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d002      	beq.n	80151a2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	8a7a      	ldrh	r2, [r7, #18]
 80151a0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80151a2:	69bb      	ldr	r3, [r7, #24]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3720      	adds	r7, #32
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0801b218 	.word	0x0801b218
 80151b0:	0801b538 	.word	0x0801b538
 80151b4:	0801b278 	.word	0x0801b278
 80151b8:	0801b558 	.word	0x0801b558
 80151bc:	0801b578 	.word	0x0801b578
 80151c0:	2001dd84 	.word	0x2001dd84

080151c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	4603      	mov	r3, r0
 80151cc:	60b9      	str	r1, [r7, #8]
 80151ce:	607a      	str	r2, [r7, #4]
 80151d0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80151d2:	89fb      	ldrh	r3, [r7, #14]
 80151d4:	1c5a      	adds	r2, r3, #1
 80151d6:	81fa      	strh	r2, [r7, #14]
 80151d8:	461a      	mov	r2, r3
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	4413      	add	r3, r2
 80151de:	22ff      	movs	r2, #255	@ 0xff
 80151e0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80151e2:	e007      	b.n	80151f4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80151e4:	89fb      	ldrh	r3, [r7, #14]
 80151e6:	1c5a      	adds	r2, r3, #1
 80151e8:	81fa      	strh	r2, [r7, #14]
 80151ea:	461a      	mov	r2, r3
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	4413      	add	r3, r2
 80151f0:	2200      	movs	r2, #0
 80151f2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80151f4:	89fb      	ldrh	r3, [r7, #14]
 80151f6:	2b43      	cmp	r3, #67	@ 0x43
 80151f8:	d904      	bls.n	8015204 <dhcp_option_trailer+0x40>
 80151fa:	89fb      	ldrh	r3, [r7, #14]
 80151fc:	f003 0303 	and.w	r3, r3, #3
 8015200:	2b00      	cmp	r3, #0
 8015202:	d002      	beq.n	801520a <dhcp_option_trailer+0x46>
 8015204:	89fb      	ldrh	r3, [r7, #14]
 8015206:	2b43      	cmp	r3, #67	@ 0x43
 8015208:	d9ec      	bls.n	80151e4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801520a:	89fb      	ldrh	r3, [r7, #14]
 801520c:	33f0      	adds	r3, #240	@ 0xf0
 801520e:	b29b      	uxth	r3, r3
 8015210:	4619      	mov	r1, r3
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7f6 fd2a 	bl	800bc6c <pbuf_realloc>
}
 8015218:	bf00      	nop
 801521a:	3710      	adds	r7, #16
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}

08015220 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015220:	b480      	push	{r7}
 8015222:	b085      	sub	sp, #20
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d017      	beq.n	801525e <dhcp_supplied_address+0x3e>
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015232:	2b00      	cmp	r3, #0
 8015234:	d013      	beq.n	801525e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801523a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	795b      	ldrb	r3, [r3, #5]
 8015240:	2b0a      	cmp	r3, #10
 8015242:	d007      	beq.n	8015254 <dhcp_supplied_address+0x34>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	795b      	ldrb	r3, [r3, #5]
 8015248:	2b05      	cmp	r3, #5
 801524a:	d003      	beq.n	8015254 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015250:	2b04      	cmp	r3, #4
 8015252:	d101      	bne.n	8015258 <dhcp_supplied_address+0x38>
 8015254:	2301      	movs	r3, #1
 8015256:	e000      	b.n	801525a <dhcp_supplied_address+0x3a>
 8015258:	2300      	movs	r3, #0
 801525a:	b2db      	uxtb	r3, r3
 801525c:	e000      	b.n	8015260 <dhcp_supplied_address+0x40>
  }
  return 0;
 801525e:	2300      	movs	r3, #0
}
 8015260:	4618      	mov	r0, r3
 8015262:	3714      	adds	r7, #20
 8015264:	46bd      	mov	sp, r7
 8015266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526a:	4770      	bx	lr

0801526c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015274:	4915      	ldr	r1, [pc, #84]	@ (80152cc <etharp_free_entry+0x60>)
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	4613      	mov	r3, r2
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4413      	add	r3, r2
 801527e:	00db      	lsls	r3, r3, #3
 8015280:	440b      	add	r3, r1
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d013      	beq.n	80152b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015288:	4910      	ldr	r1, [pc, #64]	@ (80152cc <etharp_free_entry+0x60>)
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	4613      	mov	r3, r2
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	4413      	add	r3, r2
 8015292:	00db      	lsls	r3, r3, #3
 8015294:	440b      	add	r3, r1
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4618      	mov	r0, r3
 801529a:	f7f6 fe6b 	bl	800bf74 <pbuf_free>
    arp_table[i].q = NULL;
 801529e:	490b      	ldr	r1, [pc, #44]	@ (80152cc <etharp_free_entry+0x60>)
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	4613      	mov	r3, r2
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	4413      	add	r3, r2
 80152a8:	00db      	lsls	r3, r3, #3
 80152aa:	440b      	add	r3, r1
 80152ac:	2200      	movs	r2, #0
 80152ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80152b0:	4906      	ldr	r1, [pc, #24]	@ (80152cc <etharp_free_entry+0x60>)
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	440b      	add	r3, r1
 80152be:	3314      	adds	r3, #20
 80152c0:	2200      	movs	r2, #0
 80152c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80152c4:	bf00      	nop
 80152c6:	3708      	adds	r7, #8
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	2001dd88 	.word	0x2001dd88

080152d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152d6:	2300      	movs	r3, #0
 80152d8:	607b      	str	r3, [r7, #4]
 80152da:	e096      	b.n	801540a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80152dc:	494f      	ldr	r1, [pc, #316]	@ (801541c <etharp_tmr+0x14c>)
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	4613      	mov	r3, r2
 80152e2:	005b      	lsls	r3, r3, #1
 80152e4:	4413      	add	r3, r2
 80152e6:	00db      	lsls	r3, r3, #3
 80152e8:	440b      	add	r3, r1
 80152ea:	3314      	adds	r3, #20
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80152f0:	78fb      	ldrb	r3, [r7, #3]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	f000 8086 	beq.w	8015404 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80152f8:	4948      	ldr	r1, [pc, #288]	@ (801541c <etharp_tmr+0x14c>)
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	4613      	mov	r3, r2
 80152fe:	005b      	lsls	r3, r3, #1
 8015300:	4413      	add	r3, r2
 8015302:	00db      	lsls	r3, r3, #3
 8015304:	440b      	add	r3, r1
 8015306:	3312      	adds	r3, #18
 8015308:	881b      	ldrh	r3, [r3, #0]
 801530a:	3301      	adds	r3, #1
 801530c:	b298      	uxth	r0, r3
 801530e:	4943      	ldr	r1, [pc, #268]	@ (801541c <etharp_tmr+0x14c>)
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	3312      	adds	r3, #18
 801531e:	4602      	mov	r2, r0
 8015320:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015322:	493e      	ldr	r1, [pc, #248]	@ (801541c <etharp_tmr+0x14c>)
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	4613      	mov	r3, r2
 8015328:	005b      	lsls	r3, r3, #1
 801532a:	4413      	add	r3, r2
 801532c:	00db      	lsls	r3, r3, #3
 801532e:	440b      	add	r3, r1
 8015330:	3312      	adds	r3, #18
 8015332:	881b      	ldrh	r3, [r3, #0]
 8015334:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015338:	d215      	bcs.n	8015366 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801533a:	4938      	ldr	r1, [pc, #224]	@ (801541c <etharp_tmr+0x14c>)
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	3314      	adds	r3, #20
 801534a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801534c:	2b01      	cmp	r3, #1
 801534e:	d10e      	bne.n	801536e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015350:	4932      	ldr	r1, [pc, #200]	@ (801541c <etharp_tmr+0x14c>)
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	4613      	mov	r3, r2
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	440b      	add	r3, r1
 801535e:	3312      	adds	r3, #18
 8015360:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015362:	2b04      	cmp	r3, #4
 8015364:	d903      	bls.n	801536e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7ff ff80 	bl	801526c <etharp_free_entry>
 801536c:	e04a      	b.n	8015404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801536e:	492b      	ldr	r1, [pc, #172]	@ (801541c <etharp_tmr+0x14c>)
 8015370:	687a      	ldr	r2, [r7, #4]
 8015372:	4613      	mov	r3, r2
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	4413      	add	r3, r2
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	440b      	add	r3, r1
 801537c:	3314      	adds	r3, #20
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	2b03      	cmp	r3, #3
 8015382:	d10a      	bne.n	801539a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015384:	4925      	ldr	r1, [pc, #148]	@ (801541c <etharp_tmr+0x14c>)
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	4613      	mov	r3, r2
 801538a:	005b      	lsls	r3, r3, #1
 801538c:	4413      	add	r3, r2
 801538e:	00db      	lsls	r3, r3, #3
 8015390:	440b      	add	r3, r1
 8015392:	3314      	adds	r3, #20
 8015394:	2204      	movs	r2, #4
 8015396:	701a      	strb	r2, [r3, #0]
 8015398:	e034      	b.n	8015404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801539a:	4920      	ldr	r1, [pc, #128]	@ (801541c <etharp_tmr+0x14c>)
 801539c:	687a      	ldr	r2, [r7, #4]
 801539e:	4613      	mov	r3, r2
 80153a0:	005b      	lsls	r3, r3, #1
 80153a2:	4413      	add	r3, r2
 80153a4:	00db      	lsls	r3, r3, #3
 80153a6:	440b      	add	r3, r1
 80153a8:	3314      	adds	r3, #20
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	2b04      	cmp	r3, #4
 80153ae:	d10a      	bne.n	80153c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80153b0:	491a      	ldr	r1, [pc, #104]	@ (801541c <etharp_tmr+0x14c>)
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	4613      	mov	r3, r2
 80153b6:	005b      	lsls	r3, r3, #1
 80153b8:	4413      	add	r3, r2
 80153ba:	00db      	lsls	r3, r3, #3
 80153bc:	440b      	add	r3, r1
 80153be:	3314      	adds	r3, #20
 80153c0:	2202      	movs	r2, #2
 80153c2:	701a      	strb	r2, [r3, #0]
 80153c4:	e01e      	b.n	8015404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80153c6:	4915      	ldr	r1, [pc, #84]	@ (801541c <etharp_tmr+0x14c>)
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	4613      	mov	r3, r2
 80153cc:	005b      	lsls	r3, r3, #1
 80153ce:	4413      	add	r3, r2
 80153d0:	00db      	lsls	r3, r3, #3
 80153d2:	440b      	add	r3, r1
 80153d4:	3314      	adds	r3, #20
 80153d6:	781b      	ldrb	r3, [r3, #0]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d113      	bne.n	8015404 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80153dc:	490f      	ldr	r1, [pc, #60]	@ (801541c <etharp_tmr+0x14c>)
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	4613      	mov	r3, r2
 80153e2:	005b      	lsls	r3, r3, #1
 80153e4:	4413      	add	r3, r2
 80153e6:	00db      	lsls	r3, r3, #3
 80153e8:	440b      	add	r3, r1
 80153ea:	3308      	adds	r3, #8
 80153ec:	6818      	ldr	r0, [r3, #0]
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	4613      	mov	r3, r2
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	4413      	add	r3, r2
 80153f6:	00db      	lsls	r3, r3, #3
 80153f8:	4a08      	ldr	r2, [pc, #32]	@ (801541c <etharp_tmr+0x14c>)
 80153fa:	4413      	add	r3, r2
 80153fc:	3304      	adds	r3, #4
 80153fe:	4619      	mov	r1, r3
 8015400:	f000 fe72 	bl	80160e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	3301      	adds	r3, #1
 8015408:	607b      	str	r3, [r7, #4]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2b09      	cmp	r3, #9
 801540e:	f77f af65 	ble.w	80152dc <etharp_tmr+0xc>
      }
    }
  }
}
 8015412:	bf00      	nop
 8015414:	bf00      	nop
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	2001dd88 	.word	0x2001dd88

08015420 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b08a      	sub	sp, #40	@ 0x28
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	460b      	mov	r3, r1
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801542e:	230a      	movs	r3, #10
 8015430:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015432:	230a      	movs	r3, #10
 8015434:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015436:	230a      	movs	r3, #10
 8015438:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801543a:	2300      	movs	r3, #0
 801543c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801543e:	230a      	movs	r3, #10
 8015440:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015442:	2300      	movs	r3, #0
 8015444:	83bb      	strh	r3, [r7, #28]
 8015446:	2300      	movs	r3, #0
 8015448:	837b      	strh	r3, [r7, #26]
 801544a:	2300      	movs	r3, #0
 801544c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801544e:	2300      	movs	r3, #0
 8015450:	843b      	strh	r3, [r7, #32]
 8015452:	e0ae      	b.n	80155b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015458:	49a6      	ldr	r1, [pc, #664]	@ (80156f4 <etharp_find_entry+0x2d4>)
 801545a:	4613      	mov	r3, r2
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	4413      	add	r3, r2
 8015460:	00db      	lsls	r3, r3, #3
 8015462:	440b      	add	r3, r1
 8015464:	3314      	adds	r3, #20
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801546a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801546e:	2b0a      	cmp	r3, #10
 8015470:	d105      	bne.n	801547e <etharp_find_entry+0x5e>
 8015472:	7dfb      	ldrb	r3, [r7, #23]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d102      	bne.n	801547e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015478:	8c3b      	ldrh	r3, [r7, #32]
 801547a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801547c:	e095      	b.n	80155aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801547e:	7dfb      	ldrb	r3, [r7, #23]
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 8092 	beq.w	80155aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015486:	7dfb      	ldrb	r3, [r7, #23]
 8015488:	2b01      	cmp	r3, #1
 801548a:	d009      	beq.n	80154a0 <etharp_find_entry+0x80>
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d806      	bhi.n	80154a0 <etharp_find_entry+0x80>
 8015492:	4b99      	ldr	r3, [pc, #612]	@ (80156f8 <etharp_find_entry+0x2d8>)
 8015494:	f240 1223 	movw	r2, #291	@ 0x123
 8015498:	4998      	ldr	r1, [pc, #608]	@ (80156fc <etharp_find_entry+0x2dc>)
 801549a:	4899      	ldr	r0, [pc, #612]	@ (8015700 <etharp_find_entry+0x2e0>)
 801549c:	f002 fbe4 	bl	8017c68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d020      	beq.n	80154e8 <etharp_find_entry+0xc8>
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	6819      	ldr	r1, [r3, #0]
 80154aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154ae:	4891      	ldr	r0, [pc, #580]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80154b0:	4613      	mov	r3, r2
 80154b2:	005b      	lsls	r3, r3, #1
 80154b4:	4413      	add	r3, r2
 80154b6:	00db      	lsls	r3, r3, #3
 80154b8:	4403      	add	r3, r0
 80154ba:	3304      	adds	r3, #4
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4299      	cmp	r1, r3
 80154c0:	d112      	bne.n	80154e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d00c      	beq.n	80154e2 <etharp_find_entry+0xc2>
 80154c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154cc:	4989      	ldr	r1, [pc, #548]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80154ce:	4613      	mov	r3, r2
 80154d0:	005b      	lsls	r3, r3, #1
 80154d2:	4413      	add	r3, r2
 80154d4:	00db      	lsls	r3, r3, #3
 80154d6:	440b      	add	r3, r1
 80154d8:	3308      	adds	r3, #8
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d102      	bne.n	80154e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80154e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154e6:	e100      	b.n	80156ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80154e8:	7dfb      	ldrb	r3, [r7, #23]
 80154ea:	2b01      	cmp	r3, #1
 80154ec:	d140      	bne.n	8015570 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80154ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154f2:	4980      	ldr	r1, [pc, #512]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80154f4:	4613      	mov	r3, r2
 80154f6:	005b      	lsls	r3, r3, #1
 80154f8:	4413      	add	r3, r2
 80154fa:	00db      	lsls	r3, r3, #3
 80154fc:	440b      	add	r3, r1
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d01a      	beq.n	801553a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015508:	497a      	ldr	r1, [pc, #488]	@ (80156f4 <etharp_find_entry+0x2d4>)
 801550a:	4613      	mov	r3, r2
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	4413      	add	r3, r2
 8015510:	00db      	lsls	r3, r3, #3
 8015512:	440b      	add	r3, r1
 8015514:	3312      	adds	r3, #18
 8015516:	881b      	ldrh	r3, [r3, #0]
 8015518:	8bba      	ldrh	r2, [r7, #28]
 801551a:	429a      	cmp	r2, r3
 801551c:	d845      	bhi.n	80155aa <etharp_find_entry+0x18a>
            old_queue = i;
 801551e:	8c3b      	ldrh	r3, [r7, #32]
 8015520:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015526:	4973      	ldr	r1, [pc, #460]	@ (80156f4 <etharp_find_entry+0x2d4>)
 8015528:	4613      	mov	r3, r2
 801552a:	005b      	lsls	r3, r3, #1
 801552c:	4413      	add	r3, r2
 801552e:	00db      	lsls	r3, r3, #3
 8015530:	440b      	add	r3, r1
 8015532:	3312      	adds	r3, #18
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	83bb      	strh	r3, [r7, #28]
 8015538:	e037      	b.n	80155aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801553a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801553e:	496d      	ldr	r1, [pc, #436]	@ (80156f4 <etharp_find_entry+0x2d4>)
 8015540:	4613      	mov	r3, r2
 8015542:	005b      	lsls	r3, r3, #1
 8015544:	4413      	add	r3, r2
 8015546:	00db      	lsls	r3, r3, #3
 8015548:	440b      	add	r3, r1
 801554a:	3312      	adds	r3, #18
 801554c:	881b      	ldrh	r3, [r3, #0]
 801554e:	8b7a      	ldrh	r2, [r7, #26]
 8015550:	429a      	cmp	r2, r3
 8015552:	d82a      	bhi.n	80155aa <etharp_find_entry+0x18a>
            old_pending = i;
 8015554:	8c3b      	ldrh	r3, [r7, #32]
 8015556:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8015558:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801555c:	4965      	ldr	r1, [pc, #404]	@ (80156f4 <etharp_find_entry+0x2d4>)
 801555e:	4613      	mov	r3, r2
 8015560:	005b      	lsls	r3, r3, #1
 8015562:	4413      	add	r3, r2
 8015564:	00db      	lsls	r3, r3, #3
 8015566:	440b      	add	r3, r1
 8015568:	3312      	adds	r3, #18
 801556a:	881b      	ldrh	r3, [r3, #0]
 801556c:	837b      	strh	r3, [r7, #26]
 801556e:	e01c      	b.n	80155aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015570:	7dfb      	ldrb	r3, [r7, #23]
 8015572:	2b01      	cmp	r3, #1
 8015574:	d919      	bls.n	80155aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801557a:	495e      	ldr	r1, [pc, #376]	@ (80156f4 <etharp_find_entry+0x2d4>)
 801557c:	4613      	mov	r3, r2
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	4413      	add	r3, r2
 8015582:	00db      	lsls	r3, r3, #3
 8015584:	440b      	add	r3, r1
 8015586:	3312      	adds	r3, #18
 8015588:	881b      	ldrh	r3, [r3, #0]
 801558a:	8b3a      	ldrh	r2, [r7, #24]
 801558c:	429a      	cmp	r2, r3
 801558e:	d80c      	bhi.n	80155aa <etharp_find_entry+0x18a>
            old_stable = i;
 8015590:	8c3b      	ldrh	r3, [r7, #32]
 8015592:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015594:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015598:	4956      	ldr	r1, [pc, #344]	@ (80156f4 <etharp_find_entry+0x2d4>)
 801559a:	4613      	mov	r3, r2
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	4413      	add	r3, r2
 80155a0:	00db      	lsls	r3, r3, #3
 80155a2:	440b      	add	r3, r1
 80155a4:	3312      	adds	r3, #18
 80155a6:	881b      	ldrh	r3, [r3, #0]
 80155a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155aa:	8c3b      	ldrh	r3, [r7, #32]
 80155ac:	3301      	adds	r3, #1
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	843b      	strh	r3, [r7, #32]
 80155b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155b6:	2b09      	cmp	r3, #9
 80155b8:	f77f af4c 	ble.w	8015454 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80155bc:	7afb      	ldrb	r3, [r7, #11]
 80155be:	f003 0302 	and.w	r3, r3, #2
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d108      	bne.n	80155d8 <etharp_find_entry+0x1b8>
 80155c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80155ca:	2b0a      	cmp	r3, #10
 80155cc:	d107      	bne.n	80155de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80155ce:	7afb      	ldrb	r3, [r7, #11]
 80155d0:	f003 0301 	and.w	r3, r3, #1
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d102      	bne.n	80155de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80155d8:	f04f 33ff 	mov.w	r3, #4294967295
 80155dc:	e085      	b.n	80156ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80155de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80155e2:	2b09      	cmp	r3, #9
 80155e4:	dc02      	bgt.n	80155ec <etharp_find_entry+0x1cc>
    i = empty;
 80155e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80155e8:	843b      	strh	r3, [r7, #32]
 80155ea:	e039      	b.n	8015660 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80155ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80155f0:	2b09      	cmp	r3, #9
 80155f2:	dc14      	bgt.n	801561e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80155f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80155f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80155f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155fc:	493d      	ldr	r1, [pc, #244]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	440b      	add	r3, r1
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d018      	beq.n	8015640 <etharp_find_entry+0x220>
 801560e:	4b3a      	ldr	r3, [pc, #232]	@ (80156f8 <etharp_find_entry+0x2d8>)
 8015610:	f240 126d 	movw	r2, #365	@ 0x16d
 8015614:	493b      	ldr	r1, [pc, #236]	@ (8015704 <etharp_find_entry+0x2e4>)
 8015616:	483a      	ldr	r0, [pc, #232]	@ (8015700 <etharp_find_entry+0x2e0>)
 8015618:	f002 fb26 	bl	8017c68 <iprintf>
 801561c:	e010      	b.n	8015640 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801561e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015622:	2b09      	cmp	r3, #9
 8015624:	dc02      	bgt.n	801562c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015628:	843b      	strh	r3, [r7, #32]
 801562a:	e009      	b.n	8015640 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801562c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015630:	2b09      	cmp	r3, #9
 8015632:	dc02      	bgt.n	801563a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015634:	8bfb      	ldrh	r3, [r7, #30]
 8015636:	843b      	strh	r3, [r7, #32]
 8015638:	e002      	b.n	8015640 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801563a:	f04f 33ff 	mov.w	r3, #4294967295
 801563e:	e054      	b.n	80156ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015640:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015644:	2b09      	cmp	r3, #9
 8015646:	dd06      	ble.n	8015656 <etharp_find_entry+0x236>
 8015648:	4b2b      	ldr	r3, [pc, #172]	@ (80156f8 <etharp_find_entry+0x2d8>)
 801564a:	f240 127f 	movw	r2, #383	@ 0x17f
 801564e:	492e      	ldr	r1, [pc, #184]	@ (8015708 <etharp_find_entry+0x2e8>)
 8015650:	482b      	ldr	r0, [pc, #172]	@ (8015700 <etharp_find_entry+0x2e0>)
 8015652:	f002 fb09 	bl	8017c68 <iprintf>
    etharp_free_entry(i);
 8015656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801565a:	4618      	mov	r0, r3
 801565c:	f7ff fe06 	bl	801526c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015660:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015664:	2b09      	cmp	r3, #9
 8015666:	dd06      	ble.n	8015676 <etharp_find_entry+0x256>
 8015668:	4b23      	ldr	r3, [pc, #140]	@ (80156f8 <etharp_find_entry+0x2d8>)
 801566a:	f240 1283 	movw	r2, #387	@ 0x183
 801566e:	4926      	ldr	r1, [pc, #152]	@ (8015708 <etharp_find_entry+0x2e8>)
 8015670:	4823      	ldr	r0, [pc, #140]	@ (8015700 <etharp_find_entry+0x2e0>)
 8015672:	f002 faf9 	bl	8017c68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801567a:	491e      	ldr	r1, [pc, #120]	@ (80156f4 <etharp_find_entry+0x2d4>)
 801567c:	4613      	mov	r3, r2
 801567e:	005b      	lsls	r3, r3, #1
 8015680:	4413      	add	r3, r2
 8015682:	00db      	lsls	r3, r3, #3
 8015684:	440b      	add	r3, r1
 8015686:	3314      	adds	r3, #20
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d006      	beq.n	801569c <etharp_find_entry+0x27c>
 801568e:	4b1a      	ldr	r3, [pc, #104]	@ (80156f8 <etharp_find_entry+0x2d8>)
 8015690:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015694:	491d      	ldr	r1, [pc, #116]	@ (801570c <etharp_find_entry+0x2ec>)
 8015696:	481a      	ldr	r0, [pc, #104]	@ (8015700 <etharp_find_entry+0x2e0>)
 8015698:	f002 fae6 	bl	8017c68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00b      	beq.n	80156ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80156a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	6819      	ldr	r1, [r3, #0]
 80156aa:	4812      	ldr	r0, [pc, #72]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80156ac:	4613      	mov	r3, r2
 80156ae:	005b      	lsls	r3, r3, #1
 80156b0:	4413      	add	r3, r2
 80156b2:	00db      	lsls	r3, r3, #3
 80156b4:	4403      	add	r3, r0
 80156b6:	3304      	adds	r3, #4
 80156b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80156ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156be:	490d      	ldr	r1, [pc, #52]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80156c0:	4613      	mov	r3, r2
 80156c2:	005b      	lsls	r3, r3, #1
 80156c4:	4413      	add	r3, r2
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	440b      	add	r3, r1
 80156ca:	3312      	adds	r3, #18
 80156cc:	2200      	movs	r2, #0
 80156ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80156d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156d4:	4907      	ldr	r1, [pc, #28]	@ (80156f4 <etharp_find_entry+0x2d4>)
 80156d6:	4613      	mov	r3, r2
 80156d8:	005b      	lsls	r3, r3, #1
 80156da:	4413      	add	r3, r2
 80156dc:	00db      	lsls	r3, r3, #3
 80156de:	440b      	add	r3, r1
 80156e0:	3308      	adds	r3, #8
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80156e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3728      	adds	r7, #40	@ 0x28
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	2001dd88 	.word	0x2001dd88
 80156f8:	0801b5b8 	.word	0x0801b5b8
 80156fc:	0801b5f0 	.word	0x0801b5f0
 8015700:	0801b630 	.word	0x0801b630
 8015704:	0801b658 	.word	0x0801b658
 8015708:	0801b670 	.word	0x0801b670
 801570c:	0801b684 	.word	0x0801b684

08015710 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b088      	sub	sp, #32
 8015714:	af02      	add	r7, sp, #8
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
 801571c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015724:	2b06      	cmp	r3, #6
 8015726:	d006      	beq.n	8015736 <etharp_update_arp_entry+0x26>
 8015728:	4b48      	ldr	r3, [pc, #288]	@ (801584c <etharp_update_arp_entry+0x13c>)
 801572a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801572e:	4948      	ldr	r1, [pc, #288]	@ (8015850 <etharp_update_arp_entry+0x140>)
 8015730:	4848      	ldr	r0, [pc, #288]	@ (8015854 <etharp_update_arp_entry+0x144>)
 8015732:	f002 fa99 	bl	8017c68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d012      	beq.n	8015762 <etharp_update_arp_entry+0x52>
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d00e      	beq.n	8015762 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	68f9      	ldr	r1, [r7, #12]
 801574a:	4618      	mov	r0, r3
 801574c:	f001 f920 	bl	8016990 <ip4_addr_isbroadcast_u32>
 8015750:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015752:	2b00      	cmp	r3, #0
 8015754:	d105      	bne.n	8015762 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801575e:	2be0      	cmp	r3, #224	@ 0xe0
 8015760:	d102      	bne.n	8015768 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015762:	f06f 030f 	mvn.w	r3, #15
 8015766:	e06c      	b.n	8015842 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015768:	78fb      	ldrb	r3, [r7, #3]
 801576a:	68fa      	ldr	r2, [r7, #12]
 801576c:	4619      	mov	r1, r3
 801576e:	68b8      	ldr	r0, [r7, #8]
 8015770:	f7ff fe56 	bl	8015420 <etharp_find_entry>
 8015774:	4603      	mov	r3, r0
 8015776:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801577c:	2b00      	cmp	r3, #0
 801577e:	da02      	bge.n	8015786 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015780:	8afb      	ldrh	r3, [r7, #22]
 8015782:	b25b      	sxtb	r3, r3
 8015784:	e05d      	b.n	8015842 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801578a:	4933      	ldr	r1, [pc, #204]	@ (8015858 <etharp_update_arp_entry+0x148>)
 801578c:	4613      	mov	r3, r2
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	4413      	add	r3, r2
 8015792:	00db      	lsls	r3, r3, #3
 8015794:	440b      	add	r3, r1
 8015796:	3314      	adds	r3, #20
 8015798:	2202      	movs	r2, #2
 801579a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801579c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157a0:	492d      	ldr	r1, [pc, #180]	@ (8015858 <etharp_update_arp_entry+0x148>)
 80157a2:	4613      	mov	r3, r2
 80157a4:	005b      	lsls	r3, r3, #1
 80157a6:	4413      	add	r3, r2
 80157a8:	00db      	lsls	r3, r3, #3
 80157aa:	440b      	add	r3, r1
 80157ac:	3308      	adds	r3, #8
 80157ae:	68fa      	ldr	r2, [r7, #12]
 80157b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80157b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157b6:	4613      	mov	r3, r2
 80157b8:	005b      	lsls	r3, r3, #1
 80157ba:	4413      	add	r3, r2
 80157bc:	00db      	lsls	r3, r3, #3
 80157be:	3308      	adds	r3, #8
 80157c0:	4a25      	ldr	r2, [pc, #148]	@ (8015858 <etharp_update_arp_entry+0x148>)
 80157c2:	4413      	add	r3, r2
 80157c4:	3304      	adds	r3, #4
 80157c6:	2206      	movs	r2, #6
 80157c8:	6879      	ldr	r1, [r7, #4]
 80157ca:	4618      	mov	r0, r3
 80157cc:	f002 fb85 	bl	8017eda <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80157d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157d4:	4920      	ldr	r1, [pc, #128]	@ (8015858 <etharp_update_arp_entry+0x148>)
 80157d6:	4613      	mov	r3, r2
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	4413      	add	r3, r2
 80157dc:	00db      	lsls	r3, r3, #3
 80157de:	440b      	add	r3, r1
 80157e0:	3312      	adds	r3, #18
 80157e2:	2200      	movs	r2, #0
 80157e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80157e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157ea:	491b      	ldr	r1, [pc, #108]	@ (8015858 <etharp_update_arp_entry+0x148>)
 80157ec:	4613      	mov	r3, r2
 80157ee:	005b      	lsls	r3, r3, #1
 80157f0:	4413      	add	r3, r2
 80157f2:	00db      	lsls	r3, r3, #3
 80157f4:	440b      	add	r3, r1
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d021      	beq.n	8015840 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80157fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015800:	4915      	ldr	r1, [pc, #84]	@ (8015858 <etharp_update_arp_entry+0x148>)
 8015802:	4613      	mov	r3, r2
 8015804:	005b      	lsls	r3, r3, #1
 8015806:	4413      	add	r3, r2
 8015808:	00db      	lsls	r3, r3, #3
 801580a:	440b      	add	r3, r1
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015814:	4910      	ldr	r1, [pc, #64]	@ (8015858 <etharp_update_arp_entry+0x148>)
 8015816:	4613      	mov	r3, r2
 8015818:	005b      	lsls	r3, r3, #1
 801581a:	4413      	add	r3, r2
 801581c:	00db      	lsls	r3, r3, #3
 801581e:	440b      	add	r3, r1
 8015820:	2200      	movs	r2, #0
 8015822:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 801582a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801582e:	9300      	str	r3, [sp, #0]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6939      	ldr	r1, [r7, #16]
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f001 ffb9 	bl	80177ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801583a:	6938      	ldr	r0, [r7, #16]
 801583c:	f7f6 fb9a 	bl	800bf74 <pbuf_free>
  }
  return ERR_OK;
 8015840:	2300      	movs	r3, #0
}
 8015842:	4618      	mov	r0, r3
 8015844:	3718      	adds	r7, #24
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
 801584a:	bf00      	nop
 801584c:	0801b5b8 	.word	0x0801b5b8
 8015850:	0801b6b0 	.word	0x0801b6b0
 8015854:	0801b630 	.word	0x0801b630
 8015858:	2001dd88 	.word	0x2001dd88

0801585c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015864:	2300      	movs	r3, #0
 8015866:	60fb      	str	r3, [r7, #12]
 8015868:	e01e      	b.n	80158a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801586a:	4913      	ldr	r1, [pc, #76]	@ (80158b8 <etharp_cleanup_netif+0x5c>)
 801586c:	68fa      	ldr	r2, [r7, #12]
 801586e:	4613      	mov	r3, r2
 8015870:	005b      	lsls	r3, r3, #1
 8015872:	4413      	add	r3, r2
 8015874:	00db      	lsls	r3, r3, #3
 8015876:	440b      	add	r3, r1
 8015878:	3314      	adds	r3, #20
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801587e:	7afb      	ldrb	r3, [r7, #11]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d00e      	beq.n	80158a2 <etharp_cleanup_netif+0x46>
 8015884:	490c      	ldr	r1, [pc, #48]	@ (80158b8 <etharp_cleanup_netif+0x5c>)
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	3308      	adds	r3, #8
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	429a      	cmp	r2, r3
 801589a:	d102      	bne.n	80158a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f7ff fce5 	bl	801526c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	3301      	adds	r3, #1
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2b09      	cmp	r3, #9
 80158ac:	dddd      	ble.n	801586a <etharp_cleanup_netif+0xe>
    }
  }
}
 80158ae:	bf00      	nop
 80158b0:	bf00      	nop
 80158b2:	3710      	adds	r7, #16
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	2001dd88 	.word	0x2001dd88

080158bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80158bc:	b5b0      	push	{r4, r5, r7, lr}
 80158be:	b08a      	sub	sp, #40	@ 0x28
 80158c0:	af04      	add	r7, sp, #16
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d107      	bne.n	80158dc <etharp_input+0x20>
 80158cc:	4b3f      	ldr	r3, [pc, #252]	@ (80159cc <etharp_input+0x110>)
 80158ce:	f240 228a 	movw	r2, #650	@ 0x28a
 80158d2:	493f      	ldr	r1, [pc, #252]	@ (80159d0 <etharp_input+0x114>)
 80158d4:	483f      	ldr	r0, [pc, #252]	@ (80159d4 <etharp_input+0x118>)
 80158d6:	f002 f9c7 	bl	8017c68 <iprintf>
 80158da:	e074      	b.n	80159c6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	881b      	ldrh	r3, [r3, #0]
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80158ec:	d10c      	bne.n	8015908 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80158f2:	2b06      	cmp	r3, #6
 80158f4:	d108      	bne.n	8015908 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80158fa:	2b04      	cmp	r3, #4
 80158fc:	d104      	bne.n	8015908 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80158fe:	693b      	ldr	r3, [r7, #16]
 8015900:	885b      	ldrh	r3, [r3, #2]
 8015902:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015904:	2b08      	cmp	r3, #8
 8015906:	d003      	beq.n	8015910 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f7f6 fb33 	bl	800bf74 <pbuf_free>
    return;
 801590e:	e05a      	b.n	80159c6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	330e      	adds	r3, #14
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	3318      	adds	r3, #24
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	3304      	adds	r3, #4
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d102      	bne.n	8015930 <etharp_input+0x74>
    for_us = 0;
 801592a:	2300      	movs	r3, #0
 801592c:	75fb      	strb	r3, [r7, #23]
 801592e:	e009      	b.n	8015944 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015930:	68ba      	ldr	r2, [r7, #8]
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	3304      	adds	r3, #4
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	429a      	cmp	r2, r3
 801593a:	bf0c      	ite	eq
 801593c:	2301      	moveq	r3, #1
 801593e:	2300      	movne	r3, #0
 8015940:	b2db      	uxtb	r3, r3
 8015942:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	f103 0208 	add.w	r2, r3, #8
 801594a:	7dfb      	ldrb	r3, [r7, #23]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d001      	beq.n	8015954 <etharp_input+0x98>
 8015950:	2301      	movs	r3, #1
 8015952:	e000      	b.n	8015956 <etharp_input+0x9a>
 8015954:	2302      	movs	r3, #2
 8015956:	f107 010c 	add.w	r1, r7, #12
 801595a:	6838      	ldr	r0, [r7, #0]
 801595c:	f7ff fed8 	bl	8015710 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	88db      	ldrh	r3, [r3, #6]
 8015964:	b29b      	uxth	r3, r3
 8015966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801596a:	d003      	beq.n	8015974 <etharp_input+0xb8>
 801596c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015970:	d01e      	beq.n	80159b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015972:	e025      	b.n	80159c0 <etharp_input+0x104>
      if (for_us) {
 8015974:	7dfb      	ldrb	r3, [r7, #23]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d021      	beq.n	80159be <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8015980:	693b      	ldr	r3, [r7, #16]
 8015982:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015990:	693a      	ldr	r2, [r7, #16]
 8015992:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015994:	2102      	movs	r1, #2
 8015996:	9103      	str	r1, [sp, #12]
 8015998:	f107 010c 	add.w	r1, r7, #12
 801599c:	9102      	str	r1, [sp, #8]
 801599e:	9201      	str	r2, [sp, #4]
 80159a0:	9300      	str	r3, [sp, #0]
 80159a2:	462b      	mov	r3, r5
 80159a4:	4622      	mov	r2, r4
 80159a6:	4601      	mov	r1, r0
 80159a8:	6838      	ldr	r0, [r7, #0]
 80159aa:	f000 faef 	bl	8015f8c <etharp_raw>
      break;
 80159ae:	e006      	b.n	80159be <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80159b0:	f107 030c 	add.w	r3, r7, #12
 80159b4:	4619      	mov	r1, r3
 80159b6:	6838      	ldr	r0, [r7, #0]
 80159b8:	f7fe fa02 	bl	8013dc0 <dhcp_arp_reply>
      break;
 80159bc:	e000      	b.n	80159c0 <etharp_input+0x104>
      break;
 80159be:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7f6 fad7 	bl	800bf74 <pbuf_free>
}
 80159c6:	3718      	adds	r7, #24
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bdb0      	pop	{r4, r5, r7, pc}
 80159cc:	0801b5b8 	.word	0x0801b5b8
 80159d0:	0801b708 	.word	0x0801b708
 80159d4:	0801b630 	.word	0x0801b630

080159d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b086      	sub	sp, #24
 80159dc:	af02      	add	r7, sp, #8
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	4613      	mov	r3, r2
 80159e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80159e6:	79fa      	ldrb	r2, [r7, #7]
 80159e8:	4944      	ldr	r1, [pc, #272]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 80159ea:	4613      	mov	r3, r2
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	4413      	add	r3, r2
 80159f0:	00db      	lsls	r3, r3, #3
 80159f2:	440b      	add	r3, r1
 80159f4:	3314      	adds	r3, #20
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d806      	bhi.n	8015a0a <etharp_output_to_arp_index+0x32>
 80159fc:	4b40      	ldr	r3, [pc, #256]	@ (8015b00 <etharp_output_to_arp_index+0x128>)
 80159fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015a02:	4940      	ldr	r1, [pc, #256]	@ (8015b04 <etharp_output_to_arp_index+0x12c>)
 8015a04:	4840      	ldr	r0, [pc, #256]	@ (8015b08 <etharp_output_to_arp_index+0x130>)
 8015a06:	f002 f92f 	bl	8017c68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015a0a:	79fa      	ldrb	r2, [r7, #7]
 8015a0c:	493b      	ldr	r1, [pc, #236]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015a0e:	4613      	mov	r3, r2
 8015a10:	005b      	lsls	r3, r3, #1
 8015a12:	4413      	add	r3, r2
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	440b      	add	r3, r1
 8015a18:	3314      	adds	r3, #20
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	2b02      	cmp	r3, #2
 8015a1e:	d153      	bne.n	8015ac8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015a20:	79fa      	ldrb	r2, [r7, #7]
 8015a22:	4936      	ldr	r1, [pc, #216]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015a24:	4613      	mov	r3, r2
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	4413      	add	r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	440b      	add	r3, r1
 8015a2e:	3312      	adds	r3, #18
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8015a36:	d919      	bls.n	8015a6c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015a38:	79fa      	ldrb	r2, [r7, #7]
 8015a3a:	4613      	mov	r3, r2
 8015a3c:	005b      	lsls	r3, r3, #1
 8015a3e:	4413      	add	r3, r2
 8015a40:	00db      	lsls	r3, r3, #3
 8015a42:	4a2e      	ldr	r2, [pc, #184]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015a44:	4413      	add	r3, r2
 8015a46:	3304      	adds	r3, #4
 8015a48:	4619      	mov	r1, r3
 8015a4a:	68f8      	ldr	r0, [r7, #12]
 8015a4c:	f000 fb4c 	bl	80160e8 <etharp_request>
 8015a50:	4603      	mov	r3, r0
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d138      	bne.n	8015ac8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a56:	79fa      	ldrb	r2, [r7, #7]
 8015a58:	4928      	ldr	r1, [pc, #160]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015a5a:	4613      	mov	r3, r2
 8015a5c:	005b      	lsls	r3, r3, #1
 8015a5e:	4413      	add	r3, r2
 8015a60:	00db      	lsls	r3, r3, #3
 8015a62:	440b      	add	r3, r1
 8015a64:	3314      	adds	r3, #20
 8015a66:	2203      	movs	r2, #3
 8015a68:	701a      	strb	r2, [r3, #0]
 8015a6a:	e02d      	b.n	8015ac8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015a6c:	79fa      	ldrb	r2, [r7, #7]
 8015a6e:	4923      	ldr	r1, [pc, #140]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015a70:	4613      	mov	r3, r2
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	4413      	add	r3, r2
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	440b      	add	r3, r1
 8015a7a:	3312      	adds	r3, #18
 8015a7c:	881b      	ldrh	r3, [r3, #0]
 8015a7e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8015a82:	d321      	bcc.n	8015ac8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015a84:	79fa      	ldrb	r2, [r7, #7]
 8015a86:	4613      	mov	r3, r2
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	4413      	add	r3, r2
 8015a8c:	00db      	lsls	r3, r3, #3
 8015a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015a90:	4413      	add	r3, r2
 8015a92:	1d19      	adds	r1, r3, #4
 8015a94:	79fa      	ldrb	r2, [r7, #7]
 8015a96:	4613      	mov	r3, r2
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	4413      	add	r3, r2
 8015a9c:	00db      	lsls	r3, r3, #3
 8015a9e:	3308      	adds	r3, #8
 8015aa0:	4a16      	ldr	r2, [pc, #88]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015aa2:	4413      	add	r3, r2
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f000 fafb 	bl	80160a4 <etharp_request_dst>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d109      	bne.n	8015ac8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015ab4:	79fa      	ldrb	r2, [r7, #7]
 8015ab6:	4911      	ldr	r1, [pc, #68]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015ab8:	4613      	mov	r3, r2
 8015aba:	005b      	lsls	r3, r3, #1
 8015abc:	4413      	add	r3, r2
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	440b      	add	r3, r1
 8015ac2:	3314      	adds	r3, #20
 8015ac4:	2203      	movs	r2, #3
 8015ac6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8015ace:	79fa      	ldrb	r2, [r7, #7]
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	005b      	lsls	r3, r3, #1
 8015ad4:	4413      	add	r3, r2
 8015ad6:	00db      	lsls	r3, r3, #3
 8015ad8:	3308      	adds	r3, #8
 8015ada:	4a08      	ldr	r2, [pc, #32]	@ (8015afc <etharp_output_to_arp_index+0x124>)
 8015adc:	4413      	add	r3, r2
 8015ade:	3304      	adds	r3, #4
 8015ae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015ae4:	9200      	str	r2, [sp, #0]
 8015ae6:	460a      	mov	r2, r1
 8015ae8:	68b9      	ldr	r1, [r7, #8]
 8015aea:	68f8      	ldr	r0, [r7, #12]
 8015aec:	f001 fe5e 	bl	80177ac <ethernet_output>
 8015af0:	4603      	mov	r3, r0
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3710      	adds	r7, #16
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	2001dd88 	.word	0x2001dd88
 8015b00:	0801b5b8 	.word	0x0801b5b8
 8015b04:	0801b728 	.word	0x0801b728
 8015b08:	0801b630 	.word	0x0801b630

08015b0c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b08a      	sub	sp, #40	@ 0x28
 8015b10:	af02      	add	r7, sp, #8
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d106      	bne.n	8015b30 <etharp_output+0x24>
 8015b22:	4b73      	ldr	r3, [pc, #460]	@ (8015cf0 <etharp_output+0x1e4>)
 8015b24:	f240 321e 	movw	r2, #798	@ 0x31e
 8015b28:	4972      	ldr	r1, [pc, #456]	@ (8015cf4 <etharp_output+0x1e8>)
 8015b2a:	4873      	ldr	r0, [pc, #460]	@ (8015cf8 <etharp_output+0x1ec>)
 8015b2c:	f002 f89c 	bl	8017c68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d106      	bne.n	8015b44 <etharp_output+0x38>
 8015b36:	4b6e      	ldr	r3, [pc, #440]	@ (8015cf0 <etharp_output+0x1e4>)
 8015b38:	f240 321f 	movw	r2, #799	@ 0x31f
 8015b3c:	496f      	ldr	r1, [pc, #444]	@ (8015cfc <etharp_output+0x1f0>)
 8015b3e:	486e      	ldr	r0, [pc, #440]	@ (8015cf8 <etharp_output+0x1ec>)
 8015b40:	f002 f892 	bl	8017c68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d106      	bne.n	8015b58 <etharp_output+0x4c>
 8015b4a:	4b69      	ldr	r3, [pc, #420]	@ (8015cf0 <etharp_output+0x1e4>)
 8015b4c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015b50:	496b      	ldr	r1, [pc, #428]	@ (8015d00 <etharp_output+0x1f4>)
 8015b52:	4869      	ldr	r0, [pc, #420]	@ (8015cf8 <etharp_output+0x1ec>)
 8015b54:	f002 f888 	bl	8017c68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	68f9      	ldr	r1, [r7, #12]
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f000 ff16 	bl	8016990 <ip4_addr_isbroadcast_u32>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d002      	beq.n	8015b70 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015b6a:	4b66      	ldr	r3, [pc, #408]	@ (8015d04 <etharp_output+0x1f8>)
 8015b6c:	61fb      	str	r3, [r7, #28]
 8015b6e:	e0af      	b.n	8015cd0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015b78:	2be0      	cmp	r3, #224	@ 0xe0
 8015b7a:	d118      	bne.n	8015bae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015b80:	2300      	movs	r3, #0
 8015b82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015b84:	235e      	movs	r3, #94	@ 0x5e
 8015b86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	3301      	adds	r3, #1
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	3302      	adds	r3, #2
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	3303      	adds	r3, #3
 8015ba2:	781b      	ldrb	r3, [r3, #0]
 8015ba4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015ba6:	f107 0310 	add.w	r3, r7, #16
 8015baa:	61fb      	str	r3, [r7, #28]
 8015bac:	e090      	b.n	8015cd0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	405a      	eors	r2, r3
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	3308      	adds	r3, #8
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4013      	ands	r3, r2
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d012      	beq.n	8015bec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015bcc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015bd0:	4293      	cmp	r3, r2
 8015bd2:	d00b      	beq.n	8015bec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	330c      	adds	r3, #12
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d003      	beq.n	8015be6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	330c      	adds	r3, #12
 8015be2:	61bb      	str	r3, [r7, #24]
 8015be4:	e002      	b.n	8015bec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015be6:	f06f 0303 	mvn.w	r3, #3
 8015bea:	e07d      	b.n	8015ce8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015bec:	4b46      	ldr	r3, [pc, #280]	@ (8015d08 <etharp_output+0x1fc>)
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	4a46      	ldr	r2, [pc, #280]	@ (8015d0c <etharp_output+0x200>)
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	005b      	lsls	r3, r3, #1
 8015bf8:	440b      	add	r3, r1
 8015bfa:	00db      	lsls	r3, r3, #3
 8015bfc:	4413      	add	r3, r2
 8015bfe:	3314      	adds	r3, #20
 8015c00:	781b      	ldrb	r3, [r3, #0]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d925      	bls.n	8015c52 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c06:	4b40      	ldr	r3, [pc, #256]	@ (8015d08 <etharp_output+0x1fc>)
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8015d0c <etharp_output+0x200>)
 8015c0e:	460b      	mov	r3, r1
 8015c10:	005b      	lsls	r3, r3, #1
 8015c12:	440b      	add	r3, r1
 8015c14:	00db      	lsls	r3, r3, #3
 8015c16:	4413      	add	r3, r2
 8015c18:	3308      	adds	r3, #8
 8015c1a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015c1c:	68fa      	ldr	r2, [r7, #12]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d117      	bne.n	8015c52 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	681a      	ldr	r2, [r3, #0]
 8015c26:	4b38      	ldr	r3, [pc, #224]	@ (8015d08 <etharp_output+0x1fc>)
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	4937      	ldr	r1, [pc, #220]	@ (8015d0c <etharp_output+0x200>)
 8015c2e:	4603      	mov	r3, r0
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	4403      	add	r3, r0
 8015c34:	00db      	lsls	r3, r3, #3
 8015c36:	440b      	add	r3, r1
 8015c38:	3304      	adds	r3, #4
 8015c3a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d108      	bne.n	8015c52 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015c40:	4b31      	ldr	r3, [pc, #196]	@ (8015d08 <etharp_output+0x1fc>)
 8015c42:	781b      	ldrb	r3, [r3, #0]
 8015c44:	461a      	mov	r2, r3
 8015c46:	68b9      	ldr	r1, [r7, #8]
 8015c48:	68f8      	ldr	r0, [r7, #12]
 8015c4a:	f7ff fec5 	bl	80159d8 <etharp_output_to_arp_index>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	e04a      	b.n	8015ce8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c52:	2300      	movs	r3, #0
 8015c54:	75fb      	strb	r3, [r7, #23]
 8015c56:	e031      	b.n	8015cbc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c58:	7dfa      	ldrb	r2, [r7, #23]
 8015c5a:	492c      	ldr	r1, [pc, #176]	@ (8015d0c <etharp_output+0x200>)
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	005b      	lsls	r3, r3, #1
 8015c60:	4413      	add	r3, r2
 8015c62:	00db      	lsls	r3, r3, #3
 8015c64:	440b      	add	r3, r1
 8015c66:	3314      	adds	r3, #20
 8015c68:	781b      	ldrb	r3, [r3, #0]
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	d923      	bls.n	8015cb6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015c6e:	7dfa      	ldrb	r2, [r7, #23]
 8015c70:	4926      	ldr	r1, [pc, #152]	@ (8015d0c <etharp_output+0x200>)
 8015c72:	4613      	mov	r3, r2
 8015c74:	005b      	lsls	r3, r3, #1
 8015c76:	4413      	add	r3, r2
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	440b      	add	r3, r1
 8015c7c:	3308      	adds	r3, #8
 8015c7e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c80:	68fa      	ldr	r2, [r7, #12]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d117      	bne.n	8015cb6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	6819      	ldr	r1, [r3, #0]
 8015c8a:	7dfa      	ldrb	r2, [r7, #23]
 8015c8c:	481f      	ldr	r0, [pc, #124]	@ (8015d0c <etharp_output+0x200>)
 8015c8e:	4613      	mov	r3, r2
 8015c90:	005b      	lsls	r3, r3, #1
 8015c92:	4413      	add	r3, r2
 8015c94:	00db      	lsls	r3, r3, #3
 8015c96:	4403      	add	r3, r0
 8015c98:	3304      	adds	r3, #4
 8015c9a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015c9c:	4299      	cmp	r1, r3
 8015c9e:	d10a      	bne.n	8015cb6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015ca0:	4a19      	ldr	r2, [pc, #100]	@ (8015d08 <etharp_output+0x1fc>)
 8015ca2:	7dfb      	ldrb	r3, [r7, #23]
 8015ca4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015ca6:	7dfb      	ldrb	r3, [r7, #23]
 8015ca8:	461a      	mov	r2, r3
 8015caa:	68b9      	ldr	r1, [r7, #8]
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f7ff fe93 	bl	80159d8 <etharp_output_to_arp_index>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	e018      	b.n	8015ce8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015cb6:	7dfb      	ldrb	r3, [r7, #23]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	75fb      	strb	r3, [r7, #23]
 8015cbc:	7dfb      	ldrb	r3, [r7, #23]
 8015cbe:	2b09      	cmp	r3, #9
 8015cc0:	d9ca      	bls.n	8015c58 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	69b9      	ldr	r1, [r7, #24]
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f000 f822 	bl	8015d10 <etharp_query>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	e00b      	b.n	8015ce8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8015cd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015cda:	9300      	str	r3, [sp, #0]
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	68b9      	ldr	r1, [r7, #8]
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f001 fd63 	bl	80177ac <ethernet_output>
 8015ce6:	4603      	mov	r3, r0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3720      	adds	r7, #32
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	0801b5b8 	.word	0x0801b5b8
 8015cf4:	0801b708 	.word	0x0801b708
 8015cf8:	0801b630 	.word	0x0801b630
 8015cfc:	0801b758 	.word	0x0801b758
 8015d00:	0801b6f8 	.word	0x0801b6f8
 8015d04:	0801c408 	.word	0x0801c408
 8015d08:	2001de78 	.word	0x2001de78
 8015d0c:	2001dd88 	.word	0x2001dd88

08015d10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b08c      	sub	sp, #48	@ 0x30
 8015d14:	af02      	add	r7, sp, #8
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	332e      	adds	r3, #46	@ 0x2e
 8015d20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015d22:	23ff      	movs	r3, #255	@ 0xff
 8015d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	68f9      	ldr	r1, [r7, #12]
 8015d32:	4618      	mov	r0, r3
 8015d34:	f000 fe2c 	bl	8016990 <ip4_addr_isbroadcast_u32>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d10c      	bne.n	8015d58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d46:	2be0      	cmp	r3, #224	@ 0xe0
 8015d48:	d006      	beq.n	8015d58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d003      	beq.n	8015d58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d102      	bne.n	8015d5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d58:	f06f 030f 	mvn.w	r3, #15
 8015d5c:	e101      	b.n	8015f62 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015d5e:	68fa      	ldr	r2, [r7, #12]
 8015d60:	2101      	movs	r1, #1
 8015d62:	68b8      	ldr	r0, [r7, #8]
 8015d64:	f7ff fb5c 	bl	8015420 <etharp_find_entry>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015d6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	da02      	bge.n	8015d7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015d74:	8a7b      	ldrh	r3, [r7, #18]
 8015d76:	b25b      	sxtb	r3, r3
 8015d78:	e0f3      	b.n	8015f62 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015d7a:	8a7b      	ldrh	r3, [r7, #18]
 8015d7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8015d7e:	d906      	bls.n	8015d8e <etharp_query+0x7e>
 8015d80:	4b7a      	ldr	r3, [pc, #488]	@ (8015f6c <etharp_query+0x25c>)
 8015d82:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015d86:	497a      	ldr	r1, [pc, #488]	@ (8015f70 <etharp_query+0x260>)
 8015d88:	487a      	ldr	r0, [pc, #488]	@ (8015f74 <etharp_query+0x264>)
 8015d8a:	f001 ff6d 	bl	8017c68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015d8e:	8a7b      	ldrh	r3, [r7, #18]
 8015d90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015d92:	7c7a      	ldrb	r2, [r7, #17]
 8015d94:	4978      	ldr	r1, [pc, #480]	@ (8015f78 <etharp_query+0x268>)
 8015d96:	4613      	mov	r3, r2
 8015d98:	005b      	lsls	r3, r3, #1
 8015d9a:	4413      	add	r3, r2
 8015d9c:	00db      	lsls	r3, r3, #3
 8015d9e:	440b      	add	r3, r1
 8015da0:	3314      	adds	r3, #20
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d115      	bne.n	8015dd4 <etharp_query+0xc4>
    is_new_entry = 1;
 8015da8:	2301      	movs	r3, #1
 8015daa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015dac:	7c7a      	ldrb	r2, [r7, #17]
 8015dae:	4972      	ldr	r1, [pc, #456]	@ (8015f78 <etharp_query+0x268>)
 8015db0:	4613      	mov	r3, r2
 8015db2:	005b      	lsls	r3, r3, #1
 8015db4:	4413      	add	r3, r2
 8015db6:	00db      	lsls	r3, r3, #3
 8015db8:	440b      	add	r3, r1
 8015dba:	3314      	adds	r3, #20
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015dc0:	7c7a      	ldrb	r2, [r7, #17]
 8015dc2:	496d      	ldr	r1, [pc, #436]	@ (8015f78 <etharp_query+0x268>)
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	4413      	add	r3, r2
 8015dca:	00db      	lsls	r3, r3, #3
 8015dcc:	440b      	add	r3, r1
 8015dce:	3308      	adds	r3, #8
 8015dd0:	68fa      	ldr	r2, [r7, #12]
 8015dd2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015dd4:	7c7a      	ldrb	r2, [r7, #17]
 8015dd6:	4968      	ldr	r1, [pc, #416]	@ (8015f78 <etharp_query+0x268>)
 8015dd8:	4613      	mov	r3, r2
 8015dda:	005b      	lsls	r3, r3, #1
 8015ddc:	4413      	add	r3, r2
 8015dde:	00db      	lsls	r3, r3, #3
 8015de0:	440b      	add	r3, r1
 8015de2:	3314      	adds	r3, #20
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b01      	cmp	r3, #1
 8015de8:	d011      	beq.n	8015e0e <etharp_query+0xfe>
 8015dea:	7c7a      	ldrb	r2, [r7, #17]
 8015dec:	4962      	ldr	r1, [pc, #392]	@ (8015f78 <etharp_query+0x268>)
 8015dee:	4613      	mov	r3, r2
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	4413      	add	r3, r2
 8015df4:	00db      	lsls	r3, r3, #3
 8015df6:	440b      	add	r3, r1
 8015df8:	3314      	adds	r3, #20
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	2b01      	cmp	r3, #1
 8015dfe:	d806      	bhi.n	8015e0e <etharp_query+0xfe>
 8015e00:	4b5a      	ldr	r3, [pc, #360]	@ (8015f6c <etharp_query+0x25c>)
 8015e02:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015e06:	495d      	ldr	r1, [pc, #372]	@ (8015f7c <etharp_query+0x26c>)
 8015e08:	485a      	ldr	r0, [pc, #360]	@ (8015f74 <etharp_query+0x264>)
 8015e0a:	f001 ff2d 	bl	8017c68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015e0e:	6a3b      	ldr	r3, [r7, #32]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d102      	bne.n	8015e1a <etharp_query+0x10a>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d10c      	bne.n	8015e34 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015e1a:	68b9      	ldr	r1, [r7, #8]
 8015e1c:	68f8      	ldr	r0, [r7, #12]
 8015e1e:	f000 f963 	bl	80160e8 <etharp_request>
 8015e22:	4603      	mov	r3, r0
 8015e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d102      	bne.n	8015e34 <etharp_query+0x124>
      return result;
 8015e2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015e32:	e096      	b.n	8015f62 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d106      	bne.n	8015e48 <etharp_query+0x138>
 8015e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8015f6c <etharp_query+0x25c>)
 8015e3c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015e40:	494f      	ldr	r1, [pc, #316]	@ (8015f80 <etharp_query+0x270>)
 8015e42:	484c      	ldr	r0, [pc, #304]	@ (8015f74 <etharp_query+0x264>)
 8015e44:	f001 ff10 	bl	8017c68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015e48:	7c7a      	ldrb	r2, [r7, #17]
 8015e4a:	494b      	ldr	r1, [pc, #300]	@ (8015f78 <etharp_query+0x268>)
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	4413      	add	r3, r2
 8015e52:	00db      	lsls	r3, r3, #3
 8015e54:	440b      	add	r3, r1
 8015e56:	3314      	adds	r3, #20
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	2b01      	cmp	r3, #1
 8015e5c:	d917      	bls.n	8015e8e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015e5e:	4a49      	ldr	r2, [pc, #292]	@ (8015f84 <etharp_query+0x274>)
 8015e60:	7c7b      	ldrb	r3, [r7, #17]
 8015e62:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015e64:	7c7a      	ldrb	r2, [r7, #17]
 8015e66:	4613      	mov	r3, r2
 8015e68:	005b      	lsls	r3, r3, #1
 8015e6a:	4413      	add	r3, r2
 8015e6c:	00db      	lsls	r3, r3, #3
 8015e6e:	3308      	adds	r3, #8
 8015e70:	4a41      	ldr	r2, [pc, #260]	@ (8015f78 <etharp_query+0x268>)
 8015e72:	4413      	add	r3, r2
 8015e74:	3304      	adds	r3, #4
 8015e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015e7a:	9200      	str	r2, [sp, #0]
 8015e7c:	697a      	ldr	r2, [r7, #20]
 8015e7e:	6879      	ldr	r1, [r7, #4]
 8015e80:	68f8      	ldr	r0, [r7, #12]
 8015e82:	f001 fc93 	bl	80177ac <ethernet_output>
 8015e86:	4603      	mov	r3, r0
 8015e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015e8c:	e067      	b.n	8015f5e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015e8e:	7c7a      	ldrb	r2, [r7, #17]
 8015e90:	4939      	ldr	r1, [pc, #228]	@ (8015f78 <etharp_query+0x268>)
 8015e92:	4613      	mov	r3, r2
 8015e94:	005b      	lsls	r3, r3, #1
 8015e96:	4413      	add	r3, r2
 8015e98:	00db      	lsls	r3, r3, #3
 8015e9a:	440b      	add	r3, r1
 8015e9c:	3314      	adds	r3, #20
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d15c      	bne.n	8015f5e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015eac:	e01c      	b.n	8015ee8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	895a      	ldrh	r2, [r3, #10]
 8015eb2:	69fb      	ldr	r3, [r7, #28]
 8015eb4:	891b      	ldrh	r3, [r3, #8]
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d10a      	bne.n	8015ed0 <etharp_query+0x1c0>
 8015eba:	69fb      	ldr	r3, [r7, #28]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d006      	beq.n	8015ed0 <etharp_query+0x1c0>
 8015ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8015f6c <etharp_query+0x25c>)
 8015ec4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015ec8:	492f      	ldr	r1, [pc, #188]	@ (8015f88 <etharp_query+0x278>)
 8015eca:	482a      	ldr	r0, [pc, #168]	@ (8015f74 <etharp_query+0x264>)
 8015ecc:	f001 fecc 	bl	8017c68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	7b1b      	ldrb	r3, [r3, #12]
 8015ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d002      	beq.n	8015ee2 <etharp_query+0x1d2>
        copy_needed = 1;
 8015edc:	2301      	movs	r3, #1
 8015ede:	61bb      	str	r3, [r7, #24]
        break;
 8015ee0:	e005      	b.n	8015eee <etharp_query+0x1de>
      }
      p = p->next;
 8015ee2:	69fb      	ldr	r3, [r7, #28]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d1df      	bne.n	8015eae <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015eee:	69bb      	ldr	r3, [r7, #24]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d007      	beq.n	8015f04 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015efa:	200e      	movs	r0, #14
 8015efc:	f7f6 fadc 	bl	800c4b8 <pbuf_clone>
 8015f00:	61f8      	str	r0, [r7, #28]
 8015f02:	e004      	b.n	8015f0e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015f08:	69f8      	ldr	r0, [r7, #28]
 8015f0a:	f7f6 f8d9 	bl	800c0c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d021      	beq.n	8015f58 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015f14:	7c7a      	ldrb	r2, [r7, #17]
 8015f16:	4918      	ldr	r1, [pc, #96]	@ (8015f78 <etharp_query+0x268>)
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	440b      	add	r3, r1
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00a      	beq.n	8015f3e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015f28:	7c7a      	ldrb	r2, [r7, #17]
 8015f2a:	4913      	ldr	r1, [pc, #76]	@ (8015f78 <etharp_query+0x268>)
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	005b      	lsls	r3, r3, #1
 8015f30:	4413      	add	r3, r2
 8015f32:	00db      	lsls	r3, r3, #3
 8015f34:	440b      	add	r3, r1
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f7f6 f81b 	bl	800bf74 <pbuf_free>
      }
      arp_table[i].q = p;
 8015f3e:	7c7a      	ldrb	r2, [r7, #17]
 8015f40:	490d      	ldr	r1, [pc, #52]	@ (8015f78 <etharp_query+0x268>)
 8015f42:	4613      	mov	r3, r2
 8015f44:	005b      	lsls	r3, r3, #1
 8015f46:	4413      	add	r3, r2
 8015f48:	00db      	lsls	r3, r3, #3
 8015f4a:	440b      	add	r3, r1
 8015f4c:	69fa      	ldr	r2, [r7, #28]
 8015f4e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015f50:	2300      	movs	r3, #0
 8015f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f56:	e002      	b.n	8015f5e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015f58:	23ff      	movs	r3, #255	@ 0xff
 8015f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015f5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3728      	adds	r7, #40	@ 0x28
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	0801b5b8 	.word	0x0801b5b8
 8015f70:	0801b764 	.word	0x0801b764
 8015f74:	0801b630 	.word	0x0801b630
 8015f78:	2001dd88 	.word	0x2001dd88
 8015f7c:	0801b774 	.word	0x0801b774
 8015f80:	0801b758 	.word	0x0801b758
 8015f84:	2001de78 	.word	0x2001de78
 8015f88:	0801b79c 	.word	0x0801b79c

08015f8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b08a      	sub	sp, #40	@ 0x28
 8015f90:	af02      	add	r7, sp, #8
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
 8015f98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d106      	bne.n	8015fb2 <etharp_raw+0x26>
 8015fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8016090 <etharp_raw+0x104>)
 8015fa6:	f240 4257 	movw	r2, #1111	@ 0x457
 8015faa:	493a      	ldr	r1, [pc, #232]	@ (8016094 <etharp_raw+0x108>)
 8015fac:	483a      	ldr	r0, [pc, #232]	@ (8016098 <etharp_raw+0x10c>)
 8015fae:	f001 fe5b 	bl	8017c68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015fb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015fb6:	211c      	movs	r1, #28
 8015fb8:	200e      	movs	r0, #14
 8015fba:	f7f5 fcf9 	bl	800b9b0 <pbuf_alloc>
 8015fbe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d102      	bne.n	8015fcc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015fca:	e05d      	b.n	8016088 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015fcc:	69bb      	ldr	r3, [r7, #24]
 8015fce:	895b      	ldrh	r3, [r3, #10]
 8015fd0:	2b1b      	cmp	r3, #27
 8015fd2:	d806      	bhi.n	8015fe2 <etharp_raw+0x56>
 8015fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8016090 <etharp_raw+0x104>)
 8015fd6:	f240 4262 	movw	r2, #1122	@ 0x462
 8015fda:	4930      	ldr	r1, [pc, #192]	@ (801609c <etharp_raw+0x110>)
 8015fdc:	482e      	ldr	r0, [pc, #184]	@ (8016098 <etharp_raw+0x10c>)
 8015fde:	f001 fe43 	bl	8017c68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015fe2:	69bb      	ldr	r3, [r7, #24]
 8015fe4:	685b      	ldr	r3, [r3, #4]
 8015fe6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015fe8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7f4 fb10 	bl	800a610 <lwip_htons>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015ffe:	2b06      	cmp	r3, #6
 8016000:	d006      	beq.n	8016010 <etharp_raw+0x84>
 8016002:	4b23      	ldr	r3, [pc, #140]	@ (8016090 <etharp_raw+0x104>)
 8016004:	f240 4269 	movw	r2, #1129	@ 0x469
 8016008:	4925      	ldr	r1, [pc, #148]	@ (80160a0 <etharp_raw+0x114>)
 801600a:	4823      	ldr	r0, [pc, #140]	@ (8016098 <etharp_raw+0x10c>)
 801600c:	f001 fe2c 	bl	8017c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	3308      	adds	r3, #8
 8016014:	2206      	movs	r2, #6
 8016016:	6839      	ldr	r1, [r7, #0]
 8016018:	4618      	mov	r0, r3
 801601a:	f001 ff5e 	bl	8017eda <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	3312      	adds	r3, #18
 8016022:	2206      	movs	r2, #6
 8016024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016026:	4618      	mov	r0, r3
 8016028:	f001 ff57 	bl	8017eda <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	330e      	adds	r3, #14
 8016030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016032:	6812      	ldr	r2, [r2, #0]
 8016034:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	3318      	adds	r3, #24
 801603a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801603c:	6812      	ldr	r2, [r2, #0]
 801603e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	2200      	movs	r2, #0
 8016044:	701a      	strb	r2, [r3, #0]
 8016046:	2200      	movs	r2, #0
 8016048:	f042 0201 	orr.w	r2, r2, #1
 801604c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	2200      	movs	r2, #0
 8016052:	f042 0208 	orr.w	r2, r2, #8
 8016056:	709a      	strb	r2, [r3, #2]
 8016058:	2200      	movs	r2, #0
 801605a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	2206      	movs	r2, #6
 8016060:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016062:	697b      	ldr	r3, [r7, #20]
 8016064:	2204      	movs	r2, #4
 8016066:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016068:	f640 0306 	movw	r3, #2054	@ 0x806
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	68ba      	ldr	r2, [r7, #8]
 8016072:	69b9      	ldr	r1, [r7, #24]
 8016074:	68f8      	ldr	r0, [r7, #12]
 8016076:	f001 fb99 	bl	80177ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801607a:	69b8      	ldr	r0, [r7, #24]
 801607c:	f7f5 ff7a 	bl	800bf74 <pbuf_free>
  p = NULL;
 8016080:	2300      	movs	r3, #0
 8016082:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016084:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3720      	adds	r7, #32
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}
 8016090:	0801b5b8 	.word	0x0801b5b8
 8016094:	0801b708 	.word	0x0801b708
 8016098:	0801b630 	.word	0x0801b630
 801609c:	0801b7b8 	.word	0x0801b7b8
 80160a0:	0801b7ec 	.word	0x0801b7ec

080160a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b088      	sub	sp, #32
 80160a8:	af04      	add	r7, sp, #16
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	60b9      	str	r1, [r7, #8]
 80160ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80160c0:	2201      	movs	r2, #1
 80160c2:	9203      	str	r2, [sp, #12]
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	9202      	str	r2, [sp, #8]
 80160c8:	4a06      	ldr	r2, [pc, #24]	@ (80160e4 <etharp_request_dst+0x40>)
 80160ca:	9201      	str	r2, [sp, #4]
 80160cc:	9300      	str	r3, [sp, #0]
 80160ce:	4603      	mov	r3, r0
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	68f8      	ldr	r0, [r7, #12]
 80160d4:	f7ff ff5a 	bl	8015f8c <etharp_raw>
 80160d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3710      	adds	r7, #16
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	0801c410 	.word	0x0801c410

080160e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80160f2:	4a05      	ldr	r2, [pc, #20]	@ (8016108 <etharp_request+0x20>)
 80160f4:	6839      	ldr	r1, [r7, #0]
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f7ff ffd4 	bl	80160a4 <etharp_request_dst>
 80160fc:	4603      	mov	r3, r0
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3708      	adds	r7, #8
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	0801c408 	.word	0x0801c408

0801610c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b08e      	sub	sp, #56	@ 0x38
 8016110:	af04      	add	r7, sp, #16
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016116:	4b79      	ldr	r3, [pc, #484]	@ (80162fc <icmp_input+0x1f0>)
 8016118:	689b      	ldr	r3, [r3, #8]
 801611a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	f003 030f 	and.w	r3, r3, #15
 8016124:	b2db      	uxtb	r3, r3
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	b2db      	uxtb	r3, r3
 801612a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801612c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801612e:	2b13      	cmp	r3, #19
 8016130:	f240 80cd 	bls.w	80162ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	895b      	ldrh	r3, [r3, #10]
 8016138:	2b03      	cmp	r3, #3
 801613a:	f240 80ca 	bls.w	80162d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016148:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801614c:	2b00      	cmp	r3, #0
 801614e:	f000 80b7 	beq.w	80162c0 <icmp_input+0x1b4>
 8016152:	2b08      	cmp	r3, #8
 8016154:	f040 80b7 	bne.w	80162c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016158:	4b69      	ldr	r3, [pc, #420]	@ (8016300 <icmp_input+0x1f4>)
 801615a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801615c:	4b67      	ldr	r3, [pc, #412]	@ (80162fc <icmp_input+0x1f0>)
 801615e:	695b      	ldr	r3, [r3, #20]
 8016160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016164:	2be0      	cmp	r3, #224	@ 0xe0
 8016166:	f000 80bb 	beq.w	80162e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801616a:	4b64      	ldr	r3, [pc, #400]	@ (80162fc <icmp_input+0x1f0>)
 801616c:	695b      	ldr	r3, [r3, #20]
 801616e:	4a63      	ldr	r2, [pc, #396]	@ (80162fc <icmp_input+0x1f0>)
 8016170:	6812      	ldr	r2, [r2, #0]
 8016172:	4611      	mov	r1, r2
 8016174:	4618      	mov	r0, r3
 8016176:	f000 fc0b 	bl	8016990 <ip4_addr_isbroadcast_u32>
 801617a:	4603      	mov	r3, r0
 801617c:	2b00      	cmp	r3, #0
 801617e:	f040 80b1 	bne.w	80162e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	891b      	ldrh	r3, [r3, #8]
 8016186:	2b07      	cmp	r3, #7
 8016188:	f240 80a5 	bls.w	80162d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801618c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801618e:	330e      	adds	r3, #14
 8016190:	4619      	mov	r1, r3
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7f5 fe58 	bl	800be48 <pbuf_add_header>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d04b      	beq.n	8016236 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	891a      	ldrh	r2, [r3, #8]
 80161a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80161a4:	4413      	add	r3, r2
 80161a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	891b      	ldrh	r3, [r3, #8]
 80161ac:	8b7a      	ldrh	r2, [r7, #26]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	f0c0 809a 	bcc.w	80162e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80161b4:	8b7b      	ldrh	r3, [r7, #26]
 80161b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80161ba:	4619      	mov	r1, r3
 80161bc:	200e      	movs	r0, #14
 80161be:	f7f5 fbf7 	bl	800b9b0 <pbuf_alloc>
 80161c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	f000 8090 	beq.w	80162ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	895b      	ldrh	r3, [r3, #10]
 80161d0:	461a      	mov	r2, r3
 80161d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80161d4:	3308      	adds	r3, #8
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d203      	bcs.n	80161e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80161da:	6978      	ldr	r0, [r7, #20]
 80161dc:	f7f5 feca 	bl	800bf74 <pbuf_free>
          goto icmperr;
 80161e0:	e085      	b.n	80162ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80161e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80161ea:	4618      	mov	r0, r3
 80161ec:	f001 fe75 	bl	8017eda <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80161f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80161f2:	4619      	mov	r1, r3
 80161f4:	6978      	ldr	r0, [r7, #20]
 80161f6:	f7f5 fe37 	bl	800be68 <pbuf_remove_header>
 80161fa:	4603      	mov	r3, r0
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d009      	beq.n	8016214 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016200:	4b40      	ldr	r3, [pc, #256]	@ (8016304 <icmp_input+0x1f8>)
 8016202:	22b6      	movs	r2, #182	@ 0xb6
 8016204:	4940      	ldr	r1, [pc, #256]	@ (8016308 <icmp_input+0x1fc>)
 8016206:	4841      	ldr	r0, [pc, #260]	@ (801630c <icmp_input+0x200>)
 8016208:	f001 fd2e 	bl	8017c68 <iprintf>
          pbuf_free(r);
 801620c:	6978      	ldr	r0, [r7, #20]
 801620e:	f7f5 feb1 	bl	800bf74 <pbuf_free>
          goto icmperr;
 8016212:	e06c      	b.n	80162ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016214:	6879      	ldr	r1, [r7, #4]
 8016216:	6978      	ldr	r0, [r7, #20]
 8016218:	f7f5 ffe0 	bl	800c1dc <pbuf_copy>
 801621c:	4603      	mov	r3, r0
 801621e:	2b00      	cmp	r3, #0
 8016220:	d003      	beq.n	801622a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016222:	6978      	ldr	r0, [r7, #20]
 8016224:	f7f5 fea6 	bl	800bf74 <pbuf_free>
          goto icmperr;
 8016228:	e061      	b.n	80162ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f7f5 fea2 	bl	800bf74 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	607b      	str	r3, [r7, #4]
 8016234:	e00f      	b.n	8016256 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016236:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016238:	330e      	adds	r3, #14
 801623a:	4619      	mov	r1, r3
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f7f5 fe13 	bl	800be68 <pbuf_remove_header>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d006      	beq.n	8016256 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016248:	4b2e      	ldr	r3, [pc, #184]	@ (8016304 <icmp_input+0x1f8>)
 801624a:	22c7      	movs	r2, #199	@ 0xc7
 801624c:	4930      	ldr	r1, [pc, #192]	@ (8016310 <icmp_input+0x204>)
 801624e:	482f      	ldr	r0, [pc, #188]	@ (801630c <icmp_input+0x200>)
 8016250:	f001 fd0a 	bl	8017c68 <iprintf>
          goto icmperr;
 8016254:	e04b      	b.n	80162ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801625c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801625e:	4619      	mov	r1, r3
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7f5 fdf1 	bl	800be48 <pbuf_add_header>
 8016266:	4603      	mov	r3, r0
 8016268:	2b00      	cmp	r3, #0
 801626a:	d12b      	bne.n	80162c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016272:	69fb      	ldr	r3, [r7, #28]
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801627a:	4b20      	ldr	r3, [pc, #128]	@ (80162fc <icmp_input+0x1f0>)
 801627c:	691a      	ldr	r2, [r3, #16]
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016282:	693b      	ldr	r3, [r7, #16]
 8016284:	2200      	movs	r2, #0
 8016286:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	2200      	movs	r2, #0
 801628c:	709a      	strb	r2, [r3, #2]
 801628e:	2200      	movs	r2, #0
 8016290:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	22ff      	movs	r2, #255	@ 0xff
 8016296:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2200      	movs	r2, #0
 801629c:	729a      	strb	r2, [r3, #10]
 801629e:	2200      	movs	r2, #0
 80162a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	9302      	str	r3, [sp, #8]
 80162a6:	2301      	movs	r3, #1
 80162a8:	9301      	str	r3, [sp, #4]
 80162aa:	2300      	movs	r3, #0
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	23ff      	movs	r3, #255	@ 0xff
 80162b0:	2200      	movs	r2, #0
 80162b2:	69f9      	ldr	r1, [r7, #28]
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f000 fa93 	bl	80167e0 <ip4_output_if>
 80162ba:	4603      	mov	r3, r0
 80162bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80162be:	e001      	b.n	80162c4 <icmp_input+0x1b8>
      break;
 80162c0:	bf00      	nop
 80162c2:	e000      	b.n	80162c6 <icmp_input+0x1ba>
      break;
 80162c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f7f5 fe54 	bl	800bf74 <pbuf_free>
  return;
 80162cc:	e013      	b.n	80162f6 <icmp_input+0x1ea>
    goto lenerr;
 80162ce:	bf00      	nop
 80162d0:	e002      	b.n	80162d8 <icmp_input+0x1cc>
    goto lenerr;
 80162d2:	bf00      	nop
 80162d4:	e000      	b.n	80162d8 <icmp_input+0x1cc>
        goto lenerr;
 80162d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f7f5 fe4b 	bl	800bf74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80162de:	e00a      	b.n	80162f6 <icmp_input+0x1ea>
        goto icmperr;
 80162e0:	bf00      	nop
 80162e2:	e004      	b.n	80162ee <icmp_input+0x1e2>
        goto icmperr;
 80162e4:	bf00      	nop
 80162e6:	e002      	b.n	80162ee <icmp_input+0x1e2>
          goto icmperr;
 80162e8:	bf00      	nop
 80162ea:	e000      	b.n	80162ee <icmp_input+0x1e2>
          goto icmperr;
 80162ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f7f5 fe40 	bl	800bf74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80162f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80162f6:	3728      	adds	r7, #40	@ 0x28
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	20010dd0 	.word	0x20010dd0
 8016300:	20010de4 	.word	0x20010de4
 8016304:	0801b830 	.word	0x0801b830
 8016308:	0801b868 	.word	0x0801b868
 801630c:	0801b8a0 	.word	0x0801b8a0
 8016310:	0801b8c8 	.word	0x0801b8c8

08016314 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	460b      	mov	r3, r1
 801631e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016320:	78fb      	ldrb	r3, [r7, #3]
 8016322:	461a      	mov	r2, r3
 8016324:	2103      	movs	r1, #3
 8016326:	6878      	ldr	r0, [r7, #4]
 8016328:	f000 f814 	bl	8016354 <icmp_send_response>
}
 801632c:	bf00      	nop
 801632e:	3708      	adds	r7, #8
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}

08016334 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b082      	sub	sp, #8
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	460b      	mov	r3, r1
 801633e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016340:	78fb      	ldrb	r3, [r7, #3]
 8016342:	461a      	mov	r2, r3
 8016344:	210b      	movs	r1, #11
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f000 f804 	bl	8016354 <icmp_send_response>
}
 801634c:	bf00      	nop
 801634e:	3708      	adds	r7, #8
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b08c      	sub	sp, #48	@ 0x30
 8016358:	af04      	add	r7, sp, #16
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	460b      	mov	r3, r1
 801635e:	70fb      	strb	r3, [r7, #3]
 8016360:	4613      	mov	r3, r2
 8016362:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016364:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016368:	2124      	movs	r1, #36	@ 0x24
 801636a:	2022      	movs	r0, #34	@ 0x22
 801636c:	f7f5 fb20 	bl	800b9b0 <pbuf_alloc>
 8016370:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d04c      	beq.n	8016412 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	895b      	ldrh	r3, [r3, #10]
 801637c:	2b23      	cmp	r3, #35	@ 0x23
 801637e:	d806      	bhi.n	801638e <icmp_send_response+0x3a>
 8016380:	4b26      	ldr	r3, [pc, #152]	@ (801641c <icmp_send_response+0xc8>)
 8016382:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016386:	4926      	ldr	r1, [pc, #152]	@ (8016420 <icmp_send_response+0xcc>)
 8016388:	4826      	ldr	r0, [pc, #152]	@ (8016424 <icmp_send_response+0xd0>)
 801638a:	f001 fc6d 	bl	8017c68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016394:	69fb      	ldr	r3, [r7, #28]
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801639a:	697b      	ldr	r3, [r7, #20]
 801639c:	78fa      	ldrb	r2, [r7, #3]
 801639e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	78ba      	ldrb	r2, [r7, #2]
 80163a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80163a6:	697b      	ldr	r3, [r7, #20]
 80163a8:	2200      	movs	r2, #0
 80163aa:	711a      	strb	r2, [r3, #4]
 80163ac:	2200      	movs	r2, #0
 80163ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	2200      	movs	r2, #0
 80163b4:	719a      	strb	r2, [r3, #6]
 80163b6:	2200      	movs	r2, #0
 80163b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80163ba:	69fb      	ldr	r3, [r7, #28]
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	f103 0008 	add.w	r0, r3, #8
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	221c      	movs	r2, #28
 80163c8:	4619      	mov	r1, r3
 80163ca:	f001 fd86 	bl	8017eda <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	68db      	ldr	r3, [r3, #12]
 80163d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80163d4:	f107 030c 	add.w	r3, r7, #12
 80163d8:	4618      	mov	r0, r3
 80163da:	f000 f825 	bl	8016428 <ip4_route>
 80163de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80163e0:	693b      	ldr	r3, [r7, #16]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d011      	beq.n	801640a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	2200      	movs	r2, #0
 80163ea:	709a      	strb	r2, [r3, #2]
 80163ec:	2200      	movs	r2, #0
 80163ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80163f0:	f107 020c 	add.w	r2, r7, #12
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	9302      	str	r3, [sp, #8]
 80163f8:	2301      	movs	r3, #1
 80163fa:	9301      	str	r3, [sp, #4]
 80163fc:	2300      	movs	r3, #0
 80163fe:	9300      	str	r3, [sp, #0]
 8016400:	23ff      	movs	r3, #255	@ 0xff
 8016402:	2100      	movs	r1, #0
 8016404:	69f8      	ldr	r0, [r7, #28]
 8016406:	f000 f9eb 	bl	80167e0 <ip4_output_if>
  }
  pbuf_free(q);
 801640a:	69f8      	ldr	r0, [r7, #28]
 801640c:	f7f5 fdb2 	bl	800bf74 <pbuf_free>
 8016410:	e000      	b.n	8016414 <icmp_send_response+0xc0>
    return;
 8016412:	bf00      	nop
}
 8016414:	3720      	adds	r7, #32
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	0801b830 	.word	0x0801b830
 8016420:	0801b8fc 	.word	0x0801b8fc
 8016424:	0801b8a0 	.word	0x0801b8a0

08016428 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016428:	b480      	push	{r7}
 801642a:	b085      	sub	sp, #20
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016430:	4b33      	ldr	r3, [pc, #204]	@ (8016500 <ip4_route+0xd8>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	60fb      	str	r3, [r7, #12]
 8016436:	e036      	b.n	80164a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801643e:	f003 0301 	and.w	r3, r3, #1
 8016442:	b2db      	uxtb	r3, r3
 8016444:	2b00      	cmp	r3, #0
 8016446:	d02b      	beq.n	80164a0 <ip4_route+0x78>
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801644e:	089b      	lsrs	r3, r3, #2
 8016450:	f003 0301 	and.w	r3, r3, #1
 8016454:	b2db      	uxtb	r3, r3
 8016456:	2b00      	cmp	r3, #0
 8016458:	d022      	beq.n	80164a0 <ip4_route+0x78>
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	3304      	adds	r3, #4
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d01d      	beq.n	80164a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	3304      	adds	r3, #4
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	405a      	eors	r2, r3
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	3308      	adds	r3, #8
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4013      	ands	r3, r2
 8016478:	2b00      	cmp	r3, #0
 801647a:	d101      	bne.n	8016480 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	e038      	b.n	80164f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016486:	f003 0302 	and.w	r3, r3, #2
 801648a:	2b00      	cmp	r3, #0
 801648c:	d108      	bne.n	80164a0 <ip4_route+0x78>
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	330c      	adds	r3, #12
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	429a      	cmp	r2, r3
 801649a:	d101      	bne.n	80164a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	e028      	b.n	80164f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	60fb      	str	r3, [r7, #12]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d1c5      	bne.n	8016438 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80164ac:	4b15      	ldr	r3, [pc, #84]	@ (8016504 <ip4_route+0xdc>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d01a      	beq.n	80164ea <ip4_route+0xc2>
 80164b4:	4b13      	ldr	r3, [pc, #76]	@ (8016504 <ip4_route+0xdc>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80164bc:	f003 0301 	and.w	r3, r3, #1
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d012      	beq.n	80164ea <ip4_route+0xc2>
 80164c4:	4b0f      	ldr	r3, [pc, #60]	@ (8016504 <ip4_route+0xdc>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80164cc:	f003 0304 	and.w	r3, r3, #4
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00a      	beq.n	80164ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80164d4:	4b0b      	ldr	r3, [pc, #44]	@ (8016504 <ip4_route+0xdc>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	3304      	adds	r3, #4
 80164da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d004      	beq.n	80164ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80164e8:	d101      	bne.n	80164ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80164ea:	2300      	movs	r3, #0
 80164ec:	e001      	b.n	80164f2 <ip4_route+0xca>
  }

  return netif_default;
 80164ee:	4b05      	ldr	r3, [pc, #20]	@ (8016504 <ip4_route+0xdc>)
 80164f0:	681b      	ldr	r3, [r3, #0]
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3714      	adds	r7, #20
 80164f6:	46bd      	mov	sp, r7
 80164f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop
 8016500:	2001dce8 	.word	0x2001dce8
 8016504:	2001dcec 	.word	0x2001dcec

08016508 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016516:	f003 0301 	and.w	r3, r3, #1
 801651a:	b2db      	uxtb	r3, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	d016      	beq.n	801654e <ip4_input_accept+0x46>
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	3304      	adds	r3, #4
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d011      	beq.n	801654e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801652a:	4b0b      	ldr	r3, [pc, #44]	@ (8016558 <ip4_input_accept+0x50>)
 801652c:	695a      	ldr	r2, [r3, #20]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	3304      	adds	r3, #4
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	429a      	cmp	r2, r3
 8016536:	d008      	beq.n	801654a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016538:	4b07      	ldr	r3, [pc, #28]	@ (8016558 <ip4_input_accept+0x50>)
 801653a:	695b      	ldr	r3, [r3, #20]
 801653c:	6879      	ldr	r1, [r7, #4]
 801653e:	4618      	mov	r0, r3
 8016540:	f000 fa26 	bl	8016990 <ip4_addr_isbroadcast_u32>
 8016544:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016546:	2b00      	cmp	r3, #0
 8016548:	d001      	beq.n	801654e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801654a:	2301      	movs	r3, #1
 801654c:	e000      	b.n	8016550 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801654e:	2300      	movs	r3, #0
}
 8016550:	4618      	mov	r0, r3
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	20010dd0 	.word	0x20010dd0

0801655c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b088      	sub	sp, #32
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016566:	2301      	movs	r3, #1
 8016568:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016570:	69fb      	ldr	r3, [r7, #28]
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	091b      	lsrs	r3, r3, #4
 8016576:	b2db      	uxtb	r3, r3
 8016578:	2b04      	cmp	r3, #4
 801657a:	d004      	beq.n	8016586 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7f5 fcf9 	bl	800bf74 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016582:	2300      	movs	r3, #0
 8016584:	e123      	b.n	80167ce <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	f003 030f 	and.w	r3, r3, #15
 801658e:	b2db      	uxtb	r3, r3
 8016590:	009b      	lsls	r3, r3, #2
 8016592:	b2db      	uxtb	r3, r3
 8016594:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	885b      	ldrh	r3, [r3, #2]
 801659a:	b29b      	uxth	r3, r3
 801659c:	4618      	mov	r0, r3
 801659e:	f7f4 f837 	bl	800a610 <lwip_htons>
 80165a2:	4603      	mov	r3, r0
 80165a4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	891b      	ldrh	r3, [r3, #8]
 80165aa:	8a3a      	ldrh	r2, [r7, #16]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d204      	bcs.n	80165ba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80165b0:	8a3b      	ldrh	r3, [r7, #16]
 80165b2:	4619      	mov	r1, r3
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7f5 fb59 	bl	800bc6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	895b      	ldrh	r3, [r3, #10]
 80165be:	8a7a      	ldrh	r2, [r7, #18]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d807      	bhi.n	80165d4 <ip4_input+0x78>
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	891b      	ldrh	r3, [r3, #8]
 80165c8:	8a3a      	ldrh	r2, [r7, #16]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d802      	bhi.n	80165d4 <ip4_input+0x78>
 80165ce:	8a7b      	ldrh	r3, [r7, #18]
 80165d0:	2b13      	cmp	r3, #19
 80165d2:	d804      	bhi.n	80165de <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f7f5 fccd 	bl	800bf74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80165da:	2300      	movs	r3, #0
 80165dc:	e0f7      	b.n	80167ce <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	691b      	ldr	r3, [r3, #16]
 80165e2:	4a7d      	ldr	r2, [pc, #500]	@ (80167d8 <ip4_input+0x27c>)
 80165e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	4a7b      	ldr	r2, [pc, #492]	@ (80167d8 <ip4_input+0x27c>)
 80165ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80165ee:	4b7a      	ldr	r3, [pc, #488]	@ (80167d8 <ip4_input+0x27c>)
 80165f0:	695b      	ldr	r3, [r3, #20]
 80165f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80165f6:	2be0      	cmp	r3, #224	@ 0xe0
 80165f8:	d112      	bne.n	8016620 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016600:	f003 0301 	and.w	r3, r3, #1
 8016604:	b2db      	uxtb	r3, r3
 8016606:	2b00      	cmp	r3, #0
 8016608:	d007      	beq.n	801661a <ip4_input+0xbe>
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	3304      	adds	r3, #4
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d002      	beq.n	801661a <ip4_input+0xbe>
      netif = inp;
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	61bb      	str	r3, [r7, #24]
 8016618:	e02a      	b.n	8016670 <ip4_input+0x114>
    } else {
      netif = NULL;
 801661a:	2300      	movs	r3, #0
 801661c:	61bb      	str	r3, [r7, #24]
 801661e:	e027      	b.n	8016670 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016620:	6838      	ldr	r0, [r7, #0]
 8016622:	f7ff ff71 	bl	8016508 <ip4_input_accept>
 8016626:	4603      	mov	r3, r0
 8016628:	2b00      	cmp	r3, #0
 801662a:	d002      	beq.n	8016632 <ip4_input+0xd6>
      netif = inp;
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	61bb      	str	r3, [r7, #24]
 8016630:	e01e      	b.n	8016670 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016632:	2300      	movs	r3, #0
 8016634:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016636:	4b68      	ldr	r3, [pc, #416]	@ (80167d8 <ip4_input+0x27c>)
 8016638:	695b      	ldr	r3, [r3, #20]
 801663a:	b2db      	uxtb	r3, r3
 801663c:	2b7f      	cmp	r3, #127	@ 0x7f
 801663e:	d017      	beq.n	8016670 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016640:	4b66      	ldr	r3, [pc, #408]	@ (80167dc <ip4_input+0x280>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	61bb      	str	r3, [r7, #24]
 8016646:	e00e      	b.n	8016666 <ip4_input+0x10a>
          if (netif == inp) {
 8016648:	69ba      	ldr	r2, [r7, #24]
 801664a:	683b      	ldr	r3, [r7, #0]
 801664c:	429a      	cmp	r2, r3
 801664e:	d006      	beq.n	801665e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016650:	69b8      	ldr	r0, [r7, #24]
 8016652:	f7ff ff59 	bl	8016508 <ip4_input_accept>
 8016656:	4603      	mov	r3, r0
 8016658:	2b00      	cmp	r3, #0
 801665a:	d108      	bne.n	801666e <ip4_input+0x112>
 801665c:	e000      	b.n	8016660 <ip4_input+0x104>
            continue;
 801665e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016660:	69bb      	ldr	r3, [r7, #24]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	61bb      	str	r3, [r7, #24]
 8016666:	69bb      	ldr	r3, [r7, #24]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d1ed      	bne.n	8016648 <ip4_input+0xec>
 801666c:	e000      	b.n	8016670 <ip4_input+0x114>
            break;
 801666e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d111      	bne.n	801669a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016676:	69fb      	ldr	r3, [r7, #28]
 8016678:	7a5b      	ldrb	r3, [r3, #9]
 801667a:	2b11      	cmp	r3, #17
 801667c:	d10d      	bne.n	801669a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801667e:	8a7b      	ldrh	r3, [r7, #18]
 8016680:	69fa      	ldr	r2, [r7, #28]
 8016682:	4413      	add	r3, r2
 8016684:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	885b      	ldrh	r3, [r3, #2]
 801668a:	b29b      	uxth	r3, r3
 801668c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8016690:	d103      	bne.n	801669a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016696:	2300      	movs	r3, #0
 8016698:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d017      	beq.n	80166d0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80166a0:	4b4d      	ldr	r3, [pc, #308]	@ (80167d8 <ip4_input+0x27c>)
 80166a2:	691b      	ldr	r3, [r3, #16]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d013      	beq.n	80166d0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80166a8:	4b4b      	ldr	r3, [pc, #300]	@ (80167d8 <ip4_input+0x27c>)
 80166aa:	691b      	ldr	r3, [r3, #16]
 80166ac:	6839      	ldr	r1, [r7, #0]
 80166ae:	4618      	mov	r0, r3
 80166b0:	f000 f96e 	bl	8016990 <ip4_addr_isbroadcast_u32>
 80166b4:	4603      	mov	r3, r0
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d105      	bne.n	80166c6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80166ba:	4b47      	ldr	r3, [pc, #284]	@ (80167d8 <ip4_input+0x27c>)
 80166bc:	691b      	ldr	r3, [r3, #16]
 80166be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80166c2:	2be0      	cmp	r3, #224	@ 0xe0
 80166c4:	d104      	bne.n	80166d0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f7f5 fc54 	bl	800bf74 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80166cc:	2300      	movs	r3, #0
 80166ce:	e07e      	b.n	80167ce <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80166d0:	69bb      	ldr	r3, [r7, #24]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d104      	bne.n	80166e0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f7f5 fc4c 	bl	800bf74 <pbuf_free>
    return ERR_OK;
 80166dc:	2300      	movs	r3, #0
 80166de:	e076      	b.n	80167ce <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80166e0:	69fb      	ldr	r3, [r7, #28]
 80166e2:	88db      	ldrh	r3, [r3, #6]
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	461a      	mov	r2, r3
 80166e8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80166ec:	4013      	ands	r3, r2
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d00b      	beq.n	801670a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f000 fc92 	bl	801701c <ip4_reass>
 80166f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d101      	bne.n	8016704 <ip4_input+0x1a8>
      return ERR_OK;
 8016700:	2300      	movs	r3, #0
 8016702:	e064      	b.n	80167ce <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	685b      	ldr	r3, [r3, #4]
 8016708:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801670a:	4a33      	ldr	r2, [pc, #204]	@ (80167d8 <ip4_input+0x27c>)
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016710:	4a31      	ldr	r2, [pc, #196]	@ (80167d8 <ip4_input+0x27c>)
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016716:	4a30      	ldr	r2, [pc, #192]	@ (80167d8 <ip4_input+0x27c>)
 8016718:	69fb      	ldr	r3, [r7, #28]
 801671a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	f003 030f 	and.w	r3, r3, #15
 8016724:	b2db      	uxtb	r3, r3
 8016726:	009b      	lsls	r3, r3, #2
 8016728:	b2db      	uxtb	r3, r3
 801672a:	461a      	mov	r2, r3
 801672c:	4b2a      	ldr	r3, [pc, #168]	@ (80167d8 <ip4_input+0x27c>)
 801672e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016730:	8a7b      	ldrh	r3, [r7, #18]
 8016732:	4619      	mov	r1, r3
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f7f5 fb97 	bl	800be68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801673a:	69fb      	ldr	r3, [r7, #28]
 801673c:	7a5b      	ldrb	r3, [r3, #9]
 801673e:	2b11      	cmp	r3, #17
 8016740:	d006      	beq.n	8016750 <ip4_input+0x1f4>
 8016742:	2b11      	cmp	r3, #17
 8016744:	dc13      	bgt.n	801676e <ip4_input+0x212>
 8016746:	2b01      	cmp	r3, #1
 8016748:	d00c      	beq.n	8016764 <ip4_input+0x208>
 801674a:	2b06      	cmp	r3, #6
 801674c:	d005      	beq.n	801675a <ip4_input+0x1fe>
 801674e:	e00e      	b.n	801676e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016750:	6839      	ldr	r1, [r7, #0]
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f7fc faee 	bl	8012d34 <udp_input>
        break;
 8016758:	e026      	b.n	80167a8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801675a:	6839      	ldr	r1, [r7, #0]
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f7f7 feab 	bl	800e4b8 <tcp_input>
        break;
 8016762:	e021      	b.n	80167a8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016764:	6839      	ldr	r1, [r7, #0]
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f7ff fcd0 	bl	801610c <icmp_input>
        break;
 801676c:	e01c      	b.n	80167a8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801676e:	4b1a      	ldr	r3, [pc, #104]	@ (80167d8 <ip4_input+0x27c>)
 8016770:	695b      	ldr	r3, [r3, #20]
 8016772:	69b9      	ldr	r1, [r7, #24]
 8016774:	4618      	mov	r0, r3
 8016776:	f000 f90b 	bl	8016990 <ip4_addr_isbroadcast_u32>
 801677a:	4603      	mov	r3, r0
 801677c:	2b00      	cmp	r3, #0
 801677e:	d10f      	bne.n	80167a0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016780:	4b15      	ldr	r3, [pc, #84]	@ (80167d8 <ip4_input+0x27c>)
 8016782:	695b      	ldr	r3, [r3, #20]
 8016784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016788:	2be0      	cmp	r3, #224	@ 0xe0
 801678a:	d009      	beq.n	80167a0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801678c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016790:	4619      	mov	r1, r3
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f7f5 fbdb 	bl	800bf4e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016798:	2102      	movs	r1, #2
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7ff fdba 	bl	8016314 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7f5 fbe7 	bl	800bf74 <pbuf_free>
        break;
 80167a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80167a8:	4b0b      	ldr	r3, [pc, #44]	@ (80167d8 <ip4_input+0x27c>)
 80167aa:	2200      	movs	r2, #0
 80167ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80167ae:	4b0a      	ldr	r3, [pc, #40]	@ (80167d8 <ip4_input+0x27c>)
 80167b0:	2200      	movs	r2, #0
 80167b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80167b4:	4b08      	ldr	r3, [pc, #32]	@ (80167d8 <ip4_input+0x27c>)
 80167b6:	2200      	movs	r2, #0
 80167b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80167ba:	4b07      	ldr	r3, [pc, #28]	@ (80167d8 <ip4_input+0x27c>)
 80167bc:	2200      	movs	r2, #0
 80167be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80167c0:	4b05      	ldr	r3, [pc, #20]	@ (80167d8 <ip4_input+0x27c>)
 80167c2:	2200      	movs	r2, #0
 80167c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80167c6:	4b04      	ldr	r3, [pc, #16]	@ (80167d8 <ip4_input+0x27c>)
 80167c8:	2200      	movs	r2, #0
 80167ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80167cc:	2300      	movs	r3, #0
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3720      	adds	r7, #32
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	20010dd0 	.word	0x20010dd0
 80167dc:	2001dce8 	.word	0x2001dce8

080167e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b08a      	sub	sp, #40	@ 0x28
 80167e4:	af04      	add	r7, sp, #16
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
 80167ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d009      	beq.n	801680c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80167f8:	68bb      	ldr	r3, [r7, #8]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d003      	beq.n	8016806 <ip4_output_if+0x26>
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d102      	bne.n	801680c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016808:	3304      	adds	r3, #4
 801680a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801680c:	78fa      	ldrb	r2, [r7, #3]
 801680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016810:	9302      	str	r3, [sp, #8]
 8016812:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016816:	9301      	str	r3, [sp, #4]
 8016818:	f897 3020 	ldrb.w	r3, [r7, #32]
 801681c:	9300      	str	r3, [sp, #0]
 801681e:	4613      	mov	r3, r2
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	6979      	ldr	r1, [r7, #20]
 8016824:	68f8      	ldr	r0, [r7, #12]
 8016826:	f000 f805 	bl	8016834 <ip4_output_if_src>
 801682a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801682c:	4618      	mov	r0, r3
 801682e:	3718      	adds	r7, #24
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b088      	sub	sp, #32
 8016838:	af00      	add	r7, sp, #0
 801683a:	60f8      	str	r0, [r7, #12]
 801683c:	60b9      	str	r1, [r7, #8]
 801683e:	607a      	str	r2, [r7, #4]
 8016840:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	7b9b      	ldrb	r3, [r3, #14]
 8016846:	2b01      	cmp	r3, #1
 8016848:	d006      	beq.n	8016858 <ip4_output_if_src+0x24>
 801684a:	4b4b      	ldr	r3, [pc, #300]	@ (8016978 <ip4_output_if_src+0x144>)
 801684c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016850:	494a      	ldr	r1, [pc, #296]	@ (801697c <ip4_output_if_src+0x148>)
 8016852:	484b      	ldr	r0, [pc, #300]	@ (8016980 <ip4_output_if_src+0x14c>)
 8016854:	f001 fa08 	bl	8017c68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d060      	beq.n	8016920 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801685e:	2314      	movs	r3, #20
 8016860:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016862:	2114      	movs	r1, #20
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	f7f5 faef 	bl	800be48 <pbuf_add_header>
 801686a:	4603      	mov	r3, r0
 801686c:	2b00      	cmp	r3, #0
 801686e:	d002      	beq.n	8016876 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016870:	f06f 0301 	mvn.w	r3, #1
 8016874:	e07c      	b.n	8016970 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	895b      	ldrh	r3, [r3, #10]
 8016880:	2b13      	cmp	r3, #19
 8016882:	d806      	bhi.n	8016892 <ip4_output_if_src+0x5e>
 8016884:	4b3c      	ldr	r3, [pc, #240]	@ (8016978 <ip4_output_if_src+0x144>)
 8016886:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801688a:	493e      	ldr	r1, [pc, #248]	@ (8016984 <ip4_output_if_src+0x150>)
 801688c:	483c      	ldr	r0, [pc, #240]	@ (8016980 <ip4_output_if_src+0x14c>)
 801688e:	f001 f9eb 	bl	8017c68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	78fa      	ldrb	r2, [r7, #3]
 8016896:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801689e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681a      	ldr	r2, [r3, #0]
 80168a4:	69fb      	ldr	r3, [r7, #28]
 80168a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80168a8:	8b7b      	ldrh	r3, [r7, #26]
 80168aa:	089b      	lsrs	r3, r3, #2
 80168ac:	b29b      	uxth	r3, r3
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80168b4:	b2da      	uxtb	r2, r3
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80168ba:	69fb      	ldr	r3, [r7, #28]
 80168bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80168c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	891b      	ldrh	r3, [r3, #8]
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7f3 fea2 	bl	800a610 <lwip_htons>
 80168cc:	4603      	mov	r3, r0
 80168ce:	461a      	mov	r2, r3
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	2200      	movs	r2, #0
 80168d8:	719a      	strb	r2, [r3, #6]
 80168da:	2200      	movs	r2, #0
 80168dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80168de:	4b2a      	ldr	r3, [pc, #168]	@ (8016988 <ip4_output_if_src+0x154>)
 80168e0:	881b      	ldrh	r3, [r3, #0]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7f3 fe94 	bl	800a610 <lwip_htons>
 80168e8:	4603      	mov	r3, r0
 80168ea:	461a      	mov	r2, r3
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80168f0:	4b25      	ldr	r3, [pc, #148]	@ (8016988 <ip4_output_if_src+0x154>)
 80168f2:	881b      	ldrh	r3, [r3, #0]
 80168f4:	3301      	adds	r3, #1
 80168f6:	b29a      	uxth	r2, r3
 80168f8:	4b23      	ldr	r3, [pc, #140]	@ (8016988 <ip4_output_if_src+0x154>)
 80168fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d104      	bne.n	801690c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016902:	4b22      	ldr	r3, [pc, #136]	@ (801698c <ip4_output_if_src+0x158>)
 8016904:	681a      	ldr	r2, [r3, #0]
 8016906:	69fb      	ldr	r3, [r7, #28]
 8016908:	60da      	str	r2, [r3, #12]
 801690a:	e003      	b.n	8016914 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	69fb      	ldr	r3, [r7, #28]
 8016912:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016914:	69fb      	ldr	r3, [r7, #28]
 8016916:	2200      	movs	r2, #0
 8016918:	729a      	strb	r2, [r3, #10]
 801691a:	2200      	movs	r2, #0
 801691c:	72da      	strb	r2, [r3, #11]
 801691e:	e00f      	b.n	8016940 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	895b      	ldrh	r3, [r3, #10]
 8016924:	2b13      	cmp	r3, #19
 8016926:	d802      	bhi.n	801692e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016928:	f06f 0301 	mvn.w	r3, #1
 801692c:	e020      	b.n	8016970 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	685b      	ldr	r3, [r3, #4]
 8016932:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016934:	69fb      	ldr	r3, [r7, #28]
 8016936:	691b      	ldr	r3, [r3, #16]
 8016938:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801693a:	f107 0314 	add.w	r3, r7, #20
 801693e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016942:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016944:	2b00      	cmp	r3, #0
 8016946:	d00c      	beq.n	8016962 <ip4_output_if_src+0x12e>
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	891a      	ldrh	r2, [r3, #8]
 801694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801694e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016950:	429a      	cmp	r2, r3
 8016952:	d906      	bls.n	8016962 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016954:	687a      	ldr	r2, [r7, #4]
 8016956:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f000 fd53 	bl	8017404 <ip4_frag>
 801695e:	4603      	mov	r3, r0
 8016960:	e006      	b.n	8016970 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016964:	695b      	ldr	r3, [r3, #20]
 8016966:	687a      	ldr	r2, [r7, #4]
 8016968:	68f9      	ldr	r1, [r7, #12]
 801696a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801696c:	4798      	blx	r3
 801696e:	4603      	mov	r3, r0
}
 8016970:	4618      	mov	r0, r3
 8016972:	3720      	adds	r7, #32
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	0801b928 	.word	0x0801b928
 801697c:	0801b95c 	.word	0x0801b95c
 8016980:	0801b968 	.word	0x0801b968
 8016984:	0801b990 	.word	0x0801b990
 8016988:	2001de7a 	.word	0x2001de7a
 801698c:	0801c400 	.word	0x0801c400

08016990 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016990:	b480      	push	{r7}
 8016992:	b085      	sub	sp, #20
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
 8016998:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169a4:	d002      	beq.n	80169ac <ip4_addr_isbroadcast_u32+0x1c>
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d101      	bne.n	80169b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80169ac:	2301      	movs	r3, #1
 80169ae:	e02a      	b.n	8016a06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80169b6:	f003 0302 	and.w	r3, r3, #2
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d101      	bne.n	80169c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80169be:	2300      	movs	r3, #0
 80169c0:	e021      	b.n	8016a06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	3304      	adds	r3, #4
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	687a      	ldr	r2, [r7, #4]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d101      	bne.n	80169d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80169ce:	2300      	movs	r3, #0
 80169d0:	e019      	b.n	8016a06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80169d2:	68fa      	ldr	r2, [r7, #12]
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	3304      	adds	r3, #4
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	405a      	eors	r2, r3
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	3308      	adds	r3, #8
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	4013      	ands	r3, r2
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d10d      	bne.n	8016a04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	3308      	adds	r3, #8
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	43da      	mvns	r2, r3
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	3308      	adds	r3, #8
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d101      	bne.n	8016a04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016a00:	2301      	movs	r3, #1
 8016a02:	e000      	b.n	8016a06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016a04:	2300      	movs	r3, #0
  }
}
 8016a06:	4618      	mov	r0, r3
 8016a08:	3714      	adds	r7, #20
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a10:	4770      	bx	lr
	...

08016a14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016a1e:	4b12      	ldr	r3, [pc, #72]	@ (8016a68 <ip_reass_tmr+0x54>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016a24:	e018      	b.n	8016a58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	7fdb      	ldrb	r3, [r3, #31]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d00b      	beq.n	8016a46 <ip_reass_tmr+0x32>
      r->timer--;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	7fdb      	ldrb	r3, [r3, #31]
 8016a32:	3b01      	subs	r3, #1
 8016a34:	b2da      	uxtb	r2, r3
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	60fb      	str	r3, [r7, #12]
 8016a44:	e008      	b.n	8016a58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016a50:	68b9      	ldr	r1, [r7, #8]
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f000 f80a 	bl	8016a6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d1e3      	bne.n	8016a26 <ip_reass_tmr+0x12>
    }
  }
}
 8016a5e:	bf00      	nop
 8016a60:	bf00      	nop
 8016a62:	3710      	adds	r7, #16
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	2001de7c 	.word	0x2001de7c

08016a6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b088      	sub	sp, #32
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016a76:	2300      	movs	r3, #0
 8016a78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016a7a:	683a      	ldr	r2, [r7, #0]
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	d105      	bne.n	8016a8e <ip_reass_free_complete_datagram+0x22>
 8016a82:	4b45      	ldr	r3, [pc, #276]	@ (8016b98 <ip_reass_free_complete_datagram+0x12c>)
 8016a84:	22ab      	movs	r2, #171	@ 0xab
 8016a86:	4945      	ldr	r1, [pc, #276]	@ (8016b9c <ip_reass_free_complete_datagram+0x130>)
 8016a88:	4845      	ldr	r0, [pc, #276]	@ (8016ba0 <ip_reass_free_complete_datagram+0x134>)
 8016a8a:	f001 f8ed 	bl	8017c68 <iprintf>
  if (prev != NULL) {
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d00a      	beq.n	8016aaa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	687a      	ldr	r2, [r7, #4]
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d005      	beq.n	8016aaa <ip_reass_free_complete_datagram+0x3e>
 8016a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8016b98 <ip_reass_free_complete_datagram+0x12c>)
 8016aa0:	22ad      	movs	r2, #173	@ 0xad
 8016aa2:	4940      	ldr	r1, [pc, #256]	@ (8016ba4 <ip_reass_free_complete_datagram+0x138>)
 8016aa4:	483e      	ldr	r0, [pc, #248]	@ (8016ba0 <ip_reass_free_complete_datagram+0x134>)
 8016aa6:	f001 f8df 	bl	8017c68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	685b      	ldr	r3, [r3, #4]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	889b      	ldrh	r3, [r3, #4]
 8016ab6:	b29b      	uxth	r3, r3
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d12a      	bne.n	8016b12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	681a      	ldr	r2, [r3, #0]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016aca:	69bb      	ldr	r3, [r7, #24]
 8016acc:	6858      	ldr	r0, [r3, #4]
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	3308      	adds	r3, #8
 8016ad2:	2214      	movs	r2, #20
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	f001 fa00 	bl	8017eda <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016ada:	2101      	movs	r1, #1
 8016adc:	69b8      	ldr	r0, [r7, #24]
 8016ade:	f7ff fc29 	bl	8016334 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016ae2:	69b8      	ldr	r0, [r7, #24]
 8016ae4:	f7f5 fad4 	bl	800c090 <pbuf_clen>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016aec:	8bfa      	ldrh	r2, [r7, #30]
 8016aee:	8a7b      	ldrh	r3, [r7, #18]
 8016af0:	4413      	add	r3, r2
 8016af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016af6:	db05      	blt.n	8016b04 <ip_reass_free_complete_datagram+0x98>
 8016af8:	4b27      	ldr	r3, [pc, #156]	@ (8016b98 <ip_reass_free_complete_datagram+0x12c>)
 8016afa:	22bc      	movs	r2, #188	@ 0xbc
 8016afc:	492a      	ldr	r1, [pc, #168]	@ (8016ba8 <ip_reass_free_complete_datagram+0x13c>)
 8016afe:	4828      	ldr	r0, [pc, #160]	@ (8016ba0 <ip_reass_free_complete_datagram+0x134>)
 8016b00:	f001 f8b2 	bl	8017c68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b04:	8bfa      	ldrh	r2, [r7, #30]
 8016b06:	8a7b      	ldrh	r3, [r7, #18]
 8016b08:	4413      	add	r3, r2
 8016b0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016b0c:	69b8      	ldr	r0, [r7, #24]
 8016b0e:	f7f5 fa31 	bl	800bf74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016b18:	e01f      	b.n	8016b5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	685b      	ldr	r3, [r3, #4]
 8016b1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016b20:	69bb      	ldr	r3, [r7, #24]
 8016b22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016b2a:	68f8      	ldr	r0, [r7, #12]
 8016b2c:	f7f5 fab0 	bl	800c090 <pbuf_clen>
 8016b30:	4603      	mov	r3, r0
 8016b32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016b34:	8bfa      	ldrh	r2, [r7, #30]
 8016b36:	8a7b      	ldrh	r3, [r7, #18]
 8016b38:	4413      	add	r3, r2
 8016b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016b3e:	db05      	blt.n	8016b4c <ip_reass_free_complete_datagram+0xe0>
 8016b40:	4b15      	ldr	r3, [pc, #84]	@ (8016b98 <ip_reass_free_complete_datagram+0x12c>)
 8016b42:	22cc      	movs	r2, #204	@ 0xcc
 8016b44:	4918      	ldr	r1, [pc, #96]	@ (8016ba8 <ip_reass_free_complete_datagram+0x13c>)
 8016b46:	4816      	ldr	r0, [pc, #88]	@ (8016ba0 <ip_reass_free_complete_datagram+0x134>)
 8016b48:	f001 f88e 	bl	8017c68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b4c:	8bfa      	ldrh	r2, [r7, #30]
 8016b4e:	8a7b      	ldrh	r3, [r7, #18]
 8016b50:	4413      	add	r3, r2
 8016b52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f7f5 fa0d 	bl	800bf74 <pbuf_free>
  while (p != NULL) {
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d1dc      	bne.n	8016b1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 f8c2 	bl	8016cec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016b68:	4b10      	ldr	r3, [pc, #64]	@ (8016bac <ip_reass_free_complete_datagram+0x140>)
 8016b6a:	881b      	ldrh	r3, [r3, #0]
 8016b6c:	8bfa      	ldrh	r2, [r7, #30]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d905      	bls.n	8016b7e <ip_reass_free_complete_datagram+0x112>
 8016b72:	4b09      	ldr	r3, [pc, #36]	@ (8016b98 <ip_reass_free_complete_datagram+0x12c>)
 8016b74:	22d2      	movs	r2, #210	@ 0xd2
 8016b76:	490e      	ldr	r1, [pc, #56]	@ (8016bb0 <ip_reass_free_complete_datagram+0x144>)
 8016b78:	4809      	ldr	r0, [pc, #36]	@ (8016ba0 <ip_reass_free_complete_datagram+0x134>)
 8016b7a:	f001 f875 	bl	8017c68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8016bac <ip_reass_free_complete_datagram+0x140>)
 8016b80:	881a      	ldrh	r2, [r3, #0]
 8016b82:	8bfb      	ldrh	r3, [r7, #30]
 8016b84:	1ad3      	subs	r3, r2, r3
 8016b86:	b29a      	uxth	r2, r3
 8016b88:	4b08      	ldr	r3, [pc, #32]	@ (8016bac <ip_reass_free_complete_datagram+0x140>)
 8016b8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016b8c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3720      	adds	r7, #32
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	0801b9c0 	.word	0x0801b9c0
 8016b9c:	0801b9fc 	.word	0x0801b9fc
 8016ba0:	0801ba08 	.word	0x0801ba08
 8016ba4:	0801ba30 	.word	0x0801ba30
 8016ba8:	0801ba44 	.word	0x0801ba44
 8016bac:	2001de80 	.word	0x2001de80
 8016bb0:	0801ba64 	.word	0x0801ba64

08016bb4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b08a      	sub	sp, #40	@ 0x28
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016bd2:	4b28      	ldr	r3, [pc, #160]	@ (8016c74 <ip_reass_remove_oldest_datagram+0xc0>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016bd8:	e030      	b.n	8016c3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bdc:	695a      	ldr	r2, [r3, #20]
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	68db      	ldr	r3, [r3, #12]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d10c      	bne.n	8016c00 <ip_reass_remove_oldest_datagram+0x4c>
 8016be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be8:	699a      	ldr	r2, [r3, #24]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	691b      	ldr	r3, [r3, #16]
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d106      	bne.n	8016c00 <ip_reass_remove_oldest_datagram+0x4c>
 8016bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bf4:	899a      	ldrh	r2, [r3, #12]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	889b      	ldrh	r3, [r3, #4]
 8016bfa:	b29b      	uxth	r3, r3
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d014      	beq.n	8016c2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	3301      	adds	r3, #1
 8016c04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016c06:	6a3b      	ldr	r3, [r7, #32]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d104      	bne.n	8016c16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	61bb      	str	r3, [r7, #24]
 8016c14:	e009      	b.n	8016c2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c18:	7fda      	ldrb	r2, [r3, #31]
 8016c1a:	6a3b      	ldr	r3, [r7, #32]
 8016c1c:	7fdb      	ldrb	r3, [r3, #31]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d803      	bhi.n	8016c2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d001      	beq.n	8016c36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d1cb      	bne.n	8016bda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016c42:	6a3b      	ldr	r3, [r7, #32]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d008      	beq.n	8016c5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016c48:	69b9      	ldr	r1, [r7, #24]
 8016c4a:	6a38      	ldr	r0, [r7, #32]
 8016c4c:	f7ff ff0e 	bl	8016a6c <ip_reass_free_complete_datagram>
 8016c50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016c52:	697a      	ldr	r2, [r7, #20]
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	4413      	add	r3, r2
 8016c58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016c5a:	697a      	ldr	r2, [r7, #20]
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	da02      	bge.n	8016c68 <ip_reass_remove_oldest_datagram+0xb4>
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	2b01      	cmp	r3, #1
 8016c66:	dcac      	bgt.n	8016bc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016c68:	697b      	ldr	r3, [r7, #20]
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3728      	adds	r7, #40	@ 0x28
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	2001de7c 	.word	0x2001de7c

08016c78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c82:	2004      	movs	r0, #4
 8016c84:	f7f4 f980 	bl	800af88 <memp_malloc>
 8016c88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d110      	bne.n	8016cb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016c90:	6839      	ldr	r1, [r7, #0]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f7ff ff8e 	bl	8016bb4 <ip_reass_remove_oldest_datagram>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	dc03      	bgt.n	8016ca8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016ca0:	2004      	movs	r0, #4
 8016ca2:	f7f4 f971 	bl	800af88 <memp_malloc>
 8016ca6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d101      	bne.n	8016cb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	e016      	b.n	8016ce0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016cb2:	2220      	movs	r2, #32
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	68f8      	ldr	r0, [r7, #12]
 8016cb8:	f001 f83b 	bl	8017d32 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	220f      	movs	r2, #15
 8016cc0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016cc2:	4b09      	ldr	r3, [pc, #36]	@ (8016ce8 <ip_reass_enqueue_new_datagram+0x70>)
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016cca:	4a07      	ldr	r2, [pc, #28]	@ (8016ce8 <ip_reass_enqueue_new_datagram+0x70>)
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	3308      	adds	r3, #8
 8016cd4:	2214      	movs	r2, #20
 8016cd6:	6879      	ldr	r1, [r7, #4]
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f001 f8fe 	bl	8017eda <memcpy>
  return ipr;
 8016cde:	68fb      	ldr	r3, [r7, #12]
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3710      	adds	r7, #16
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	2001de7c 	.word	0x2001de7c

08016cec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016cf6:	4b10      	ldr	r3, [pc, #64]	@ (8016d38 <ip_reass_dequeue_datagram+0x4c>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d104      	bne.n	8016d0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	4a0c      	ldr	r2, [pc, #48]	@ (8016d38 <ip_reass_dequeue_datagram+0x4c>)
 8016d06:	6013      	str	r3, [r2, #0]
 8016d08:	e00d      	b.n	8016d26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d106      	bne.n	8016d1e <ip_reass_dequeue_datagram+0x32>
 8016d10:	4b0a      	ldr	r3, [pc, #40]	@ (8016d3c <ip_reass_dequeue_datagram+0x50>)
 8016d12:	f240 1245 	movw	r2, #325	@ 0x145
 8016d16:	490a      	ldr	r1, [pc, #40]	@ (8016d40 <ip_reass_dequeue_datagram+0x54>)
 8016d18:	480a      	ldr	r0, [pc, #40]	@ (8016d44 <ip_reass_dequeue_datagram+0x58>)
 8016d1a:	f000 ffa5 	bl	8017c68 <iprintf>
    prev->next = ipr->next;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681a      	ldr	r2, [r3, #0]
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016d26:	6879      	ldr	r1, [r7, #4]
 8016d28:	2004      	movs	r0, #4
 8016d2a:	f7f4 f9a3 	bl	800b074 <memp_free>
}
 8016d2e:	bf00      	nop
 8016d30:	3708      	adds	r7, #8
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	2001de7c 	.word	0x2001de7c
 8016d3c:	0801b9c0 	.word	0x0801b9c0
 8016d40:	0801ba88 	.word	0x0801ba88
 8016d44:	0801ba08 	.word	0x0801ba08

08016d48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b08c      	sub	sp, #48	@ 0x30
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016d54:	2300      	movs	r3, #0
 8016d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016d58:	2301      	movs	r3, #1
 8016d5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	685b      	ldr	r3, [r3, #4]
 8016d60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016d62:	69fb      	ldr	r3, [r7, #28]
 8016d64:	885b      	ldrh	r3, [r3, #2]
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7f3 fc51 	bl	800a610 <lwip_htons>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016d72:	69fb      	ldr	r3, [r7, #28]
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	f003 030f 	and.w	r3, r3, #15
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	009b      	lsls	r3, r3, #2
 8016d7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016d80:	7e7b      	ldrb	r3, [r7, #25]
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	8b7a      	ldrh	r2, [r7, #26]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d202      	bcs.n	8016d90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d8e:	e135      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016d90:	7e7b      	ldrb	r3, [r7, #25]
 8016d92:	b29b      	uxth	r3, r3
 8016d94:	8b7a      	ldrh	r2, [r7, #26]
 8016d96:	1ad3      	subs	r3, r2, r3
 8016d98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	88db      	ldrh	r3, [r3, #6]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f3 fc35 	bl	800a610 <lwip_htons>
 8016da6:	4603      	mov	r3, r0
 8016da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	00db      	lsls	r3, r3, #3
 8016db0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	685b      	ldr	r3, [r3, #4]
 8016db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dba:	2200      	movs	r2, #0
 8016dbc:	701a      	strb	r2, [r3, #0]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	705a      	strb	r2, [r3, #1]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	709a      	strb	r2, [r3, #2]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dcc:	8afa      	ldrh	r2, [r7, #22]
 8016dce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016dd0:	8afa      	ldrh	r2, [r7, #22]
 8016dd2:	8b7b      	ldrh	r3, [r7, #26]
 8016dd4:	4413      	add	r3, r2
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dde:	88db      	ldrh	r3, [r3, #6]
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	8afa      	ldrh	r2, [r7, #22]
 8016de4:	429a      	cmp	r2, r3
 8016de6:	d902      	bls.n	8016dee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016de8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dec:	e106      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	685b      	ldr	r3, [r3, #4]
 8016df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016df4:	e068      	b.n	8016ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df8:	685b      	ldr	r3, [r3, #4]
 8016dfa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfe:	889b      	ldrh	r3, [r3, #4]
 8016e00:	b29a      	uxth	r2, r3
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	889b      	ldrh	r3, [r3, #4]
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d235      	bcs.n	8016e78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d020      	beq.n	8016e5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e1a:	889b      	ldrh	r3, [r3, #4]
 8016e1c:	b29a      	uxth	r2, r3
 8016e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e20:	88db      	ldrh	r3, [r3, #6]
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d307      	bcc.n	8016e38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e2a:	88db      	ldrh	r3, [r3, #6]
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	693b      	ldr	r3, [r7, #16]
 8016e30:	889b      	ldrh	r3, [r3, #4]
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d902      	bls.n	8016e3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e38:	f04f 33ff 	mov.w	r3, #4294967295
 8016e3c:	e0de      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e40:	68ba      	ldr	r2, [r7, #8]
 8016e42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e46:	88db      	ldrh	r3, [r3, #6]
 8016e48:	b29a      	uxth	r2, r3
 8016e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e4c:	889b      	ldrh	r3, [r3, #4]
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d03d      	beq.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e54:	2300      	movs	r3, #0
 8016e56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016e58:	e03a      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e5c:	88db      	ldrh	r3, [r3, #6]
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	889b      	ldrh	r3, [r3, #4]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d902      	bls.n	8016e70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6e:	e0c5      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	68ba      	ldr	r2, [r7, #8]
 8016e74:	605a      	str	r2, [r3, #4]
      break;
 8016e76:	e02b      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e7a:	889b      	ldrh	r3, [r3, #4]
 8016e7c:	b29a      	uxth	r2, r3
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	889b      	ldrh	r3, [r3, #4]
 8016e82:	b29b      	uxth	r3, r3
 8016e84:	429a      	cmp	r2, r3
 8016e86:	d102      	bne.n	8016e8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e88:	f04f 33ff 	mov.w	r3, #4294967295
 8016e8c:	e0b6      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e90:	889b      	ldrh	r3, [r3, #4]
 8016e92:	b29a      	uxth	r2, r3
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	88db      	ldrh	r3, [r3, #6]
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d202      	bcs.n	8016ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016ea2:	e0ab      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d009      	beq.n	8016ebe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eac:	88db      	ldrh	r3, [r3, #6]
 8016eae:	b29a      	uxth	r2, r3
 8016eb0:	693b      	ldr	r3, [r7, #16]
 8016eb2:	889b      	ldrh	r3, [r3, #4]
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d001      	beq.n	8016ebe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d193      	bne.n	8016df6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016ece:	e000      	b.n	8016ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016ed0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d12d      	bne.n	8016f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d01c      	beq.n	8016f18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ee0:	88db      	ldrh	r3, [r3, #6]
 8016ee2:	b29a      	uxth	r2, r3
 8016ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ee6:	889b      	ldrh	r3, [r3, #4]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d906      	bls.n	8016efc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016eee:	4b45      	ldr	r3, [pc, #276]	@ (8017004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ef0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016ef4:	4944      	ldr	r1, [pc, #272]	@ (8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016ef6:	4845      	ldr	r0, [pc, #276]	@ (801700c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ef8:	f000 feb6 	bl	8017c68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016efe:	68ba      	ldr	r2, [r7, #8]
 8016f00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f04:	88db      	ldrh	r3, [r3, #6]
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f0a:	889b      	ldrh	r3, [r3, #4]
 8016f0c:	b29b      	uxth	r3, r3
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	d010      	beq.n	8016f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016f12:	2300      	movs	r3, #0
 8016f14:	623b      	str	r3, [r7, #32]
 8016f16:	e00d      	b.n	8016f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d006      	beq.n	8016f2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016f20:	4b38      	ldr	r3, [pc, #224]	@ (8017004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f22:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016f26:	493a      	ldr	r1, [pc, #232]	@ (8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016f28:	4838      	ldr	r0, [pc, #224]	@ (801700c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f2a:	f000 fe9d 	bl	8017c68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	68ba      	ldr	r2, [r7, #8]
 8016f32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d105      	bne.n	8016f46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	7f9b      	ldrb	r3, [r3, #30]
 8016f3e:	f003 0301 	and.w	r3, r3, #1
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d059      	beq.n	8016ffa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016f46:	6a3b      	ldr	r3, [r7, #32]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d04f      	beq.n	8016fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d006      	beq.n	8016f62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	889b      	ldrh	r3, [r3, #4]
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d002      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016f62:	2300      	movs	r3, #0
 8016f64:	623b      	str	r3, [r7, #32]
 8016f66:	e041      	b.n	8016fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016f72:	e012      	b.n	8016f9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f7c:	88db      	ldrh	r3, [r3, #6]
 8016f7e:	b29a      	uxth	r2, r3
 8016f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f82:	889b      	ldrh	r3, [r3, #4]
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	429a      	cmp	r2, r3
 8016f88:	d002      	beq.n	8016f90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	623b      	str	r3, [r7, #32]
            break;
 8016f8e:	e007      	b.n	8016fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f92:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d1e9      	bne.n	8016f74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016fa0:	6a3b      	ldr	r3, [r7, #32]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d022      	beq.n	8016fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d106      	bne.n	8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016fae:	4b15      	ldr	r3, [pc, #84]	@ (8017004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fb0:	f240 12df 	movw	r2, #479	@ 0x1df
 8016fb4:	4917      	ldr	r1, [pc, #92]	@ (8017014 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016fb6:	4815      	ldr	r0, [pc, #84]	@ (801700c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fb8:	f000 fe56 	bl	8017c68 <iprintf>
          LWIP_ASSERT("sanity check",
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d106      	bne.n	8016fd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8017004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016fce:	4911      	ldr	r1, [pc, #68]	@ (8017014 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016fd0:	480e      	ldr	r0, [pc, #56]	@ (801700c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fd2:	f000 fe49 	bl	8017c68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d006      	beq.n	8016fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016fde:	4b09      	ldr	r3, [pc, #36]	@ (8017004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fe0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016fe4:	490c      	ldr	r1, [pc, #48]	@ (8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016fe6:	4809      	ldr	r0, [pc, #36]	@ (801700c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fe8:	f000 fe3e 	bl	8017c68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016fec:	6a3b      	ldr	r3, [r7, #32]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	bf14      	ite	ne
 8016ff2:	2301      	movne	r3, #1
 8016ff4:	2300      	moveq	r3, #0
 8016ff6:	b2db      	uxtb	r3, r3
 8016ff8:	e000      	b.n	8016ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016ffa:	2300      	movs	r3, #0
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3730      	adds	r7, #48	@ 0x30
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	0801b9c0 	.word	0x0801b9c0
 8017008:	0801baa4 	.word	0x0801baa4
 801700c:	0801ba08 	.word	0x0801ba08
 8017010:	0801bac4 	.word	0x0801bac4
 8017014:	0801bafc 	.word	0x0801bafc
 8017018:	0801bb0c 	.word	0x0801bb0c

0801701c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b08e      	sub	sp, #56	@ 0x38
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	f003 030f 	and.w	r3, r3, #15
 8017032:	b2db      	uxtb	r3, r3
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	b2db      	uxtb	r3, r3
 8017038:	2b14      	cmp	r3, #20
 801703a:	f040 8171 	bne.w	8017320 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017040:	88db      	ldrh	r3, [r3, #6]
 8017042:	b29b      	uxth	r3, r3
 8017044:	4618      	mov	r0, r3
 8017046:	f7f3 fae3 	bl	800a610 <lwip_htons>
 801704a:	4603      	mov	r3, r0
 801704c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017050:	b29b      	uxth	r3, r3
 8017052:	00db      	lsls	r3, r3, #3
 8017054:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017058:	885b      	ldrh	r3, [r3, #2]
 801705a:	b29b      	uxth	r3, r3
 801705c:	4618      	mov	r0, r3
 801705e:	f7f3 fad7 	bl	800a610 <lwip_htons>
 8017062:	4603      	mov	r3, r0
 8017064:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017068:	781b      	ldrb	r3, [r3, #0]
 801706a:	f003 030f 	and.w	r3, r3, #15
 801706e:	b2db      	uxtb	r3, r3
 8017070:	009b      	lsls	r3, r3, #2
 8017072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8017076:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801707a:	b29b      	uxth	r3, r3
 801707c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801707e:	429a      	cmp	r2, r3
 8017080:	f0c0 8150 	bcc.w	8017324 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017084:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017088:	b29b      	uxth	r3, r3
 801708a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801708c:	1ad3      	subs	r3, r2, r3
 801708e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f7f4 fffd 	bl	800c090 <pbuf_clen>
 8017096:	4603      	mov	r3, r0
 8017098:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801709a:	4b8c      	ldr	r3, [pc, #560]	@ (80172cc <ip4_reass+0x2b0>)
 801709c:	881b      	ldrh	r3, [r3, #0]
 801709e:	461a      	mov	r2, r3
 80170a0:	8c3b      	ldrh	r3, [r7, #32]
 80170a2:	4413      	add	r3, r2
 80170a4:	2b0a      	cmp	r3, #10
 80170a6:	dd10      	ble.n	80170ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80170a8:	8c3b      	ldrh	r3, [r7, #32]
 80170aa:	4619      	mov	r1, r3
 80170ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170ae:	f7ff fd81 	bl	8016bb4 <ip_reass_remove_oldest_datagram>
 80170b2:	4603      	mov	r3, r0
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	f000 8137 	beq.w	8017328 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80170ba:	4b84      	ldr	r3, [pc, #528]	@ (80172cc <ip4_reass+0x2b0>)
 80170bc:	881b      	ldrh	r3, [r3, #0]
 80170be:	461a      	mov	r2, r3
 80170c0:	8c3b      	ldrh	r3, [r7, #32]
 80170c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80170c4:	2b0a      	cmp	r3, #10
 80170c6:	f300 812f 	bgt.w	8017328 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80170ca:	4b81      	ldr	r3, [pc, #516]	@ (80172d0 <ip4_reass+0x2b4>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80170d0:	e015      	b.n	80170fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80170d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170d4:	695a      	ldr	r2, [r3, #20]
 80170d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d10c      	bne.n	80170f8 <ip4_reass+0xdc>
 80170de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170e0:	699a      	ldr	r2, [r3, #24]
 80170e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170e4:	691b      	ldr	r3, [r3, #16]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d106      	bne.n	80170f8 <ip4_reass+0xdc>
 80170ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ec:	899a      	ldrh	r2, [r3, #12]
 80170ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f0:	889b      	ldrh	r3, [r3, #4]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d006      	beq.n	8017106 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80170f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80170fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017100:	2b00      	cmp	r3, #0
 8017102:	d1e6      	bne.n	80170d2 <ip4_reass+0xb6>
 8017104:	e000      	b.n	8017108 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017106:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710a:	2b00      	cmp	r3, #0
 801710c:	d109      	bne.n	8017122 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801710e:	8c3b      	ldrh	r3, [r7, #32]
 8017110:	4619      	mov	r1, r3
 8017112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017114:	f7ff fdb0 	bl	8016c78 <ip_reass_enqueue_new_datagram>
 8017118:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801711c:	2b00      	cmp	r3, #0
 801711e:	d11c      	bne.n	801715a <ip4_reass+0x13e>
      goto nullreturn;
 8017120:	e105      	b.n	801732e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017124:	88db      	ldrh	r3, [r3, #6]
 8017126:	b29b      	uxth	r3, r3
 8017128:	4618      	mov	r0, r3
 801712a:	f7f3 fa71 	bl	800a610 <lwip_htons>
 801712e:	4603      	mov	r3, r0
 8017130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017134:	2b00      	cmp	r3, #0
 8017136:	d110      	bne.n	801715a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801713a:	89db      	ldrh	r3, [r3, #14]
 801713c:	4618      	mov	r0, r3
 801713e:	f7f3 fa67 	bl	800a610 <lwip_htons>
 8017142:	4603      	mov	r3, r0
 8017144:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017148:	2b00      	cmp	r3, #0
 801714a:	d006      	beq.n	801715a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801714e:	3308      	adds	r3, #8
 8017150:	2214      	movs	r2, #20
 8017152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017154:	4618      	mov	r0, r3
 8017156:	f000 fec0 	bl	8017eda <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801715c:	88db      	ldrh	r3, [r3, #6]
 801715e:	b29b      	uxth	r3, r3
 8017160:	f003 0320 	and.w	r3, r3, #32
 8017164:	2b00      	cmp	r3, #0
 8017166:	bf0c      	ite	eq
 8017168:	2301      	moveq	r3, #1
 801716a:	2300      	movne	r3, #0
 801716c:	b2db      	uxtb	r3, r3
 801716e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d00e      	beq.n	8017194 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017176:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801717a:	4413      	add	r3, r2
 801717c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801717e:	8b7a      	ldrh	r2, [r7, #26]
 8017180:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017182:	429a      	cmp	r2, r3
 8017184:	f0c0 80a0 	bcc.w	80172c8 <ip4_reass+0x2ac>
 8017188:	8b7b      	ldrh	r3, [r7, #26]
 801718a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801718e:	4293      	cmp	r3, r2
 8017190:	f200 809a 	bhi.w	80172c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017194:	69fa      	ldr	r2, [r7, #28]
 8017196:	6879      	ldr	r1, [r7, #4]
 8017198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801719a:	f7ff fdd5 	bl	8016d48 <ip_reass_chain_frag_into_datagram_and_validate>
 801719e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171a6:	f000 809b 	beq.w	80172e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80171aa:	4b48      	ldr	r3, [pc, #288]	@ (80172cc <ip4_reass+0x2b0>)
 80171ac:	881a      	ldrh	r2, [r3, #0]
 80171ae:	8c3b      	ldrh	r3, [r7, #32]
 80171b0:	4413      	add	r3, r2
 80171b2:	b29a      	uxth	r2, r3
 80171b4:	4b45      	ldr	r3, [pc, #276]	@ (80172cc <ip4_reass+0x2b0>)
 80171b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d00d      	beq.n	80171da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80171be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80171c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80171c2:	4413      	add	r3, r2
 80171c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80171c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c8:	8a7a      	ldrh	r2, [r7, #18]
 80171ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80171cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171ce:	7f9b      	ldrb	r3, [r3, #30]
 80171d0:	f043 0301 	orr.w	r3, r3, #1
 80171d4:	b2da      	uxtb	r2, r3
 80171d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80171da:	697b      	ldr	r3, [r7, #20]
 80171dc:	2b01      	cmp	r3, #1
 80171de:	d171      	bne.n	80172c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80171e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171e2:	8b9b      	ldrh	r3, [r3, #28]
 80171e4:	3314      	adds	r3, #20
 80171e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80171e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171ea:	685b      	ldr	r3, [r3, #4]
 80171ec:	685b      	ldr	r3, [r3, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80171f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80171fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171fc:	3308      	adds	r3, #8
 80171fe:	2214      	movs	r2, #20
 8017200:	4619      	mov	r1, r3
 8017202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017204:	f000 fe69 	bl	8017eda <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017208:	8a3b      	ldrh	r3, [r7, #16]
 801720a:	4618      	mov	r0, r3
 801720c:	f7f3 fa00 	bl	800a610 <lwip_htons>
 8017210:	4603      	mov	r3, r0
 8017212:	461a      	mov	r2, r3
 8017214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017216:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801721a:	2200      	movs	r2, #0
 801721c:	719a      	strb	r2, [r3, #6]
 801721e:	2200      	movs	r2, #0
 8017220:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017224:	2200      	movs	r2, #0
 8017226:	729a      	strb	r2, [r3, #10]
 8017228:	2200      	movs	r2, #0
 801722a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017232:	e00d      	b.n	8017250 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017236:	685b      	ldr	r3, [r3, #4]
 8017238:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801723a:	2114      	movs	r1, #20
 801723c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801723e:	f7f4 fe13 	bl	800be68 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017242:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017244:	6878      	ldr	r0, [r7, #4]
 8017246:	f7f4 ff63 	bl	800c110 <pbuf_cat>
      r = iprh->next_pbuf;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017252:	2b00      	cmp	r3, #0
 8017254:	d1ee      	bne.n	8017234 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017256:	4b1e      	ldr	r3, [pc, #120]	@ (80172d0 <ip4_reass+0x2b4>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801725c:	429a      	cmp	r2, r3
 801725e:	d102      	bne.n	8017266 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017260:	2300      	movs	r3, #0
 8017262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017264:	e010      	b.n	8017288 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017266:	4b1a      	ldr	r3, [pc, #104]	@ (80172d0 <ip4_reass+0x2b4>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801726c:	e007      	b.n	801727e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801726e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017274:	429a      	cmp	r2, r3
 8017276:	d006      	beq.n	8017286 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017280:	2b00      	cmp	r3, #0
 8017282:	d1f4      	bne.n	801726e <ip4_reass+0x252>
 8017284:	e000      	b.n	8017288 <ip4_reass+0x26c>
          break;
 8017286:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017288:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801728a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801728c:	f7ff fd2e 	bl	8016cec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f7f4 fefd 	bl	800c090 <pbuf_clen>
 8017296:	4603      	mov	r3, r0
 8017298:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801729a:	4b0c      	ldr	r3, [pc, #48]	@ (80172cc <ip4_reass+0x2b0>)
 801729c:	881b      	ldrh	r3, [r3, #0]
 801729e:	8c3a      	ldrh	r2, [r7, #32]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d906      	bls.n	80172b2 <ip4_reass+0x296>
 80172a4:	4b0b      	ldr	r3, [pc, #44]	@ (80172d4 <ip4_reass+0x2b8>)
 80172a6:	f240 229b 	movw	r2, #667	@ 0x29b
 80172aa:	490b      	ldr	r1, [pc, #44]	@ (80172d8 <ip4_reass+0x2bc>)
 80172ac:	480b      	ldr	r0, [pc, #44]	@ (80172dc <ip4_reass+0x2c0>)
 80172ae:	f000 fcdb 	bl	8017c68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80172b2:	4b06      	ldr	r3, [pc, #24]	@ (80172cc <ip4_reass+0x2b0>)
 80172b4:	881a      	ldrh	r2, [r3, #0]
 80172b6:	8c3b      	ldrh	r3, [r7, #32]
 80172b8:	1ad3      	subs	r3, r2, r3
 80172ba:	b29a      	uxth	r2, r3
 80172bc:	4b03      	ldr	r3, [pc, #12]	@ (80172cc <ip4_reass+0x2b0>)
 80172be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	e038      	b.n	8017336 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80172c4:	2300      	movs	r3, #0
 80172c6:	e036      	b.n	8017336 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80172c8:	bf00      	nop
 80172ca:	e00a      	b.n	80172e2 <ip4_reass+0x2c6>
 80172cc:	2001de80 	.word	0x2001de80
 80172d0:	2001de7c 	.word	0x2001de7c
 80172d4:	0801b9c0 	.word	0x0801b9c0
 80172d8:	0801bb30 	.word	0x0801bb30
 80172dc:	0801ba08 	.word	0x0801ba08
    goto nullreturn_ipr;
 80172e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80172e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d106      	bne.n	80172f6 <ip4_reass+0x2da>
 80172e8:	4b15      	ldr	r3, [pc, #84]	@ (8017340 <ip4_reass+0x324>)
 80172ea:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80172ee:	4915      	ldr	r1, [pc, #84]	@ (8017344 <ip4_reass+0x328>)
 80172f0:	4815      	ldr	r0, [pc, #84]	@ (8017348 <ip4_reass+0x32c>)
 80172f2:	f000 fcb9 	bl	8017c68 <iprintf>
  if (ipr->p == NULL) {
 80172f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d116      	bne.n	801732c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80172fe:	4b13      	ldr	r3, [pc, #76]	@ (801734c <ip4_reass+0x330>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017304:	429a      	cmp	r2, r3
 8017306:	d006      	beq.n	8017316 <ip4_reass+0x2fa>
 8017308:	4b0d      	ldr	r3, [pc, #52]	@ (8017340 <ip4_reass+0x324>)
 801730a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801730e:	4910      	ldr	r1, [pc, #64]	@ (8017350 <ip4_reass+0x334>)
 8017310:	480d      	ldr	r0, [pc, #52]	@ (8017348 <ip4_reass+0x32c>)
 8017312:	f000 fca9 	bl	8017c68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017316:	2100      	movs	r1, #0
 8017318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801731a:	f7ff fce7 	bl	8016cec <ip_reass_dequeue_datagram>
 801731e:	e006      	b.n	801732e <ip4_reass+0x312>
    goto nullreturn;
 8017320:	bf00      	nop
 8017322:	e004      	b.n	801732e <ip4_reass+0x312>
    goto nullreturn;
 8017324:	bf00      	nop
 8017326:	e002      	b.n	801732e <ip4_reass+0x312>
      goto nullreturn;
 8017328:	bf00      	nop
 801732a:	e000      	b.n	801732e <ip4_reass+0x312>
  }

nullreturn:
 801732c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f7f4 fe20 	bl	800bf74 <pbuf_free>
  return NULL;
 8017334:	2300      	movs	r3, #0
}
 8017336:	4618      	mov	r0, r3
 8017338:	3738      	adds	r7, #56	@ 0x38
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop
 8017340:	0801b9c0 	.word	0x0801b9c0
 8017344:	0801bb4c 	.word	0x0801bb4c
 8017348:	0801ba08 	.word	0x0801ba08
 801734c:	2001de7c 	.word	0x2001de7c
 8017350:	0801bb58 	.word	0x0801bb58

08017354 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017358:	2005      	movs	r0, #5
 801735a:	f7f3 fe15 	bl	800af88 <memp_malloc>
 801735e:	4603      	mov	r3, r0
}
 8017360:	4618      	mov	r0, r3
 8017362:	bd80      	pop	{r7, pc}

08017364 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d106      	bne.n	8017380 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017372:	4b07      	ldr	r3, [pc, #28]	@ (8017390 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017374:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8017378:	4906      	ldr	r1, [pc, #24]	@ (8017394 <ip_frag_free_pbuf_custom_ref+0x30>)
 801737a:	4807      	ldr	r0, [pc, #28]	@ (8017398 <ip_frag_free_pbuf_custom_ref+0x34>)
 801737c:	f000 fc74 	bl	8017c68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017380:	6879      	ldr	r1, [r7, #4]
 8017382:	2005      	movs	r0, #5
 8017384:	f7f3 fe76 	bl	800b074 <memp_free>
}
 8017388:	bf00      	nop
 801738a:	3708      	adds	r7, #8
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}
 8017390:	0801b9c0 	.word	0x0801b9c0
 8017394:	0801bb78 	.word	0x0801bb78
 8017398:	0801ba08 	.word	0x0801ba08

0801739c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b084      	sub	sp, #16
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d106      	bne.n	80173bc <ipfrag_free_pbuf_custom+0x20>
 80173ae:	4b11      	ldr	r3, [pc, #68]	@ (80173f4 <ipfrag_free_pbuf_custom+0x58>)
 80173b0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80173b4:	4910      	ldr	r1, [pc, #64]	@ (80173f8 <ipfrag_free_pbuf_custom+0x5c>)
 80173b6:	4811      	ldr	r0, [pc, #68]	@ (80173fc <ipfrag_free_pbuf_custom+0x60>)
 80173b8:	f000 fc56 	bl	8017c68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80173bc:	68fa      	ldr	r2, [r7, #12]
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d006      	beq.n	80173d2 <ipfrag_free_pbuf_custom+0x36>
 80173c4:	4b0b      	ldr	r3, [pc, #44]	@ (80173f4 <ipfrag_free_pbuf_custom+0x58>)
 80173c6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80173ca:	490d      	ldr	r1, [pc, #52]	@ (8017400 <ipfrag_free_pbuf_custom+0x64>)
 80173cc:	480b      	ldr	r0, [pc, #44]	@ (80173fc <ipfrag_free_pbuf_custom+0x60>)
 80173ce:	f000 fc4b 	bl	8017c68 <iprintf>
  if (pcr->original != NULL) {
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	695b      	ldr	r3, [r3, #20]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d004      	beq.n	80173e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	695b      	ldr	r3, [r3, #20]
 80173de:	4618      	mov	r0, r3
 80173e0:	f7f4 fdc8 	bl	800bf74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80173e4:	68f8      	ldr	r0, [r7, #12]
 80173e6:	f7ff ffbd 	bl	8017364 <ip_frag_free_pbuf_custom_ref>
}
 80173ea:	bf00      	nop
 80173ec:	3710      	adds	r7, #16
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	0801b9c0 	.word	0x0801b9c0
 80173f8:	0801bb84 	.word	0x0801bb84
 80173fc:	0801ba08 	.word	0x0801ba08
 8017400:	0801bb90 	.word	0x0801bb90

08017404 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b094      	sub	sp, #80	@ 0x50
 8017408:	af02      	add	r7, sp, #8
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017410:	2300      	movs	r3, #0
 8017412:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017416:	68bb      	ldr	r3, [r7, #8]
 8017418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801741a:	3b14      	subs	r3, #20
 801741c:	2b00      	cmp	r3, #0
 801741e:	da00      	bge.n	8017422 <ip4_frag+0x1e>
 8017420:	3307      	adds	r3, #7
 8017422:	10db      	asrs	r3, r3, #3
 8017424:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017426:	2314      	movs	r3, #20
 8017428:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017432:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	f003 030f 	and.w	r3, r3, #15
 801743c:	b2db      	uxtb	r3, r3
 801743e:	009b      	lsls	r3, r3, #2
 8017440:	b2db      	uxtb	r3, r3
 8017442:	2b14      	cmp	r3, #20
 8017444:	d002      	beq.n	801744c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017446:	f06f 0305 	mvn.w	r3, #5
 801744a:	e110      	b.n	801766e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	895b      	ldrh	r3, [r3, #10]
 8017450:	2b13      	cmp	r3, #19
 8017452:	d809      	bhi.n	8017468 <ip4_frag+0x64>
 8017454:	4b88      	ldr	r3, [pc, #544]	@ (8017678 <ip4_frag+0x274>)
 8017456:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801745a:	4988      	ldr	r1, [pc, #544]	@ (801767c <ip4_frag+0x278>)
 801745c:	4888      	ldr	r0, [pc, #544]	@ (8017680 <ip4_frag+0x27c>)
 801745e:	f000 fc03 	bl	8017c68 <iprintf>
 8017462:	f06f 0305 	mvn.w	r3, #5
 8017466:	e102      	b.n	801766e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801746a:	88db      	ldrh	r3, [r3, #6]
 801746c:	b29b      	uxth	r3, r3
 801746e:	4618      	mov	r0, r3
 8017470:	f7f3 f8ce 	bl	800a610 <lwip_htons>
 8017474:	4603      	mov	r3, r0
 8017476:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017478:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801747a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801747e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017482:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017488:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	891b      	ldrh	r3, [r3, #8]
 801748e:	3b14      	subs	r3, #20
 8017490:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017494:	e0e1      	b.n	801765a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017496:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017498:	00db      	lsls	r3, r3, #3
 801749a:	b29b      	uxth	r3, r3
 801749c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80174a0:	4293      	cmp	r3, r2
 80174a2:	bf28      	it	cs
 80174a4:	4613      	movcs	r3, r2
 80174a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80174a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80174ac:	2114      	movs	r1, #20
 80174ae:	200e      	movs	r0, #14
 80174b0:	f7f4 fa7e 	bl	800b9b0 <pbuf_alloc>
 80174b4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80174b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	f000 80d5 	beq.w	8017668 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80174be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c0:	895b      	ldrh	r3, [r3, #10]
 80174c2:	2b13      	cmp	r3, #19
 80174c4:	d806      	bhi.n	80174d4 <ip4_frag+0xd0>
 80174c6:	4b6c      	ldr	r3, [pc, #432]	@ (8017678 <ip4_frag+0x274>)
 80174c8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80174cc:	496d      	ldr	r1, [pc, #436]	@ (8017684 <ip4_frag+0x280>)
 80174ce:	486c      	ldr	r0, [pc, #432]	@ (8017680 <ip4_frag+0x27c>)
 80174d0:	f000 fbca 	bl	8017c68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80174d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174d6:	685b      	ldr	r3, [r3, #4]
 80174d8:	2214      	movs	r2, #20
 80174da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80174dc:	4618      	mov	r0, r3
 80174de:	f000 fcfc 	bl	8017eda <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80174e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e4:	685b      	ldr	r3, [r3, #4]
 80174e6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80174e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80174ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80174ee:	e064      	b.n	80175ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	895a      	ldrh	r2, [r3, #10]
 80174f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80174f6:	1ad3      	subs	r3, r2, r3
 80174f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	895b      	ldrh	r3, [r3, #10]
 80174fe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017500:	429a      	cmp	r2, r3
 8017502:	d906      	bls.n	8017512 <ip4_frag+0x10e>
 8017504:	4b5c      	ldr	r3, [pc, #368]	@ (8017678 <ip4_frag+0x274>)
 8017506:	f240 322d 	movw	r2, #813	@ 0x32d
 801750a:	495f      	ldr	r1, [pc, #380]	@ (8017688 <ip4_frag+0x284>)
 801750c:	485c      	ldr	r0, [pc, #368]	@ (8017680 <ip4_frag+0x27c>)
 801750e:	f000 fbab 	bl	8017c68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017512:	8bfa      	ldrh	r2, [r7, #30]
 8017514:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017518:	4293      	cmp	r3, r2
 801751a:	bf28      	it	cs
 801751c:	4613      	movcs	r3, r2
 801751e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017526:	2b00      	cmp	r3, #0
 8017528:	d105      	bne.n	8017536 <ip4_frag+0x132>
        poff = 0;
 801752a:	2300      	movs	r3, #0
 801752c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	60fb      	str	r3, [r7, #12]
        continue;
 8017534:	e041      	b.n	80175ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017536:	f7ff ff0d 	bl	8017354 <ip_frag_alloc_pbuf_custom_ref>
 801753a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d103      	bne.n	801754a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017542:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017544:	f7f4 fd16 	bl	800bf74 <pbuf_free>
        goto memerr;
 8017548:	e08f      	b.n	801766a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801754a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017550:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017552:	4413      	add	r3, r2
 8017554:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017558:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801755c:	9201      	str	r2, [sp, #4]
 801755e:	9300      	str	r3, [sp, #0]
 8017560:	4603      	mov	r3, r0
 8017562:	2241      	movs	r2, #65	@ 0x41
 8017564:	2000      	movs	r0, #0
 8017566:	f7f4 fb4d 	bl	800bc04 <pbuf_alloced_custom>
 801756a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d106      	bne.n	8017580 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017572:	69b8      	ldr	r0, [r7, #24]
 8017574:	f7ff fef6 	bl	8017364 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017578:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801757a:	f7f4 fcfb 	bl	800bf74 <pbuf_free>
        goto memerr;
 801757e:	e074      	b.n	801766a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f7f4 fd9d 	bl	800c0c0 <pbuf_ref>
      pcr->original = p;
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	68fa      	ldr	r2, [r7, #12]
 801758a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	4a3f      	ldr	r2, [pc, #252]	@ (801768c <ip4_frag+0x288>)
 8017590:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017592:	6979      	ldr	r1, [r7, #20]
 8017594:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017596:	f7f4 fdbb 	bl	800c110 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801759a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801759e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80175a2:	1ad3      	subs	r3, r2, r3
 80175a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80175a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d004      	beq.n	80175ba <ip4_frag+0x1b6>
        poff = 0;
 80175b0:	2300      	movs	r3, #0
 80175b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80175ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d196      	bne.n	80174f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80175c2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80175c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80175c8:	4413      	add	r3, r2
 80175ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80175cc:	68bb      	ldr	r3, [r7, #8]
 80175ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80175d0:	f1a3 0213 	sub.w	r2, r3, #19
 80175d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80175d8:	429a      	cmp	r2, r3
 80175da:	bfcc      	ite	gt
 80175dc:	2301      	movgt	r3, #1
 80175de:	2300      	movle	r3, #0
 80175e0:	b2db      	uxtb	r3, r3
 80175e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80175e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80175e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80175ee:	6a3b      	ldr	r3, [r7, #32]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d002      	beq.n	80175fa <ip4_frag+0x1f6>
 80175f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d003      	beq.n	8017602 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80175fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80175fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017600:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017602:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017604:	4618      	mov	r0, r3
 8017606:	f7f3 f803 	bl	800a610 <lwip_htons>
 801760a:	4603      	mov	r3, r0
 801760c:	461a      	mov	r2, r3
 801760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017610:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017612:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017614:	3314      	adds	r3, #20
 8017616:	b29b      	uxth	r3, r3
 8017618:	4618      	mov	r0, r3
 801761a:	f7f2 fff9 	bl	800a610 <lwip_htons>
 801761e:	4603      	mov	r3, r0
 8017620:	461a      	mov	r2, r3
 8017622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017624:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017628:	2200      	movs	r2, #0
 801762a:	729a      	strb	r2, [r3, #10]
 801762c:	2200      	movs	r2, #0
 801762e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	695b      	ldr	r3, [r3, #20]
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017638:	68b8      	ldr	r0, [r7, #8]
 801763a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801763c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801763e:	f7f4 fc99 	bl	800bf74 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017642:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017646:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017648:	1ad3      	subs	r3, r2, r3
 801764a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801764e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017652:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017654:	4413      	add	r3, r2
 8017656:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801765a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801765e:	2b00      	cmp	r3, #0
 8017660:	f47f af19 	bne.w	8017496 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017664:	2300      	movs	r3, #0
 8017666:	e002      	b.n	801766e <ip4_frag+0x26a>
      goto memerr;
 8017668:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801766a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801766e:	4618      	mov	r0, r3
 8017670:	3748      	adds	r7, #72	@ 0x48
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	0801b9c0 	.word	0x0801b9c0
 801767c:	0801bb9c 	.word	0x0801bb9c
 8017680:	0801ba08 	.word	0x0801ba08
 8017684:	0801bbb8 	.word	0x0801bbb8
 8017688:	0801bbd8 	.word	0x0801bbd8
 801768c:	0801739d 	.word	0x0801739d

08017690 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b086      	sub	sp, #24
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801769a:	230e      	movs	r3, #14
 801769c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	895b      	ldrh	r3, [r3, #10]
 80176a2:	2b0e      	cmp	r3, #14
 80176a4:	d96e      	bls.n	8017784 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	7bdb      	ldrb	r3, [r3, #15]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d106      	bne.n	80176bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80176b4:	3301      	adds	r3, #1
 80176b6:	b2da      	uxtb	r2, r3
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	7b1a      	ldrb	r2, [r3, #12]
 80176c6:	7b5b      	ldrb	r3, [r3, #13]
 80176c8:	021b      	lsls	r3, r3, #8
 80176ca:	4313      	orrs	r3, r2
 80176cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	f003 0301 	and.w	r3, r3, #1
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d023      	beq.n	8017722 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d10f      	bne.n	8017702 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	785b      	ldrb	r3, [r3, #1]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d11b      	bne.n	8017722 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80176ea:	693b      	ldr	r3, [r7, #16]
 80176ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80176ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80176f0:	d117      	bne.n	8017722 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	7b5b      	ldrb	r3, [r3, #13]
 80176f6:	f043 0310 	orr.w	r3, r3, #16
 80176fa:	b2da      	uxtb	r2, r3
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	735a      	strb	r2, [r3, #13]
 8017700:	e00f      	b.n	8017722 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017702:	693b      	ldr	r3, [r7, #16]
 8017704:	2206      	movs	r2, #6
 8017706:	4928      	ldr	r1, [pc, #160]	@ (80177a8 <ethernet_input+0x118>)
 8017708:	4618      	mov	r0, r3
 801770a:	f000 fb02 	bl	8017d12 <memcmp>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d106      	bne.n	8017722 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	7b5b      	ldrb	r3, [r3, #13]
 8017718:	f043 0308 	orr.w	r3, r3, #8
 801771c:	b2da      	uxtb	r2, r3
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017722:	89fb      	ldrh	r3, [r7, #14]
 8017724:	2b08      	cmp	r3, #8
 8017726:	d003      	beq.n	8017730 <ethernet_input+0xa0>
 8017728:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801772c:	d014      	beq.n	8017758 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801772e:	e032      	b.n	8017796 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017736:	f003 0308 	and.w	r3, r3, #8
 801773a:	2b00      	cmp	r3, #0
 801773c:	d024      	beq.n	8017788 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801773e:	8afb      	ldrh	r3, [r7, #22]
 8017740:	4619      	mov	r1, r3
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7f4 fb90 	bl	800be68 <pbuf_remove_header>
 8017748:	4603      	mov	r3, r0
 801774a:	2b00      	cmp	r3, #0
 801774c:	d11e      	bne.n	801778c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801774e:	6839      	ldr	r1, [r7, #0]
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f7fe ff03 	bl	801655c <ip4_input>
      break;
 8017756:	e013      	b.n	8017780 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801775e:	f003 0308 	and.w	r3, r3, #8
 8017762:	2b00      	cmp	r3, #0
 8017764:	d014      	beq.n	8017790 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017766:	8afb      	ldrh	r3, [r7, #22]
 8017768:	4619      	mov	r1, r3
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f7f4 fb7c 	bl	800be68 <pbuf_remove_header>
 8017770:	4603      	mov	r3, r0
 8017772:	2b00      	cmp	r3, #0
 8017774:	d10e      	bne.n	8017794 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017776:	6839      	ldr	r1, [r7, #0]
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f7fe f89f 	bl	80158bc <etharp_input>
      break;
 801777e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017780:	2300      	movs	r3, #0
 8017782:	e00c      	b.n	801779e <ethernet_input+0x10e>
    goto free_and_return;
 8017784:	bf00      	nop
 8017786:	e006      	b.n	8017796 <ethernet_input+0x106>
        goto free_and_return;
 8017788:	bf00      	nop
 801778a:	e004      	b.n	8017796 <ethernet_input+0x106>
        goto free_and_return;
 801778c:	bf00      	nop
 801778e:	e002      	b.n	8017796 <ethernet_input+0x106>
        goto free_and_return;
 8017790:	bf00      	nop
 8017792:	e000      	b.n	8017796 <ethernet_input+0x106>
        goto free_and_return;
 8017794:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f7f4 fbec 	bl	800bf74 <pbuf_free>
  return ERR_OK;
 801779c:	2300      	movs	r3, #0
}
 801779e:	4618      	mov	r0, r3
 80177a0:	3718      	adds	r7, #24
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}
 80177a6:	bf00      	nop
 80177a8:	0801c408 	.word	0x0801c408

080177ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b086      	sub	sp, #24
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	60f8      	str	r0, [r7, #12]
 80177b4:	60b9      	str	r1, [r7, #8]
 80177b6:	607a      	str	r2, [r7, #4]
 80177b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80177ba:	8c3b      	ldrh	r3, [r7, #32]
 80177bc:	4618      	mov	r0, r3
 80177be:	f7f2 ff27 	bl	800a610 <lwip_htons>
 80177c2:	4603      	mov	r3, r0
 80177c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80177c6:	210e      	movs	r1, #14
 80177c8:	68b8      	ldr	r0, [r7, #8]
 80177ca:	f7f4 fb3d 	bl	800be48 <pbuf_add_header>
 80177ce:	4603      	mov	r3, r0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d125      	bne.n	8017820 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	685b      	ldr	r3, [r3, #4]
 80177d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80177da:	693b      	ldr	r3, [r7, #16]
 80177dc:	8afa      	ldrh	r2, [r7, #22]
 80177de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	2206      	movs	r2, #6
 80177e4:	6839      	ldr	r1, [r7, #0]
 80177e6:	4618      	mov	r0, r3
 80177e8:	f000 fb77 	bl	8017eda <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	3306      	adds	r3, #6
 80177f0:	2206      	movs	r2, #6
 80177f2:	6879      	ldr	r1, [r7, #4]
 80177f4:	4618      	mov	r0, r3
 80177f6:	f000 fb70 	bl	8017eda <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017800:	2b06      	cmp	r3, #6
 8017802:	d006      	beq.n	8017812 <ethernet_output+0x66>
 8017804:	4b0a      	ldr	r3, [pc, #40]	@ (8017830 <ethernet_output+0x84>)
 8017806:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801780a:	490a      	ldr	r1, [pc, #40]	@ (8017834 <ethernet_output+0x88>)
 801780c:	480a      	ldr	r0, [pc, #40]	@ (8017838 <ethernet_output+0x8c>)
 801780e:	f000 fa2b 	bl	8017c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	699b      	ldr	r3, [r3, #24]
 8017816:	68b9      	ldr	r1, [r7, #8]
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	4798      	blx	r3
 801781c:	4603      	mov	r3, r0
 801781e:	e002      	b.n	8017826 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017820:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017822:	f06f 0301 	mvn.w	r3, #1
}
 8017826:	4618      	mov	r0, r3
 8017828:	3718      	adds	r7, #24
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	0801bbe8 	.word	0x0801bbe8
 8017834:	0801bc20 	.word	0x0801bc20
 8017838:	0801bc54 	.word	0x0801bc54

0801783c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b086      	sub	sp, #24
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	60bb      	str	r3, [r7, #8]
 801784a:	2304      	movs	r3, #4
 801784c:	60fb      	str	r3, [r7, #12]
 801784e:	2300      	movs	r3, #0
 8017850:	613b      	str	r3, [r7, #16]
 8017852:	2300      	movs	r3, #0
 8017854:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017856:	f107 0308 	add.w	r3, r7, #8
 801785a:	2100      	movs	r1, #0
 801785c:	4618      	mov	r0, r3
 801785e:	f7ef fec7 	bl	80075f0 <osMessageCreate>
 8017862:	4602      	mov	r2, r0
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d102      	bne.n	8017876 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017870:	f04f 33ff 	mov.w	r3, #4294967295
 8017874:	e000      	b.n	8017878 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017876:	2300      	movs	r3, #0
}
 8017878:	4618      	mov	r0, r3
 801787a:	3718      	adds	r7, #24
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b084      	sub	sp, #16
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
 8017888:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	6839      	ldr	r1, [r7, #0]
 8017890:	2200      	movs	r2, #0
 8017892:	4618      	mov	r0, r3
 8017894:	f7ef fed4 	bl	8007640 <osMessagePut>
 8017898:	4603      	mov	r3, r0
 801789a:	2b00      	cmp	r3, #0
 801789c:	d102      	bne.n	80178a4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801789e:	2300      	movs	r3, #0
 80178a0:	73fb      	strb	r3, [r7, #15]
 80178a2:	e001      	b.n	80178a8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80178a4:	23ff      	movs	r3, #255	@ 0xff
 80178a6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80178a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3710      	adds	r7, #16
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b08c      	sub	sp, #48	@ 0x30
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	61f8      	str	r0, [r7, #28]
 80178bc:	61b9      	str	r1, [r7, #24]
 80178be:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80178c0:	f7ef fcc7 	bl	8007252 <osKernelSysTick>
 80178c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d017      	beq.n	80178fc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80178cc:	69fb      	ldr	r3, [r7, #28]
 80178ce:	6819      	ldr	r1, [r3, #0]
 80178d0:	f107 0320 	add.w	r3, r7, #32
 80178d4:	697a      	ldr	r2, [r7, #20]
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7ef fef2 	bl	80076c0 <osMessageGet>

    if(event.status == osEventMessage)
 80178dc:	6a3b      	ldr	r3, [r7, #32]
 80178de:	2b10      	cmp	r3, #16
 80178e0:	d109      	bne.n	80178f6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80178e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178e4:	461a      	mov	r2, r3
 80178e6:	69bb      	ldr	r3, [r7, #24]
 80178e8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80178ea:	f7ef fcb2 	bl	8007252 <osKernelSysTick>
 80178ee:	4602      	mov	r2, r0
 80178f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178f2:	1ad3      	subs	r3, r2, r3
 80178f4:	e019      	b.n	801792a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80178f6:	f04f 33ff 	mov.w	r3, #4294967295
 80178fa:	e016      	b.n	801792a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80178fc:	69fb      	ldr	r3, [r7, #28]
 80178fe:	6819      	ldr	r1, [r3, #0]
 8017900:	463b      	mov	r3, r7
 8017902:	f04f 32ff 	mov.w	r2, #4294967295
 8017906:	4618      	mov	r0, r3
 8017908:	f7ef feda 	bl	80076c0 <osMessageGet>
 801790c:	f107 0320 	add.w	r3, r7, #32
 8017910:	463a      	mov	r2, r7
 8017912:	ca07      	ldmia	r2, {r0, r1, r2}
 8017914:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801791a:	461a      	mov	r2, r3
 801791c:	69bb      	ldr	r3, [r7, #24]
 801791e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017920:	f7ef fc97 	bl	8007252 <osKernelSysTick>
 8017924:	4602      	mov	r2, r0
 8017926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017928:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801792a:	4618      	mov	r0, r3
 801792c:	3730      	adds	r7, #48	@ 0x30
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017932:	b480      	push	{r7}
 8017934:	b083      	sub	sp, #12
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d101      	bne.n	8017946 <sys_mbox_valid+0x14>
    return 0;
 8017942:	2300      	movs	r3, #0
 8017944:	e000      	b.n	8017948 <sys_mbox_valid+0x16>
  else
    return 1;
 8017946:	2301      	movs	r3, #1
}
 8017948:	4618      	mov	r0, r3
 801794a:	370c      	adds	r7, #12
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr

08017954 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017958:	4803      	ldr	r0, [pc, #12]	@ (8017968 <sys_init+0x14>)
 801795a:	f7ef fcf6 	bl	800734a <osMutexCreate>
 801795e:	4603      	mov	r3, r0
 8017960:	4a02      	ldr	r2, [pc, #8]	@ (801796c <sys_init+0x18>)
 8017962:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017964:	bf00      	nop
 8017966:	bd80      	pop	{r7, pc}
 8017968:	0801c418 	.word	0x0801c418
 801796c:	2001de84 	.word	0x2001de84

08017970 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017970:	b580      	push	{r7, lr}
 8017972:	b084      	sub	sp, #16
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017978:	2300      	movs	r3, #0
 801797a:	60bb      	str	r3, [r7, #8]
 801797c:	2300      	movs	r3, #0
 801797e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017980:	f107 0308 	add.w	r3, r7, #8
 8017984:	4618      	mov	r0, r3
 8017986:	f7ef fce0 	bl	800734a <osMutexCreate>
 801798a:	4602      	mov	r2, r0
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d102      	bne.n	801799e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017998:	f04f 33ff 	mov.w	r3, #4294967295
 801799c:	e000      	b.n	80179a0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801799e:	2300      	movs	r3, #0
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3710      	adds	r7, #16
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	f04f 31ff 	mov.w	r1, #4294967295
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7ef fcdf 	bl	800737c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80179be:	bf00      	nop
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}

080179c6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80179c6:	b580      	push	{r7, lr}
 80179c8:	b082      	sub	sp, #8
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7ef fd20 	bl	8007418 <osMutexRelease>
}
 80179d8:	bf00      	nop
 80179da:	3708      	adds	r7, #8
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b08c      	sub	sp, #48	@ 0x30
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	60b9      	str	r1, [r7, #8]
 80179ea:	607a      	str	r2, [r7, #4]
 80179ec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80179ee:	f107 0314 	add.w	r3, r7, #20
 80179f2:	2200      	movs	r2, #0
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	605a      	str	r2, [r3, #4]
 80179f8:	609a      	str	r2, [r3, #8]
 80179fa:	60da      	str	r2, [r3, #12]
 80179fc:	611a      	str	r2, [r3, #16]
 80179fe:	615a      	str	r2, [r3, #20]
 8017a00:	619a      	str	r2, [r3, #24]
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	617b      	str	r3, [r7, #20]
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	61bb      	str	r3, [r7, #24]
 8017a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a0c:	b21b      	sxth	r3, r3
 8017a0e:	83bb      	strh	r3, [r7, #28]
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017a14:	f107 0314 	add.w	r3, r7, #20
 8017a18:	6879      	ldr	r1, [r7, #4]
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7ef fc29 	bl	8007272 <osThreadCreate>
 8017a20:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017a22:	4618      	mov	r0, r3
 8017a24:	3730      	adds	r7, #48	@ 0x30
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
	...

08017a2c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017a30:	4b04      	ldr	r3, [pc, #16]	@ (8017a44 <sys_arch_protect+0x18>)
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	f04f 31ff 	mov.w	r1, #4294967295
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7ef fc9f 	bl	800737c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017a3e:	2301      	movs	r3, #1
}
 8017a40:	4618      	mov	r0, r3
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	2001de84 	.word	0x2001de84

08017a48 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017a50:	4b04      	ldr	r3, [pc, #16]	@ (8017a64 <sys_arch_unprotect+0x1c>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7ef fcdf 	bl	8007418 <osMutexRelease>
}
 8017a5a:	bf00      	nop
 8017a5c:	3708      	adds	r7, #8
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}
 8017a62:	bf00      	nop
 8017a64:	2001de84 	.word	0x2001de84

08017a68 <rand>:
 8017a68:	4b16      	ldr	r3, [pc, #88]	@ (8017ac4 <rand+0x5c>)
 8017a6a:	b510      	push	{r4, lr}
 8017a6c:	681c      	ldr	r4, [r3, #0]
 8017a6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a70:	b9b3      	cbnz	r3, 8017aa0 <rand+0x38>
 8017a72:	2018      	movs	r0, #24
 8017a74:	f000 faa8 	bl	8017fc8 <malloc>
 8017a78:	4602      	mov	r2, r0
 8017a7a:	6320      	str	r0, [r4, #48]	@ 0x30
 8017a7c:	b920      	cbnz	r0, 8017a88 <rand+0x20>
 8017a7e:	4b12      	ldr	r3, [pc, #72]	@ (8017ac8 <rand+0x60>)
 8017a80:	4812      	ldr	r0, [pc, #72]	@ (8017acc <rand+0x64>)
 8017a82:	2152      	movs	r1, #82	@ 0x52
 8017a84:	f000 fa38 	bl	8017ef8 <__assert_func>
 8017a88:	4911      	ldr	r1, [pc, #68]	@ (8017ad0 <rand+0x68>)
 8017a8a:	4b12      	ldr	r3, [pc, #72]	@ (8017ad4 <rand+0x6c>)
 8017a8c:	e9c0 1300 	strd	r1, r3, [r0]
 8017a90:	4b11      	ldr	r3, [pc, #68]	@ (8017ad8 <rand+0x70>)
 8017a92:	6083      	str	r3, [r0, #8]
 8017a94:	230b      	movs	r3, #11
 8017a96:	8183      	strh	r3, [r0, #12]
 8017a98:	2100      	movs	r1, #0
 8017a9a:	2001      	movs	r0, #1
 8017a9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017aa0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017aa2:	480e      	ldr	r0, [pc, #56]	@ (8017adc <rand+0x74>)
 8017aa4:	690b      	ldr	r3, [r1, #16]
 8017aa6:	694c      	ldr	r4, [r1, #20]
 8017aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8017ae0 <rand+0x78>)
 8017aaa:	4358      	muls	r0, r3
 8017aac:	fb02 0004 	mla	r0, r2, r4, r0
 8017ab0:	fba3 3202 	umull	r3, r2, r3, r2
 8017ab4:	3301      	adds	r3, #1
 8017ab6:	eb40 0002 	adc.w	r0, r0, r2
 8017aba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017abe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017ac2:	bd10      	pop	{r4, pc}
 8017ac4:	20000040 	.word	0x20000040
 8017ac8:	0801c420 	.word	0x0801c420
 8017acc:	0801c437 	.word	0x0801c437
 8017ad0:	abcd330e 	.word	0xabcd330e
 8017ad4:	e66d1234 	.word	0xe66d1234
 8017ad8:	0005deec 	.word	0x0005deec
 8017adc:	5851f42d 	.word	0x5851f42d
 8017ae0:	4c957f2d 	.word	0x4c957f2d

08017ae4 <std>:
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	b510      	push	{r4, lr}
 8017ae8:	4604      	mov	r4, r0
 8017aea:	e9c0 3300 	strd	r3, r3, [r0]
 8017aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017af2:	6083      	str	r3, [r0, #8]
 8017af4:	8181      	strh	r1, [r0, #12]
 8017af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8017af8:	81c2      	strh	r2, [r0, #14]
 8017afa:	6183      	str	r3, [r0, #24]
 8017afc:	4619      	mov	r1, r3
 8017afe:	2208      	movs	r2, #8
 8017b00:	305c      	adds	r0, #92	@ 0x5c
 8017b02:	f000 f916 	bl	8017d32 <memset>
 8017b06:	4b0d      	ldr	r3, [pc, #52]	@ (8017b3c <std+0x58>)
 8017b08:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8017b40 <std+0x5c>)
 8017b0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8017b44 <std+0x60>)
 8017b10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b12:	4b0d      	ldr	r3, [pc, #52]	@ (8017b48 <std+0x64>)
 8017b14:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b16:	4b0d      	ldr	r3, [pc, #52]	@ (8017b4c <std+0x68>)
 8017b18:	6224      	str	r4, [r4, #32]
 8017b1a:	429c      	cmp	r4, r3
 8017b1c:	d006      	beq.n	8017b2c <std+0x48>
 8017b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017b22:	4294      	cmp	r4, r2
 8017b24:	d002      	beq.n	8017b2c <std+0x48>
 8017b26:	33d0      	adds	r3, #208	@ 0xd0
 8017b28:	429c      	cmp	r4, r3
 8017b2a:	d105      	bne.n	8017b38 <std+0x54>
 8017b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b34:	f000 b9ce 	b.w	8017ed4 <__retarget_lock_init_recursive>
 8017b38:	bd10      	pop	{r4, pc}
 8017b3a:	bf00      	nop
 8017b3c:	08017c8d 	.word	0x08017c8d
 8017b40:	08017caf 	.word	0x08017caf
 8017b44:	08017ce7 	.word	0x08017ce7
 8017b48:	08017d0b 	.word	0x08017d0b
 8017b4c:	2001de88 	.word	0x2001de88

08017b50 <stdio_exit_handler>:
 8017b50:	4a02      	ldr	r2, [pc, #8]	@ (8017b5c <stdio_exit_handler+0xc>)
 8017b52:	4903      	ldr	r1, [pc, #12]	@ (8017b60 <stdio_exit_handler+0x10>)
 8017b54:	4803      	ldr	r0, [pc, #12]	@ (8017b64 <stdio_exit_handler+0x14>)
 8017b56:	f000 b869 	b.w	8017c2c <_fwalk_sglue>
 8017b5a:	bf00      	nop
 8017b5c:	20000034 	.word	0x20000034
 8017b60:	080187d9 	.word	0x080187d9
 8017b64:	20000044 	.word	0x20000044

08017b68 <cleanup_stdio>:
 8017b68:	6841      	ldr	r1, [r0, #4]
 8017b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8017b9c <cleanup_stdio+0x34>)
 8017b6c:	4299      	cmp	r1, r3
 8017b6e:	b510      	push	{r4, lr}
 8017b70:	4604      	mov	r4, r0
 8017b72:	d001      	beq.n	8017b78 <cleanup_stdio+0x10>
 8017b74:	f000 fe30 	bl	80187d8 <_fflush_r>
 8017b78:	68a1      	ldr	r1, [r4, #8]
 8017b7a:	4b09      	ldr	r3, [pc, #36]	@ (8017ba0 <cleanup_stdio+0x38>)
 8017b7c:	4299      	cmp	r1, r3
 8017b7e:	d002      	beq.n	8017b86 <cleanup_stdio+0x1e>
 8017b80:	4620      	mov	r0, r4
 8017b82:	f000 fe29 	bl	80187d8 <_fflush_r>
 8017b86:	68e1      	ldr	r1, [r4, #12]
 8017b88:	4b06      	ldr	r3, [pc, #24]	@ (8017ba4 <cleanup_stdio+0x3c>)
 8017b8a:	4299      	cmp	r1, r3
 8017b8c:	d004      	beq.n	8017b98 <cleanup_stdio+0x30>
 8017b8e:	4620      	mov	r0, r4
 8017b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b94:	f000 be20 	b.w	80187d8 <_fflush_r>
 8017b98:	bd10      	pop	{r4, pc}
 8017b9a:	bf00      	nop
 8017b9c:	2001de88 	.word	0x2001de88
 8017ba0:	2001def0 	.word	0x2001def0
 8017ba4:	2001df58 	.word	0x2001df58

08017ba8 <global_stdio_init.part.0>:
 8017ba8:	b510      	push	{r4, lr}
 8017baa:	4b0b      	ldr	r3, [pc, #44]	@ (8017bd8 <global_stdio_init.part.0+0x30>)
 8017bac:	4c0b      	ldr	r4, [pc, #44]	@ (8017bdc <global_stdio_init.part.0+0x34>)
 8017bae:	4a0c      	ldr	r2, [pc, #48]	@ (8017be0 <global_stdio_init.part.0+0x38>)
 8017bb0:	601a      	str	r2, [r3, #0]
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	2104      	movs	r1, #4
 8017bb8:	f7ff ff94 	bl	8017ae4 <std>
 8017bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	2109      	movs	r1, #9
 8017bc4:	f7ff ff8e 	bl	8017ae4 <std>
 8017bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017bcc:	2202      	movs	r2, #2
 8017bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bd2:	2112      	movs	r1, #18
 8017bd4:	f7ff bf86 	b.w	8017ae4 <std>
 8017bd8:	2001dfc0 	.word	0x2001dfc0
 8017bdc:	2001de88 	.word	0x2001de88
 8017be0:	08017b51 	.word	0x08017b51

08017be4 <__sfp_lock_acquire>:
 8017be4:	4801      	ldr	r0, [pc, #4]	@ (8017bec <__sfp_lock_acquire+0x8>)
 8017be6:	f000 b976 	b.w	8017ed6 <__retarget_lock_acquire_recursive>
 8017bea:	bf00      	nop
 8017bec:	2001dfc9 	.word	0x2001dfc9

08017bf0 <__sfp_lock_release>:
 8017bf0:	4801      	ldr	r0, [pc, #4]	@ (8017bf8 <__sfp_lock_release+0x8>)
 8017bf2:	f000 b971 	b.w	8017ed8 <__retarget_lock_release_recursive>
 8017bf6:	bf00      	nop
 8017bf8:	2001dfc9 	.word	0x2001dfc9

08017bfc <__sinit>:
 8017bfc:	b510      	push	{r4, lr}
 8017bfe:	4604      	mov	r4, r0
 8017c00:	f7ff fff0 	bl	8017be4 <__sfp_lock_acquire>
 8017c04:	6a23      	ldr	r3, [r4, #32]
 8017c06:	b11b      	cbz	r3, 8017c10 <__sinit+0x14>
 8017c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c0c:	f7ff bff0 	b.w	8017bf0 <__sfp_lock_release>
 8017c10:	4b04      	ldr	r3, [pc, #16]	@ (8017c24 <__sinit+0x28>)
 8017c12:	6223      	str	r3, [r4, #32]
 8017c14:	4b04      	ldr	r3, [pc, #16]	@ (8017c28 <__sinit+0x2c>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d1f5      	bne.n	8017c08 <__sinit+0xc>
 8017c1c:	f7ff ffc4 	bl	8017ba8 <global_stdio_init.part.0>
 8017c20:	e7f2      	b.n	8017c08 <__sinit+0xc>
 8017c22:	bf00      	nop
 8017c24:	08017b69 	.word	0x08017b69
 8017c28:	2001dfc0 	.word	0x2001dfc0

08017c2c <_fwalk_sglue>:
 8017c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c30:	4607      	mov	r7, r0
 8017c32:	4688      	mov	r8, r1
 8017c34:	4614      	mov	r4, r2
 8017c36:	2600      	movs	r6, #0
 8017c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8017c40:	d505      	bpl.n	8017c4e <_fwalk_sglue+0x22>
 8017c42:	6824      	ldr	r4, [r4, #0]
 8017c44:	2c00      	cmp	r4, #0
 8017c46:	d1f7      	bne.n	8017c38 <_fwalk_sglue+0xc>
 8017c48:	4630      	mov	r0, r6
 8017c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c4e:	89ab      	ldrh	r3, [r5, #12]
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d907      	bls.n	8017c64 <_fwalk_sglue+0x38>
 8017c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	d003      	beq.n	8017c64 <_fwalk_sglue+0x38>
 8017c5c:	4629      	mov	r1, r5
 8017c5e:	4638      	mov	r0, r7
 8017c60:	47c0      	blx	r8
 8017c62:	4306      	orrs	r6, r0
 8017c64:	3568      	adds	r5, #104	@ 0x68
 8017c66:	e7e9      	b.n	8017c3c <_fwalk_sglue+0x10>

08017c68 <iprintf>:
 8017c68:	b40f      	push	{r0, r1, r2, r3}
 8017c6a:	b507      	push	{r0, r1, r2, lr}
 8017c6c:	4906      	ldr	r1, [pc, #24]	@ (8017c88 <iprintf+0x20>)
 8017c6e:	ab04      	add	r3, sp, #16
 8017c70:	6808      	ldr	r0, [r1, #0]
 8017c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c76:	6881      	ldr	r1, [r0, #8]
 8017c78:	9301      	str	r3, [sp, #4]
 8017c7a:	f000 fa85 	bl	8018188 <_vfiprintf_r>
 8017c7e:	b003      	add	sp, #12
 8017c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c84:	b004      	add	sp, #16
 8017c86:	4770      	bx	lr
 8017c88:	20000040 	.word	0x20000040

08017c8c <__sread>:
 8017c8c:	b510      	push	{r4, lr}
 8017c8e:	460c      	mov	r4, r1
 8017c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c94:	f000 f8d6 	bl	8017e44 <_read_r>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	bfab      	itete	ge
 8017c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8017ca0:	181b      	addge	r3, r3, r0
 8017ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017ca6:	bfac      	ite	ge
 8017ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017caa:	81a3      	strhlt	r3, [r4, #12]
 8017cac:	bd10      	pop	{r4, pc}

08017cae <__swrite>:
 8017cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb2:	461f      	mov	r7, r3
 8017cb4:	898b      	ldrh	r3, [r1, #12]
 8017cb6:	05db      	lsls	r3, r3, #23
 8017cb8:	4605      	mov	r5, r0
 8017cba:	460c      	mov	r4, r1
 8017cbc:	4616      	mov	r6, r2
 8017cbe:	d505      	bpl.n	8017ccc <__swrite+0x1e>
 8017cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cc4:	2302      	movs	r3, #2
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	f000 f8aa 	bl	8017e20 <_lseek_r>
 8017ccc:	89a3      	ldrh	r3, [r4, #12]
 8017cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017cd6:	81a3      	strh	r3, [r4, #12]
 8017cd8:	4632      	mov	r2, r6
 8017cda:	463b      	mov	r3, r7
 8017cdc:	4628      	mov	r0, r5
 8017cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ce2:	f000 b8c1 	b.w	8017e68 <_write_r>

08017ce6 <__sseek>:
 8017ce6:	b510      	push	{r4, lr}
 8017ce8:	460c      	mov	r4, r1
 8017cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cee:	f000 f897 	bl	8017e20 <_lseek_r>
 8017cf2:	1c43      	adds	r3, r0, #1
 8017cf4:	89a3      	ldrh	r3, [r4, #12]
 8017cf6:	bf15      	itete	ne
 8017cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017d02:	81a3      	strheq	r3, [r4, #12]
 8017d04:	bf18      	it	ne
 8017d06:	81a3      	strhne	r3, [r4, #12]
 8017d08:	bd10      	pop	{r4, pc}

08017d0a <__sclose>:
 8017d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d0e:	f000 b819 	b.w	8017d44 <_close_r>

08017d12 <memcmp>:
 8017d12:	b510      	push	{r4, lr}
 8017d14:	3901      	subs	r1, #1
 8017d16:	4402      	add	r2, r0
 8017d18:	4290      	cmp	r0, r2
 8017d1a:	d101      	bne.n	8017d20 <memcmp+0xe>
 8017d1c:	2000      	movs	r0, #0
 8017d1e:	e005      	b.n	8017d2c <memcmp+0x1a>
 8017d20:	7803      	ldrb	r3, [r0, #0]
 8017d22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d26:	42a3      	cmp	r3, r4
 8017d28:	d001      	beq.n	8017d2e <memcmp+0x1c>
 8017d2a:	1b18      	subs	r0, r3, r4
 8017d2c:	bd10      	pop	{r4, pc}
 8017d2e:	3001      	adds	r0, #1
 8017d30:	e7f2      	b.n	8017d18 <memcmp+0x6>

08017d32 <memset>:
 8017d32:	4402      	add	r2, r0
 8017d34:	4603      	mov	r3, r0
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d100      	bne.n	8017d3c <memset+0xa>
 8017d3a:	4770      	bx	lr
 8017d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8017d40:	e7f9      	b.n	8017d36 <memset+0x4>
	...

08017d44 <_close_r>:
 8017d44:	b538      	push	{r3, r4, r5, lr}
 8017d46:	4d06      	ldr	r5, [pc, #24]	@ (8017d60 <_close_r+0x1c>)
 8017d48:	2300      	movs	r3, #0
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	4608      	mov	r0, r1
 8017d4e:	602b      	str	r3, [r5, #0]
 8017d50:	f7e9 fda2 	bl	8001898 <_close>
 8017d54:	1c43      	adds	r3, r0, #1
 8017d56:	d102      	bne.n	8017d5e <_close_r+0x1a>
 8017d58:	682b      	ldr	r3, [r5, #0]
 8017d5a:	b103      	cbz	r3, 8017d5e <_close_r+0x1a>
 8017d5c:	6023      	str	r3, [r4, #0]
 8017d5e:	bd38      	pop	{r3, r4, r5, pc}
 8017d60:	2001dfc4 	.word	0x2001dfc4

08017d64 <_reclaim_reent>:
 8017d64:	4b2d      	ldr	r3, [pc, #180]	@ (8017e1c <_reclaim_reent+0xb8>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	4283      	cmp	r3, r0
 8017d6a:	b570      	push	{r4, r5, r6, lr}
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	d053      	beq.n	8017e18 <_reclaim_reent+0xb4>
 8017d70:	69c3      	ldr	r3, [r0, #28]
 8017d72:	b31b      	cbz	r3, 8017dbc <_reclaim_reent+0x58>
 8017d74:	68db      	ldr	r3, [r3, #12]
 8017d76:	b163      	cbz	r3, 8017d92 <_reclaim_reent+0x2e>
 8017d78:	2500      	movs	r5, #0
 8017d7a:	69e3      	ldr	r3, [r4, #28]
 8017d7c:	68db      	ldr	r3, [r3, #12]
 8017d7e:	5959      	ldr	r1, [r3, r5]
 8017d80:	b9b1      	cbnz	r1, 8017db0 <_reclaim_reent+0x4c>
 8017d82:	3504      	adds	r5, #4
 8017d84:	2d80      	cmp	r5, #128	@ 0x80
 8017d86:	d1f8      	bne.n	8017d7a <_reclaim_reent+0x16>
 8017d88:	69e3      	ldr	r3, [r4, #28]
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	68d9      	ldr	r1, [r3, #12]
 8017d8e:	f000 f8d1 	bl	8017f34 <_free_r>
 8017d92:	69e3      	ldr	r3, [r4, #28]
 8017d94:	6819      	ldr	r1, [r3, #0]
 8017d96:	b111      	cbz	r1, 8017d9e <_reclaim_reent+0x3a>
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f000 f8cb 	bl	8017f34 <_free_r>
 8017d9e:	69e3      	ldr	r3, [r4, #28]
 8017da0:	689d      	ldr	r5, [r3, #8]
 8017da2:	b15d      	cbz	r5, 8017dbc <_reclaim_reent+0x58>
 8017da4:	4629      	mov	r1, r5
 8017da6:	4620      	mov	r0, r4
 8017da8:	682d      	ldr	r5, [r5, #0]
 8017daa:	f000 f8c3 	bl	8017f34 <_free_r>
 8017dae:	e7f8      	b.n	8017da2 <_reclaim_reent+0x3e>
 8017db0:	680e      	ldr	r6, [r1, #0]
 8017db2:	4620      	mov	r0, r4
 8017db4:	f000 f8be 	bl	8017f34 <_free_r>
 8017db8:	4631      	mov	r1, r6
 8017dba:	e7e1      	b.n	8017d80 <_reclaim_reent+0x1c>
 8017dbc:	6961      	ldr	r1, [r4, #20]
 8017dbe:	b111      	cbz	r1, 8017dc6 <_reclaim_reent+0x62>
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f000 f8b7 	bl	8017f34 <_free_r>
 8017dc6:	69e1      	ldr	r1, [r4, #28]
 8017dc8:	b111      	cbz	r1, 8017dd0 <_reclaim_reent+0x6c>
 8017dca:	4620      	mov	r0, r4
 8017dcc:	f000 f8b2 	bl	8017f34 <_free_r>
 8017dd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017dd2:	b111      	cbz	r1, 8017dda <_reclaim_reent+0x76>
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f000 f8ad 	bl	8017f34 <_free_r>
 8017dda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ddc:	b111      	cbz	r1, 8017de4 <_reclaim_reent+0x80>
 8017dde:	4620      	mov	r0, r4
 8017de0:	f000 f8a8 	bl	8017f34 <_free_r>
 8017de4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017de6:	b111      	cbz	r1, 8017dee <_reclaim_reent+0x8a>
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 f8a3 	bl	8017f34 <_free_r>
 8017dee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017df0:	b111      	cbz	r1, 8017df8 <_reclaim_reent+0x94>
 8017df2:	4620      	mov	r0, r4
 8017df4:	f000 f89e 	bl	8017f34 <_free_r>
 8017df8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017dfa:	b111      	cbz	r1, 8017e02 <_reclaim_reent+0x9e>
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	f000 f899 	bl	8017f34 <_free_r>
 8017e02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017e04:	b111      	cbz	r1, 8017e0c <_reclaim_reent+0xa8>
 8017e06:	4620      	mov	r0, r4
 8017e08:	f000 f894 	bl	8017f34 <_free_r>
 8017e0c:	6a23      	ldr	r3, [r4, #32]
 8017e0e:	b11b      	cbz	r3, 8017e18 <_reclaim_reent+0xb4>
 8017e10:	4620      	mov	r0, r4
 8017e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e16:	4718      	bx	r3
 8017e18:	bd70      	pop	{r4, r5, r6, pc}
 8017e1a:	bf00      	nop
 8017e1c:	20000040 	.word	0x20000040

08017e20 <_lseek_r>:
 8017e20:	b538      	push	{r3, r4, r5, lr}
 8017e22:	4d07      	ldr	r5, [pc, #28]	@ (8017e40 <_lseek_r+0x20>)
 8017e24:	4604      	mov	r4, r0
 8017e26:	4608      	mov	r0, r1
 8017e28:	4611      	mov	r1, r2
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	602a      	str	r2, [r5, #0]
 8017e2e:	461a      	mov	r2, r3
 8017e30:	f7e9 fd59 	bl	80018e6 <_lseek>
 8017e34:	1c43      	adds	r3, r0, #1
 8017e36:	d102      	bne.n	8017e3e <_lseek_r+0x1e>
 8017e38:	682b      	ldr	r3, [r5, #0]
 8017e3a:	b103      	cbz	r3, 8017e3e <_lseek_r+0x1e>
 8017e3c:	6023      	str	r3, [r4, #0]
 8017e3e:	bd38      	pop	{r3, r4, r5, pc}
 8017e40:	2001dfc4 	.word	0x2001dfc4

08017e44 <_read_r>:
 8017e44:	b538      	push	{r3, r4, r5, lr}
 8017e46:	4d07      	ldr	r5, [pc, #28]	@ (8017e64 <_read_r+0x20>)
 8017e48:	4604      	mov	r4, r0
 8017e4a:	4608      	mov	r0, r1
 8017e4c:	4611      	mov	r1, r2
 8017e4e:	2200      	movs	r2, #0
 8017e50:	602a      	str	r2, [r5, #0]
 8017e52:	461a      	mov	r2, r3
 8017e54:	f7e9 fce7 	bl	8001826 <_read>
 8017e58:	1c43      	adds	r3, r0, #1
 8017e5a:	d102      	bne.n	8017e62 <_read_r+0x1e>
 8017e5c:	682b      	ldr	r3, [r5, #0]
 8017e5e:	b103      	cbz	r3, 8017e62 <_read_r+0x1e>
 8017e60:	6023      	str	r3, [r4, #0]
 8017e62:	bd38      	pop	{r3, r4, r5, pc}
 8017e64:	2001dfc4 	.word	0x2001dfc4

08017e68 <_write_r>:
 8017e68:	b538      	push	{r3, r4, r5, lr}
 8017e6a:	4d07      	ldr	r5, [pc, #28]	@ (8017e88 <_write_r+0x20>)
 8017e6c:	4604      	mov	r4, r0
 8017e6e:	4608      	mov	r0, r1
 8017e70:	4611      	mov	r1, r2
 8017e72:	2200      	movs	r2, #0
 8017e74:	602a      	str	r2, [r5, #0]
 8017e76:	461a      	mov	r2, r3
 8017e78:	f7e9 fcf2 	bl	8001860 <_write>
 8017e7c:	1c43      	adds	r3, r0, #1
 8017e7e:	d102      	bne.n	8017e86 <_write_r+0x1e>
 8017e80:	682b      	ldr	r3, [r5, #0]
 8017e82:	b103      	cbz	r3, 8017e86 <_write_r+0x1e>
 8017e84:	6023      	str	r3, [r4, #0]
 8017e86:	bd38      	pop	{r3, r4, r5, pc}
 8017e88:	2001dfc4 	.word	0x2001dfc4

08017e8c <__libc_init_array>:
 8017e8c:	b570      	push	{r4, r5, r6, lr}
 8017e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8017ec4 <__libc_init_array+0x38>)
 8017e90:	4c0d      	ldr	r4, [pc, #52]	@ (8017ec8 <__libc_init_array+0x3c>)
 8017e92:	1b64      	subs	r4, r4, r5
 8017e94:	10a4      	asrs	r4, r4, #2
 8017e96:	2600      	movs	r6, #0
 8017e98:	42a6      	cmp	r6, r4
 8017e9a:	d109      	bne.n	8017eb0 <__libc_init_array+0x24>
 8017e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8017ecc <__libc_init_array+0x40>)
 8017e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8017ed0 <__libc_init_array+0x44>)
 8017ea0:	f000 fe48 	bl	8018b34 <_init>
 8017ea4:	1b64      	subs	r4, r4, r5
 8017ea6:	10a4      	asrs	r4, r4, #2
 8017ea8:	2600      	movs	r6, #0
 8017eaa:	42a6      	cmp	r6, r4
 8017eac:	d105      	bne.n	8017eba <__libc_init_array+0x2e>
 8017eae:	bd70      	pop	{r4, r5, r6, pc}
 8017eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017eb4:	4798      	blx	r3
 8017eb6:	3601      	adds	r6, #1
 8017eb8:	e7ee      	b.n	8017e98 <__libc_init_array+0xc>
 8017eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ebe:	4798      	blx	r3
 8017ec0:	3601      	adds	r6, #1
 8017ec2:	e7f2      	b.n	8017eaa <__libc_init_array+0x1e>
 8017ec4:	0801c508 	.word	0x0801c508
 8017ec8:	0801c508 	.word	0x0801c508
 8017ecc:	0801c508 	.word	0x0801c508
 8017ed0:	0801c50c 	.word	0x0801c50c

08017ed4 <__retarget_lock_init_recursive>:
 8017ed4:	4770      	bx	lr

08017ed6 <__retarget_lock_acquire_recursive>:
 8017ed6:	4770      	bx	lr

08017ed8 <__retarget_lock_release_recursive>:
 8017ed8:	4770      	bx	lr

08017eda <memcpy>:
 8017eda:	440a      	add	r2, r1
 8017edc:	4291      	cmp	r1, r2
 8017ede:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ee2:	d100      	bne.n	8017ee6 <memcpy+0xc>
 8017ee4:	4770      	bx	lr
 8017ee6:	b510      	push	{r4, lr}
 8017ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ef0:	4291      	cmp	r1, r2
 8017ef2:	d1f9      	bne.n	8017ee8 <memcpy+0xe>
 8017ef4:	bd10      	pop	{r4, pc}
	...

08017ef8 <__assert_func>:
 8017ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017efa:	4614      	mov	r4, r2
 8017efc:	461a      	mov	r2, r3
 8017efe:	4b09      	ldr	r3, [pc, #36]	@ (8017f24 <__assert_func+0x2c>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	4605      	mov	r5, r0
 8017f04:	68d8      	ldr	r0, [r3, #12]
 8017f06:	b14c      	cbz	r4, 8017f1c <__assert_func+0x24>
 8017f08:	4b07      	ldr	r3, [pc, #28]	@ (8017f28 <__assert_func+0x30>)
 8017f0a:	9100      	str	r1, [sp, #0]
 8017f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f10:	4906      	ldr	r1, [pc, #24]	@ (8017f2c <__assert_func+0x34>)
 8017f12:	462b      	mov	r3, r5
 8017f14:	f000 fc88 	bl	8018828 <fiprintf>
 8017f18:	f000 fd3c 	bl	8018994 <abort>
 8017f1c:	4b04      	ldr	r3, [pc, #16]	@ (8017f30 <__assert_func+0x38>)
 8017f1e:	461c      	mov	r4, r3
 8017f20:	e7f3      	b.n	8017f0a <__assert_func+0x12>
 8017f22:	bf00      	nop
 8017f24:	20000040 	.word	0x20000040
 8017f28:	0801c48f 	.word	0x0801c48f
 8017f2c:	0801c49c 	.word	0x0801c49c
 8017f30:	0801c4ca 	.word	0x0801c4ca

08017f34 <_free_r>:
 8017f34:	b538      	push	{r3, r4, r5, lr}
 8017f36:	4605      	mov	r5, r0
 8017f38:	2900      	cmp	r1, #0
 8017f3a:	d041      	beq.n	8017fc0 <_free_r+0x8c>
 8017f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f40:	1f0c      	subs	r4, r1, #4
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	bfb8      	it	lt
 8017f46:	18e4      	addlt	r4, r4, r3
 8017f48:	f000 f8e8 	bl	801811c <__malloc_lock>
 8017f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8017fc4 <_free_r+0x90>)
 8017f4e:	6813      	ldr	r3, [r2, #0]
 8017f50:	b933      	cbnz	r3, 8017f60 <_free_r+0x2c>
 8017f52:	6063      	str	r3, [r4, #4]
 8017f54:	6014      	str	r4, [r2, #0]
 8017f56:	4628      	mov	r0, r5
 8017f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f5c:	f000 b8e4 	b.w	8018128 <__malloc_unlock>
 8017f60:	42a3      	cmp	r3, r4
 8017f62:	d908      	bls.n	8017f76 <_free_r+0x42>
 8017f64:	6820      	ldr	r0, [r4, #0]
 8017f66:	1821      	adds	r1, r4, r0
 8017f68:	428b      	cmp	r3, r1
 8017f6a:	bf01      	itttt	eq
 8017f6c:	6819      	ldreq	r1, [r3, #0]
 8017f6e:	685b      	ldreq	r3, [r3, #4]
 8017f70:	1809      	addeq	r1, r1, r0
 8017f72:	6021      	streq	r1, [r4, #0]
 8017f74:	e7ed      	b.n	8017f52 <_free_r+0x1e>
 8017f76:	461a      	mov	r2, r3
 8017f78:	685b      	ldr	r3, [r3, #4]
 8017f7a:	b10b      	cbz	r3, 8017f80 <_free_r+0x4c>
 8017f7c:	42a3      	cmp	r3, r4
 8017f7e:	d9fa      	bls.n	8017f76 <_free_r+0x42>
 8017f80:	6811      	ldr	r1, [r2, #0]
 8017f82:	1850      	adds	r0, r2, r1
 8017f84:	42a0      	cmp	r0, r4
 8017f86:	d10b      	bne.n	8017fa0 <_free_r+0x6c>
 8017f88:	6820      	ldr	r0, [r4, #0]
 8017f8a:	4401      	add	r1, r0
 8017f8c:	1850      	adds	r0, r2, r1
 8017f8e:	4283      	cmp	r3, r0
 8017f90:	6011      	str	r1, [r2, #0]
 8017f92:	d1e0      	bne.n	8017f56 <_free_r+0x22>
 8017f94:	6818      	ldr	r0, [r3, #0]
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	6053      	str	r3, [r2, #4]
 8017f9a:	4408      	add	r0, r1
 8017f9c:	6010      	str	r0, [r2, #0]
 8017f9e:	e7da      	b.n	8017f56 <_free_r+0x22>
 8017fa0:	d902      	bls.n	8017fa8 <_free_r+0x74>
 8017fa2:	230c      	movs	r3, #12
 8017fa4:	602b      	str	r3, [r5, #0]
 8017fa6:	e7d6      	b.n	8017f56 <_free_r+0x22>
 8017fa8:	6820      	ldr	r0, [r4, #0]
 8017faa:	1821      	adds	r1, r4, r0
 8017fac:	428b      	cmp	r3, r1
 8017fae:	bf04      	itt	eq
 8017fb0:	6819      	ldreq	r1, [r3, #0]
 8017fb2:	685b      	ldreq	r3, [r3, #4]
 8017fb4:	6063      	str	r3, [r4, #4]
 8017fb6:	bf04      	itt	eq
 8017fb8:	1809      	addeq	r1, r1, r0
 8017fba:	6021      	streq	r1, [r4, #0]
 8017fbc:	6054      	str	r4, [r2, #4]
 8017fbe:	e7ca      	b.n	8017f56 <_free_r+0x22>
 8017fc0:	bd38      	pop	{r3, r4, r5, pc}
 8017fc2:	bf00      	nop
 8017fc4:	2001dfd0 	.word	0x2001dfd0

08017fc8 <malloc>:
 8017fc8:	4b02      	ldr	r3, [pc, #8]	@ (8017fd4 <malloc+0xc>)
 8017fca:	4601      	mov	r1, r0
 8017fcc:	6818      	ldr	r0, [r3, #0]
 8017fce:	f000 b825 	b.w	801801c <_malloc_r>
 8017fd2:	bf00      	nop
 8017fd4:	20000040 	.word	0x20000040

08017fd8 <sbrk_aligned>:
 8017fd8:	b570      	push	{r4, r5, r6, lr}
 8017fda:	4e0f      	ldr	r6, [pc, #60]	@ (8018018 <sbrk_aligned+0x40>)
 8017fdc:	460c      	mov	r4, r1
 8017fde:	6831      	ldr	r1, [r6, #0]
 8017fe0:	4605      	mov	r5, r0
 8017fe2:	b911      	cbnz	r1, 8017fea <sbrk_aligned+0x12>
 8017fe4:	f000 fcc6 	bl	8018974 <_sbrk_r>
 8017fe8:	6030      	str	r0, [r6, #0]
 8017fea:	4621      	mov	r1, r4
 8017fec:	4628      	mov	r0, r5
 8017fee:	f000 fcc1 	bl	8018974 <_sbrk_r>
 8017ff2:	1c43      	adds	r3, r0, #1
 8017ff4:	d103      	bne.n	8017ffe <sbrk_aligned+0x26>
 8017ff6:	f04f 34ff 	mov.w	r4, #4294967295
 8017ffa:	4620      	mov	r0, r4
 8017ffc:	bd70      	pop	{r4, r5, r6, pc}
 8017ffe:	1cc4      	adds	r4, r0, #3
 8018000:	f024 0403 	bic.w	r4, r4, #3
 8018004:	42a0      	cmp	r0, r4
 8018006:	d0f8      	beq.n	8017ffa <sbrk_aligned+0x22>
 8018008:	1a21      	subs	r1, r4, r0
 801800a:	4628      	mov	r0, r5
 801800c:	f000 fcb2 	bl	8018974 <_sbrk_r>
 8018010:	3001      	adds	r0, #1
 8018012:	d1f2      	bne.n	8017ffa <sbrk_aligned+0x22>
 8018014:	e7ef      	b.n	8017ff6 <sbrk_aligned+0x1e>
 8018016:	bf00      	nop
 8018018:	2001dfcc 	.word	0x2001dfcc

0801801c <_malloc_r>:
 801801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018020:	1ccd      	adds	r5, r1, #3
 8018022:	f025 0503 	bic.w	r5, r5, #3
 8018026:	3508      	adds	r5, #8
 8018028:	2d0c      	cmp	r5, #12
 801802a:	bf38      	it	cc
 801802c:	250c      	movcc	r5, #12
 801802e:	2d00      	cmp	r5, #0
 8018030:	4606      	mov	r6, r0
 8018032:	db01      	blt.n	8018038 <_malloc_r+0x1c>
 8018034:	42a9      	cmp	r1, r5
 8018036:	d904      	bls.n	8018042 <_malloc_r+0x26>
 8018038:	230c      	movs	r3, #12
 801803a:	6033      	str	r3, [r6, #0]
 801803c:	2000      	movs	r0, #0
 801803e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018118 <_malloc_r+0xfc>
 8018046:	f000 f869 	bl	801811c <__malloc_lock>
 801804a:	f8d8 3000 	ldr.w	r3, [r8]
 801804e:	461c      	mov	r4, r3
 8018050:	bb44      	cbnz	r4, 80180a4 <_malloc_r+0x88>
 8018052:	4629      	mov	r1, r5
 8018054:	4630      	mov	r0, r6
 8018056:	f7ff ffbf 	bl	8017fd8 <sbrk_aligned>
 801805a:	1c43      	adds	r3, r0, #1
 801805c:	4604      	mov	r4, r0
 801805e:	d158      	bne.n	8018112 <_malloc_r+0xf6>
 8018060:	f8d8 4000 	ldr.w	r4, [r8]
 8018064:	4627      	mov	r7, r4
 8018066:	2f00      	cmp	r7, #0
 8018068:	d143      	bne.n	80180f2 <_malloc_r+0xd6>
 801806a:	2c00      	cmp	r4, #0
 801806c:	d04b      	beq.n	8018106 <_malloc_r+0xea>
 801806e:	6823      	ldr	r3, [r4, #0]
 8018070:	4639      	mov	r1, r7
 8018072:	4630      	mov	r0, r6
 8018074:	eb04 0903 	add.w	r9, r4, r3
 8018078:	f000 fc7c 	bl	8018974 <_sbrk_r>
 801807c:	4581      	cmp	r9, r0
 801807e:	d142      	bne.n	8018106 <_malloc_r+0xea>
 8018080:	6821      	ldr	r1, [r4, #0]
 8018082:	1a6d      	subs	r5, r5, r1
 8018084:	4629      	mov	r1, r5
 8018086:	4630      	mov	r0, r6
 8018088:	f7ff ffa6 	bl	8017fd8 <sbrk_aligned>
 801808c:	3001      	adds	r0, #1
 801808e:	d03a      	beq.n	8018106 <_malloc_r+0xea>
 8018090:	6823      	ldr	r3, [r4, #0]
 8018092:	442b      	add	r3, r5
 8018094:	6023      	str	r3, [r4, #0]
 8018096:	f8d8 3000 	ldr.w	r3, [r8]
 801809a:	685a      	ldr	r2, [r3, #4]
 801809c:	bb62      	cbnz	r2, 80180f8 <_malloc_r+0xdc>
 801809e:	f8c8 7000 	str.w	r7, [r8]
 80180a2:	e00f      	b.n	80180c4 <_malloc_r+0xa8>
 80180a4:	6822      	ldr	r2, [r4, #0]
 80180a6:	1b52      	subs	r2, r2, r5
 80180a8:	d420      	bmi.n	80180ec <_malloc_r+0xd0>
 80180aa:	2a0b      	cmp	r2, #11
 80180ac:	d917      	bls.n	80180de <_malloc_r+0xc2>
 80180ae:	1961      	adds	r1, r4, r5
 80180b0:	42a3      	cmp	r3, r4
 80180b2:	6025      	str	r5, [r4, #0]
 80180b4:	bf18      	it	ne
 80180b6:	6059      	strne	r1, [r3, #4]
 80180b8:	6863      	ldr	r3, [r4, #4]
 80180ba:	bf08      	it	eq
 80180bc:	f8c8 1000 	streq.w	r1, [r8]
 80180c0:	5162      	str	r2, [r4, r5]
 80180c2:	604b      	str	r3, [r1, #4]
 80180c4:	4630      	mov	r0, r6
 80180c6:	f000 f82f 	bl	8018128 <__malloc_unlock>
 80180ca:	f104 000b 	add.w	r0, r4, #11
 80180ce:	1d23      	adds	r3, r4, #4
 80180d0:	f020 0007 	bic.w	r0, r0, #7
 80180d4:	1ac2      	subs	r2, r0, r3
 80180d6:	bf1c      	itt	ne
 80180d8:	1a1b      	subne	r3, r3, r0
 80180da:	50a3      	strne	r3, [r4, r2]
 80180dc:	e7af      	b.n	801803e <_malloc_r+0x22>
 80180de:	6862      	ldr	r2, [r4, #4]
 80180e0:	42a3      	cmp	r3, r4
 80180e2:	bf0c      	ite	eq
 80180e4:	f8c8 2000 	streq.w	r2, [r8]
 80180e8:	605a      	strne	r2, [r3, #4]
 80180ea:	e7eb      	b.n	80180c4 <_malloc_r+0xa8>
 80180ec:	4623      	mov	r3, r4
 80180ee:	6864      	ldr	r4, [r4, #4]
 80180f0:	e7ae      	b.n	8018050 <_malloc_r+0x34>
 80180f2:	463c      	mov	r4, r7
 80180f4:	687f      	ldr	r7, [r7, #4]
 80180f6:	e7b6      	b.n	8018066 <_malloc_r+0x4a>
 80180f8:	461a      	mov	r2, r3
 80180fa:	685b      	ldr	r3, [r3, #4]
 80180fc:	42a3      	cmp	r3, r4
 80180fe:	d1fb      	bne.n	80180f8 <_malloc_r+0xdc>
 8018100:	2300      	movs	r3, #0
 8018102:	6053      	str	r3, [r2, #4]
 8018104:	e7de      	b.n	80180c4 <_malloc_r+0xa8>
 8018106:	230c      	movs	r3, #12
 8018108:	6033      	str	r3, [r6, #0]
 801810a:	4630      	mov	r0, r6
 801810c:	f000 f80c 	bl	8018128 <__malloc_unlock>
 8018110:	e794      	b.n	801803c <_malloc_r+0x20>
 8018112:	6005      	str	r5, [r0, #0]
 8018114:	e7d6      	b.n	80180c4 <_malloc_r+0xa8>
 8018116:	bf00      	nop
 8018118:	2001dfd0 	.word	0x2001dfd0

0801811c <__malloc_lock>:
 801811c:	4801      	ldr	r0, [pc, #4]	@ (8018124 <__malloc_lock+0x8>)
 801811e:	f7ff beda 	b.w	8017ed6 <__retarget_lock_acquire_recursive>
 8018122:	bf00      	nop
 8018124:	2001dfc8 	.word	0x2001dfc8

08018128 <__malloc_unlock>:
 8018128:	4801      	ldr	r0, [pc, #4]	@ (8018130 <__malloc_unlock+0x8>)
 801812a:	f7ff bed5 	b.w	8017ed8 <__retarget_lock_release_recursive>
 801812e:	bf00      	nop
 8018130:	2001dfc8 	.word	0x2001dfc8

08018134 <__sfputc_r>:
 8018134:	6893      	ldr	r3, [r2, #8]
 8018136:	3b01      	subs	r3, #1
 8018138:	2b00      	cmp	r3, #0
 801813a:	b410      	push	{r4}
 801813c:	6093      	str	r3, [r2, #8]
 801813e:	da08      	bge.n	8018152 <__sfputc_r+0x1e>
 8018140:	6994      	ldr	r4, [r2, #24]
 8018142:	42a3      	cmp	r3, r4
 8018144:	db01      	blt.n	801814a <__sfputc_r+0x16>
 8018146:	290a      	cmp	r1, #10
 8018148:	d103      	bne.n	8018152 <__sfputc_r+0x1e>
 801814a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801814e:	f000 bb7d 	b.w	801884c <__swbuf_r>
 8018152:	6813      	ldr	r3, [r2, #0]
 8018154:	1c58      	adds	r0, r3, #1
 8018156:	6010      	str	r0, [r2, #0]
 8018158:	7019      	strb	r1, [r3, #0]
 801815a:	4608      	mov	r0, r1
 801815c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018160:	4770      	bx	lr

08018162 <__sfputs_r>:
 8018162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018164:	4606      	mov	r6, r0
 8018166:	460f      	mov	r7, r1
 8018168:	4614      	mov	r4, r2
 801816a:	18d5      	adds	r5, r2, r3
 801816c:	42ac      	cmp	r4, r5
 801816e:	d101      	bne.n	8018174 <__sfputs_r+0x12>
 8018170:	2000      	movs	r0, #0
 8018172:	e007      	b.n	8018184 <__sfputs_r+0x22>
 8018174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018178:	463a      	mov	r2, r7
 801817a:	4630      	mov	r0, r6
 801817c:	f7ff ffda 	bl	8018134 <__sfputc_r>
 8018180:	1c43      	adds	r3, r0, #1
 8018182:	d1f3      	bne.n	801816c <__sfputs_r+0xa>
 8018184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018188 <_vfiprintf_r>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	460d      	mov	r5, r1
 801818e:	b09d      	sub	sp, #116	@ 0x74
 8018190:	4614      	mov	r4, r2
 8018192:	4698      	mov	r8, r3
 8018194:	4606      	mov	r6, r0
 8018196:	b118      	cbz	r0, 80181a0 <_vfiprintf_r+0x18>
 8018198:	6a03      	ldr	r3, [r0, #32]
 801819a:	b90b      	cbnz	r3, 80181a0 <_vfiprintf_r+0x18>
 801819c:	f7ff fd2e 	bl	8017bfc <__sinit>
 80181a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181a2:	07d9      	lsls	r1, r3, #31
 80181a4:	d405      	bmi.n	80181b2 <_vfiprintf_r+0x2a>
 80181a6:	89ab      	ldrh	r3, [r5, #12]
 80181a8:	059a      	lsls	r2, r3, #22
 80181aa:	d402      	bmi.n	80181b2 <_vfiprintf_r+0x2a>
 80181ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181ae:	f7ff fe92 	bl	8017ed6 <__retarget_lock_acquire_recursive>
 80181b2:	89ab      	ldrh	r3, [r5, #12]
 80181b4:	071b      	lsls	r3, r3, #28
 80181b6:	d501      	bpl.n	80181bc <_vfiprintf_r+0x34>
 80181b8:	692b      	ldr	r3, [r5, #16]
 80181ba:	b99b      	cbnz	r3, 80181e4 <_vfiprintf_r+0x5c>
 80181bc:	4629      	mov	r1, r5
 80181be:	4630      	mov	r0, r6
 80181c0:	f000 fb82 	bl	80188c8 <__swsetup_r>
 80181c4:	b170      	cbz	r0, 80181e4 <_vfiprintf_r+0x5c>
 80181c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181c8:	07dc      	lsls	r4, r3, #31
 80181ca:	d504      	bpl.n	80181d6 <_vfiprintf_r+0x4e>
 80181cc:	f04f 30ff 	mov.w	r0, #4294967295
 80181d0:	b01d      	add	sp, #116	@ 0x74
 80181d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d6:	89ab      	ldrh	r3, [r5, #12]
 80181d8:	0598      	lsls	r0, r3, #22
 80181da:	d4f7      	bmi.n	80181cc <_vfiprintf_r+0x44>
 80181dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181de:	f7ff fe7b 	bl	8017ed8 <__retarget_lock_release_recursive>
 80181e2:	e7f3      	b.n	80181cc <_vfiprintf_r+0x44>
 80181e4:	2300      	movs	r3, #0
 80181e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80181e8:	2320      	movs	r3, #32
 80181ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80181ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80181f2:	2330      	movs	r3, #48	@ 0x30
 80181f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80183a4 <_vfiprintf_r+0x21c>
 80181f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181fc:	f04f 0901 	mov.w	r9, #1
 8018200:	4623      	mov	r3, r4
 8018202:	469a      	mov	sl, r3
 8018204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018208:	b10a      	cbz	r2, 801820e <_vfiprintf_r+0x86>
 801820a:	2a25      	cmp	r2, #37	@ 0x25
 801820c:	d1f9      	bne.n	8018202 <_vfiprintf_r+0x7a>
 801820e:	ebba 0b04 	subs.w	fp, sl, r4
 8018212:	d00b      	beq.n	801822c <_vfiprintf_r+0xa4>
 8018214:	465b      	mov	r3, fp
 8018216:	4622      	mov	r2, r4
 8018218:	4629      	mov	r1, r5
 801821a:	4630      	mov	r0, r6
 801821c:	f7ff ffa1 	bl	8018162 <__sfputs_r>
 8018220:	3001      	adds	r0, #1
 8018222:	f000 80a7 	beq.w	8018374 <_vfiprintf_r+0x1ec>
 8018226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018228:	445a      	add	r2, fp
 801822a:	9209      	str	r2, [sp, #36]	@ 0x24
 801822c:	f89a 3000 	ldrb.w	r3, [sl]
 8018230:	2b00      	cmp	r3, #0
 8018232:	f000 809f 	beq.w	8018374 <_vfiprintf_r+0x1ec>
 8018236:	2300      	movs	r3, #0
 8018238:	f04f 32ff 	mov.w	r2, #4294967295
 801823c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018240:	f10a 0a01 	add.w	sl, sl, #1
 8018244:	9304      	str	r3, [sp, #16]
 8018246:	9307      	str	r3, [sp, #28]
 8018248:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801824c:	931a      	str	r3, [sp, #104]	@ 0x68
 801824e:	4654      	mov	r4, sl
 8018250:	2205      	movs	r2, #5
 8018252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018256:	4853      	ldr	r0, [pc, #332]	@ (80183a4 <_vfiprintf_r+0x21c>)
 8018258:	f7e7 fff2 	bl	8000240 <memchr>
 801825c:	9a04      	ldr	r2, [sp, #16]
 801825e:	b9d8      	cbnz	r0, 8018298 <_vfiprintf_r+0x110>
 8018260:	06d1      	lsls	r1, r2, #27
 8018262:	bf44      	itt	mi
 8018264:	2320      	movmi	r3, #32
 8018266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801826a:	0713      	lsls	r3, r2, #28
 801826c:	bf44      	itt	mi
 801826e:	232b      	movmi	r3, #43	@ 0x2b
 8018270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018274:	f89a 3000 	ldrb.w	r3, [sl]
 8018278:	2b2a      	cmp	r3, #42	@ 0x2a
 801827a:	d015      	beq.n	80182a8 <_vfiprintf_r+0x120>
 801827c:	9a07      	ldr	r2, [sp, #28]
 801827e:	4654      	mov	r4, sl
 8018280:	2000      	movs	r0, #0
 8018282:	f04f 0c0a 	mov.w	ip, #10
 8018286:	4621      	mov	r1, r4
 8018288:	f811 3b01 	ldrb.w	r3, [r1], #1
 801828c:	3b30      	subs	r3, #48	@ 0x30
 801828e:	2b09      	cmp	r3, #9
 8018290:	d94b      	bls.n	801832a <_vfiprintf_r+0x1a2>
 8018292:	b1b0      	cbz	r0, 80182c2 <_vfiprintf_r+0x13a>
 8018294:	9207      	str	r2, [sp, #28]
 8018296:	e014      	b.n	80182c2 <_vfiprintf_r+0x13a>
 8018298:	eba0 0308 	sub.w	r3, r0, r8
 801829c:	fa09 f303 	lsl.w	r3, r9, r3
 80182a0:	4313      	orrs	r3, r2
 80182a2:	9304      	str	r3, [sp, #16]
 80182a4:	46a2      	mov	sl, r4
 80182a6:	e7d2      	b.n	801824e <_vfiprintf_r+0xc6>
 80182a8:	9b03      	ldr	r3, [sp, #12]
 80182aa:	1d19      	adds	r1, r3, #4
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	9103      	str	r1, [sp, #12]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	bfbb      	ittet	lt
 80182b4:	425b      	neglt	r3, r3
 80182b6:	f042 0202 	orrlt.w	r2, r2, #2
 80182ba:	9307      	strge	r3, [sp, #28]
 80182bc:	9307      	strlt	r3, [sp, #28]
 80182be:	bfb8      	it	lt
 80182c0:	9204      	strlt	r2, [sp, #16]
 80182c2:	7823      	ldrb	r3, [r4, #0]
 80182c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80182c6:	d10a      	bne.n	80182de <_vfiprintf_r+0x156>
 80182c8:	7863      	ldrb	r3, [r4, #1]
 80182ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80182cc:	d132      	bne.n	8018334 <_vfiprintf_r+0x1ac>
 80182ce:	9b03      	ldr	r3, [sp, #12]
 80182d0:	1d1a      	adds	r2, r3, #4
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	9203      	str	r2, [sp, #12]
 80182d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182da:	3402      	adds	r4, #2
 80182dc:	9305      	str	r3, [sp, #20]
 80182de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80183b4 <_vfiprintf_r+0x22c>
 80182e2:	7821      	ldrb	r1, [r4, #0]
 80182e4:	2203      	movs	r2, #3
 80182e6:	4650      	mov	r0, sl
 80182e8:	f7e7 ffaa 	bl	8000240 <memchr>
 80182ec:	b138      	cbz	r0, 80182fe <_vfiprintf_r+0x176>
 80182ee:	9b04      	ldr	r3, [sp, #16]
 80182f0:	eba0 000a 	sub.w	r0, r0, sl
 80182f4:	2240      	movs	r2, #64	@ 0x40
 80182f6:	4082      	lsls	r2, r0
 80182f8:	4313      	orrs	r3, r2
 80182fa:	3401      	adds	r4, #1
 80182fc:	9304      	str	r3, [sp, #16]
 80182fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018302:	4829      	ldr	r0, [pc, #164]	@ (80183a8 <_vfiprintf_r+0x220>)
 8018304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018308:	2206      	movs	r2, #6
 801830a:	f7e7 ff99 	bl	8000240 <memchr>
 801830e:	2800      	cmp	r0, #0
 8018310:	d03f      	beq.n	8018392 <_vfiprintf_r+0x20a>
 8018312:	4b26      	ldr	r3, [pc, #152]	@ (80183ac <_vfiprintf_r+0x224>)
 8018314:	bb1b      	cbnz	r3, 801835e <_vfiprintf_r+0x1d6>
 8018316:	9b03      	ldr	r3, [sp, #12]
 8018318:	3307      	adds	r3, #7
 801831a:	f023 0307 	bic.w	r3, r3, #7
 801831e:	3308      	adds	r3, #8
 8018320:	9303      	str	r3, [sp, #12]
 8018322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018324:	443b      	add	r3, r7
 8018326:	9309      	str	r3, [sp, #36]	@ 0x24
 8018328:	e76a      	b.n	8018200 <_vfiprintf_r+0x78>
 801832a:	fb0c 3202 	mla	r2, ip, r2, r3
 801832e:	460c      	mov	r4, r1
 8018330:	2001      	movs	r0, #1
 8018332:	e7a8      	b.n	8018286 <_vfiprintf_r+0xfe>
 8018334:	2300      	movs	r3, #0
 8018336:	3401      	adds	r4, #1
 8018338:	9305      	str	r3, [sp, #20]
 801833a:	4619      	mov	r1, r3
 801833c:	f04f 0c0a 	mov.w	ip, #10
 8018340:	4620      	mov	r0, r4
 8018342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018346:	3a30      	subs	r2, #48	@ 0x30
 8018348:	2a09      	cmp	r2, #9
 801834a:	d903      	bls.n	8018354 <_vfiprintf_r+0x1cc>
 801834c:	2b00      	cmp	r3, #0
 801834e:	d0c6      	beq.n	80182de <_vfiprintf_r+0x156>
 8018350:	9105      	str	r1, [sp, #20]
 8018352:	e7c4      	b.n	80182de <_vfiprintf_r+0x156>
 8018354:	fb0c 2101 	mla	r1, ip, r1, r2
 8018358:	4604      	mov	r4, r0
 801835a:	2301      	movs	r3, #1
 801835c:	e7f0      	b.n	8018340 <_vfiprintf_r+0x1b8>
 801835e:	ab03      	add	r3, sp, #12
 8018360:	9300      	str	r3, [sp, #0]
 8018362:	462a      	mov	r2, r5
 8018364:	4b12      	ldr	r3, [pc, #72]	@ (80183b0 <_vfiprintf_r+0x228>)
 8018366:	a904      	add	r1, sp, #16
 8018368:	4630      	mov	r0, r6
 801836a:	f3af 8000 	nop.w
 801836e:	4607      	mov	r7, r0
 8018370:	1c78      	adds	r0, r7, #1
 8018372:	d1d6      	bne.n	8018322 <_vfiprintf_r+0x19a>
 8018374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018376:	07d9      	lsls	r1, r3, #31
 8018378:	d405      	bmi.n	8018386 <_vfiprintf_r+0x1fe>
 801837a:	89ab      	ldrh	r3, [r5, #12]
 801837c:	059a      	lsls	r2, r3, #22
 801837e:	d402      	bmi.n	8018386 <_vfiprintf_r+0x1fe>
 8018380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018382:	f7ff fda9 	bl	8017ed8 <__retarget_lock_release_recursive>
 8018386:	89ab      	ldrh	r3, [r5, #12]
 8018388:	065b      	lsls	r3, r3, #25
 801838a:	f53f af1f 	bmi.w	80181cc <_vfiprintf_r+0x44>
 801838e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018390:	e71e      	b.n	80181d0 <_vfiprintf_r+0x48>
 8018392:	ab03      	add	r3, sp, #12
 8018394:	9300      	str	r3, [sp, #0]
 8018396:	462a      	mov	r2, r5
 8018398:	4b05      	ldr	r3, [pc, #20]	@ (80183b0 <_vfiprintf_r+0x228>)
 801839a:	a904      	add	r1, sp, #16
 801839c:	4630      	mov	r0, r6
 801839e:	f000 f879 	bl	8018494 <_printf_i>
 80183a2:	e7e4      	b.n	801836e <_vfiprintf_r+0x1e6>
 80183a4:	0801c4cb 	.word	0x0801c4cb
 80183a8:	0801c4d5 	.word	0x0801c4d5
 80183ac:	00000000 	.word	0x00000000
 80183b0:	08018163 	.word	0x08018163
 80183b4:	0801c4d1 	.word	0x0801c4d1

080183b8 <_printf_common>:
 80183b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183bc:	4616      	mov	r6, r2
 80183be:	4698      	mov	r8, r3
 80183c0:	688a      	ldr	r2, [r1, #8]
 80183c2:	690b      	ldr	r3, [r1, #16]
 80183c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80183c8:	4293      	cmp	r3, r2
 80183ca:	bfb8      	it	lt
 80183cc:	4613      	movlt	r3, r2
 80183ce:	6033      	str	r3, [r6, #0]
 80183d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80183d4:	4607      	mov	r7, r0
 80183d6:	460c      	mov	r4, r1
 80183d8:	b10a      	cbz	r2, 80183de <_printf_common+0x26>
 80183da:	3301      	adds	r3, #1
 80183dc:	6033      	str	r3, [r6, #0]
 80183de:	6823      	ldr	r3, [r4, #0]
 80183e0:	0699      	lsls	r1, r3, #26
 80183e2:	bf42      	ittt	mi
 80183e4:	6833      	ldrmi	r3, [r6, #0]
 80183e6:	3302      	addmi	r3, #2
 80183e8:	6033      	strmi	r3, [r6, #0]
 80183ea:	6825      	ldr	r5, [r4, #0]
 80183ec:	f015 0506 	ands.w	r5, r5, #6
 80183f0:	d106      	bne.n	8018400 <_printf_common+0x48>
 80183f2:	f104 0a19 	add.w	sl, r4, #25
 80183f6:	68e3      	ldr	r3, [r4, #12]
 80183f8:	6832      	ldr	r2, [r6, #0]
 80183fa:	1a9b      	subs	r3, r3, r2
 80183fc:	42ab      	cmp	r3, r5
 80183fe:	dc26      	bgt.n	801844e <_printf_common+0x96>
 8018400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018404:	6822      	ldr	r2, [r4, #0]
 8018406:	3b00      	subs	r3, #0
 8018408:	bf18      	it	ne
 801840a:	2301      	movne	r3, #1
 801840c:	0692      	lsls	r2, r2, #26
 801840e:	d42b      	bmi.n	8018468 <_printf_common+0xb0>
 8018410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018414:	4641      	mov	r1, r8
 8018416:	4638      	mov	r0, r7
 8018418:	47c8      	blx	r9
 801841a:	3001      	adds	r0, #1
 801841c:	d01e      	beq.n	801845c <_printf_common+0xa4>
 801841e:	6823      	ldr	r3, [r4, #0]
 8018420:	6922      	ldr	r2, [r4, #16]
 8018422:	f003 0306 	and.w	r3, r3, #6
 8018426:	2b04      	cmp	r3, #4
 8018428:	bf02      	ittt	eq
 801842a:	68e5      	ldreq	r5, [r4, #12]
 801842c:	6833      	ldreq	r3, [r6, #0]
 801842e:	1aed      	subeq	r5, r5, r3
 8018430:	68a3      	ldr	r3, [r4, #8]
 8018432:	bf0c      	ite	eq
 8018434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018438:	2500      	movne	r5, #0
 801843a:	4293      	cmp	r3, r2
 801843c:	bfc4      	itt	gt
 801843e:	1a9b      	subgt	r3, r3, r2
 8018440:	18ed      	addgt	r5, r5, r3
 8018442:	2600      	movs	r6, #0
 8018444:	341a      	adds	r4, #26
 8018446:	42b5      	cmp	r5, r6
 8018448:	d11a      	bne.n	8018480 <_printf_common+0xc8>
 801844a:	2000      	movs	r0, #0
 801844c:	e008      	b.n	8018460 <_printf_common+0xa8>
 801844e:	2301      	movs	r3, #1
 8018450:	4652      	mov	r2, sl
 8018452:	4641      	mov	r1, r8
 8018454:	4638      	mov	r0, r7
 8018456:	47c8      	blx	r9
 8018458:	3001      	adds	r0, #1
 801845a:	d103      	bne.n	8018464 <_printf_common+0xac>
 801845c:	f04f 30ff 	mov.w	r0, #4294967295
 8018460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018464:	3501      	adds	r5, #1
 8018466:	e7c6      	b.n	80183f6 <_printf_common+0x3e>
 8018468:	18e1      	adds	r1, r4, r3
 801846a:	1c5a      	adds	r2, r3, #1
 801846c:	2030      	movs	r0, #48	@ 0x30
 801846e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018472:	4422      	add	r2, r4
 8018474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801847c:	3302      	adds	r3, #2
 801847e:	e7c7      	b.n	8018410 <_printf_common+0x58>
 8018480:	2301      	movs	r3, #1
 8018482:	4622      	mov	r2, r4
 8018484:	4641      	mov	r1, r8
 8018486:	4638      	mov	r0, r7
 8018488:	47c8      	blx	r9
 801848a:	3001      	adds	r0, #1
 801848c:	d0e6      	beq.n	801845c <_printf_common+0xa4>
 801848e:	3601      	adds	r6, #1
 8018490:	e7d9      	b.n	8018446 <_printf_common+0x8e>
	...

08018494 <_printf_i>:
 8018494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018498:	7e0f      	ldrb	r7, [r1, #24]
 801849a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801849c:	2f78      	cmp	r7, #120	@ 0x78
 801849e:	4691      	mov	r9, r2
 80184a0:	4680      	mov	r8, r0
 80184a2:	460c      	mov	r4, r1
 80184a4:	469a      	mov	sl, r3
 80184a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80184aa:	d807      	bhi.n	80184bc <_printf_i+0x28>
 80184ac:	2f62      	cmp	r7, #98	@ 0x62
 80184ae:	d80a      	bhi.n	80184c6 <_printf_i+0x32>
 80184b0:	2f00      	cmp	r7, #0
 80184b2:	f000 80d1 	beq.w	8018658 <_printf_i+0x1c4>
 80184b6:	2f58      	cmp	r7, #88	@ 0x58
 80184b8:	f000 80b8 	beq.w	801862c <_printf_i+0x198>
 80184bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80184c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80184c4:	e03a      	b.n	801853c <_printf_i+0xa8>
 80184c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80184ca:	2b15      	cmp	r3, #21
 80184cc:	d8f6      	bhi.n	80184bc <_printf_i+0x28>
 80184ce:	a101      	add	r1, pc, #4	@ (adr r1, 80184d4 <_printf_i+0x40>)
 80184d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184d4:	0801852d 	.word	0x0801852d
 80184d8:	08018541 	.word	0x08018541
 80184dc:	080184bd 	.word	0x080184bd
 80184e0:	080184bd 	.word	0x080184bd
 80184e4:	080184bd 	.word	0x080184bd
 80184e8:	080184bd 	.word	0x080184bd
 80184ec:	08018541 	.word	0x08018541
 80184f0:	080184bd 	.word	0x080184bd
 80184f4:	080184bd 	.word	0x080184bd
 80184f8:	080184bd 	.word	0x080184bd
 80184fc:	080184bd 	.word	0x080184bd
 8018500:	0801863f 	.word	0x0801863f
 8018504:	0801856b 	.word	0x0801856b
 8018508:	080185f9 	.word	0x080185f9
 801850c:	080184bd 	.word	0x080184bd
 8018510:	080184bd 	.word	0x080184bd
 8018514:	08018661 	.word	0x08018661
 8018518:	080184bd 	.word	0x080184bd
 801851c:	0801856b 	.word	0x0801856b
 8018520:	080184bd 	.word	0x080184bd
 8018524:	080184bd 	.word	0x080184bd
 8018528:	08018601 	.word	0x08018601
 801852c:	6833      	ldr	r3, [r6, #0]
 801852e:	1d1a      	adds	r2, r3, #4
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	6032      	str	r2, [r6, #0]
 8018534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801853c:	2301      	movs	r3, #1
 801853e:	e09c      	b.n	801867a <_printf_i+0x1e6>
 8018540:	6833      	ldr	r3, [r6, #0]
 8018542:	6820      	ldr	r0, [r4, #0]
 8018544:	1d19      	adds	r1, r3, #4
 8018546:	6031      	str	r1, [r6, #0]
 8018548:	0606      	lsls	r6, r0, #24
 801854a:	d501      	bpl.n	8018550 <_printf_i+0xbc>
 801854c:	681d      	ldr	r5, [r3, #0]
 801854e:	e003      	b.n	8018558 <_printf_i+0xc4>
 8018550:	0645      	lsls	r5, r0, #25
 8018552:	d5fb      	bpl.n	801854c <_printf_i+0xb8>
 8018554:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018558:	2d00      	cmp	r5, #0
 801855a:	da03      	bge.n	8018564 <_printf_i+0xd0>
 801855c:	232d      	movs	r3, #45	@ 0x2d
 801855e:	426d      	negs	r5, r5
 8018560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018564:	4858      	ldr	r0, [pc, #352]	@ (80186c8 <_printf_i+0x234>)
 8018566:	230a      	movs	r3, #10
 8018568:	e011      	b.n	801858e <_printf_i+0xfa>
 801856a:	6821      	ldr	r1, [r4, #0]
 801856c:	6833      	ldr	r3, [r6, #0]
 801856e:	0608      	lsls	r0, r1, #24
 8018570:	f853 5b04 	ldr.w	r5, [r3], #4
 8018574:	d402      	bmi.n	801857c <_printf_i+0xe8>
 8018576:	0649      	lsls	r1, r1, #25
 8018578:	bf48      	it	mi
 801857a:	b2ad      	uxthmi	r5, r5
 801857c:	2f6f      	cmp	r7, #111	@ 0x6f
 801857e:	4852      	ldr	r0, [pc, #328]	@ (80186c8 <_printf_i+0x234>)
 8018580:	6033      	str	r3, [r6, #0]
 8018582:	bf14      	ite	ne
 8018584:	230a      	movne	r3, #10
 8018586:	2308      	moveq	r3, #8
 8018588:	2100      	movs	r1, #0
 801858a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801858e:	6866      	ldr	r6, [r4, #4]
 8018590:	60a6      	str	r6, [r4, #8]
 8018592:	2e00      	cmp	r6, #0
 8018594:	db05      	blt.n	80185a2 <_printf_i+0x10e>
 8018596:	6821      	ldr	r1, [r4, #0]
 8018598:	432e      	orrs	r6, r5
 801859a:	f021 0104 	bic.w	r1, r1, #4
 801859e:	6021      	str	r1, [r4, #0]
 80185a0:	d04b      	beq.n	801863a <_printf_i+0x1a6>
 80185a2:	4616      	mov	r6, r2
 80185a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80185a8:	fb03 5711 	mls	r7, r3, r1, r5
 80185ac:	5dc7      	ldrb	r7, [r0, r7]
 80185ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80185b2:	462f      	mov	r7, r5
 80185b4:	42bb      	cmp	r3, r7
 80185b6:	460d      	mov	r5, r1
 80185b8:	d9f4      	bls.n	80185a4 <_printf_i+0x110>
 80185ba:	2b08      	cmp	r3, #8
 80185bc:	d10b      	bne.n	80185d6 <_printf_i+0x142>
 80185be:	6823      	ldr	r3, [r4, #0]
 80185c0:	07df      	lsls	r7, r3, #31
 80185c2:	d508      	bpl.n	80185d6 <_printf_i+0x142>
 80185c4:	6923      	ldr	r3, [r4, #16]
 80185c6:	6861      	ldr	r1, [r4, #4]
 80185c8:	4299      	cmp	r1, r3
 80185ca:	bfde      	ittt	le
 80185cc:	2330      	movle	r3, #48	@ 0x30
 80185ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80185d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80185d6:	1b92      	subs	r2, r2, r6
 80185d8:	6122      	str	r2, [r4, #16]
 80185da:	f8cd a000 	str.w	sl, [sp]
 80185de:	464b      	mov	r3, r9
 80185e0:	aa03      	add	r2, sp, #12
 80185e2:	4621      	mov	r1, r4
 80185e4:	4640      	mov	r0, r8
 80185e6:	f7ff fee7 	bl	80183b8 <_printf_common>
 80185ea:	3001      	adds	r0, #1
 80185ec:	d14a      	bne.n	8018684 <_printf_i+0x1f0>
 80185ee:	f04f 30ff 	mov.w	r0, #4294967295
 80185f2:	b004      	add	sp, #16
 80185f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185f8:	6823      	ldr	r3, [r4, #0]
 80185fa:	f043 0320 	orr.w	r3, r3, #32
 80185fe:	6023      	str	r3, [r4, #0]
 8018600:	4832      	ldr	r0, [pc, #200]	@ (80186cc <_printf_i+0x238>)
 8018602:	2778      	movs	r7, #120	@ 0x78
 8018604:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018608:	6823      	ldr	r3, [r4, #0]
 801860a:	6831      	ldr	r1, [r6, #0]
 801860c:	061f      	lsls	r7, r3, #24
 801860e:	f851 5b04 	ldr.w	r5, [r1], #4
 8018612:	d402      	bmi.n	801861a <_printf_i+0x186>
 8018614:	065f      	lsls	r7, r3, #25
 8018616:	bf48      	it	mi
 8018618:	b2ad      	uxthmi	r5, r5
 801861a:	6031      	str	r1, [r6, #0]
 801861c:	07d9      	lsls	r1, r3, #31
 801861e:	bf44      	itt	mi
 8018620:	f043 0320 	orrmi.w	r3, r3, #32
 8018624:	6023      	strmi	r3, [r4, #0]
 8018626:	b11d      	cbz	r5, 8018630 <_printf_i+0x19c>
 8018628:	2310      	movs	r3, #16
 801862a:	e7ad      	b.n	8018588 <_printf_i+0xf4>
 801862c:	4826      	ldr	r0, [pc, #152]	@ (80186c8 <_printf_i+0x234>)
 801862e:	e7e9      	b.n	8018604 <_printf_i+0x170>
 8018630:	6823      	ldr	r3, [r4, #0]
 8018632:	f023 0320 	bic.w	r3, r3, #32
 8018636:	6023      	str	r3, [r4, #0]
 8018638:	e7f6      	b.n	8018628 <_printf_i+0x194>
 801863a:	4616      	mov	r6, r2
 801863c:	e7bd      	b.n	80185ba <_printf_i+0x126>
 801863e:	6833      	ldr	r3, [r6, #0]
 8018640:	6825      	ldr	r5, [r4, #0]
 8018642:	6961      	ldr	r1, [r4, #20]
 8018644:	1d18      	adds	r0, r3, #4
 8018646:	6030      	str	r0, [r6, #0]
 8018648:	062e      	lsls	r6, r5, #24
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	d501      	bpl.n	8018652 <_printf_i+0x1be>
 801864e:	6019      	str	r1, [r3, #0]
 8018650:	e002      	b.n	8018658 <_printf_i+0x1c4>
 8018652:	0668      	lsls	r0, r5, #25
 8018654:	d5fb      	bpl.n	801864e <_printf_i+0x1ba>
 8018656:	8019      	strh	r1, [r3, #0]
 8018658:	2300      	movs	r3, #0
 801865a:	6123      	str	r3, [r4, #16]
 801865c:	4616      	mov	r6, r2
 801865e:	e7bc      	b.n	80185da <_printf_i+0x146>
 8018660:	6833      	ldr	r3, [r6, #0]
 8018662:	1d1a      	adds	r2, r3, #4
 8018664:	6032      	str	r2, [r6, #0]
 8018666:	681e      	ldr	r6, [r3, #0]
 8018668:	6862      	ldr	r2, [r4, #4]
 801866a:	2100      	movs	r1, #0
 801866c:	4630      	mov	r0, r6
 801866e:	f7e7 fde7 	bl	8000240 <memchr>
 8018672:	b108      	cbz	r0, 8018678 <_printf_i+0x1e4>
 8018674:	1b80      	subs	r0, r0, r6
 8018676:	6060      	str	r0, [r4, #4]
 8018678:	6863      	ldr	r3, [r4, #4]
 801867a:	6123      	str	r3, [r4, #16]
 801867c:	2300      	movs	r3, #0
 801867e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018682:	e7aa      	b.n	80185da <_printf_i+0x146>
 8018684:	6923      	ldr	r3, [r4, #16]
 8018686:	4632      	mov	r2, r6
 8018688:	4649      	mov	r1, r9
 801868a:	4640      	mov	r0, r8
 801868c:	47d0      	blx	sl
 801868e:	3001      	adds	r0, #1
 8018690:	d0ad      	beq.n	80185ee <_printf_i+0x15a>
 8018692:	6823      	ldr	r3, [r4, #0]
 8018694:	079b      	lsls	r3, r3, #30
 8018696:	d413      	bmi.n	80186c0 <_printf_i+0x22c>
 8018698:	68e0      	ldr	r0, [r4, #12]
 801869a:	9b03      	ldr	r3, [sp, #12]
 801869c:	4298      	cmp	r0, r3
 801869e:	bfb8      	it	lt
 80186a0:	4618      	movlt	r0, r3
 80186a2:	e7a6      	b.n	80185f2 <_printf_i+0x15e>
 80186a4:	2301      	movs	r3, #1
 80186a6:	4632      	mov	r2, r6
 80186a8:	4649      	mov	r1, r9
 80186aa:	4640      	mov	r0, r8
 80186ac:	47d0      	blx	sl
 80186ae:	3001      	adds	r0, #1
 80186b0:	d09d      	beq.n	80185ee <_printf_i+0x15a>
 80186b2:	3501      	adds	r5, #1
 80186b4:	68e3      	ldr	r3, [r4, #12]
 80186b6:	9903      	ldr	r1, [sp, #12]
 80186b8:	1a5b      	subs	r3, r3, r1
 80186ba:	42ab      	cmp	r3, r5
 80186bc:	dcf2      	bgt.n	80186a4 <_printf_i+0x210>
 80186be:	e7eb      	b.n	8018698 <_printf_i+0x204>
 80186c0:	2500      	movs	r5, #0
 80186c2:	f104 0619 	add.w	r6, r4, #25
 80186c6:	e7f5      	b.n	80186b4 <_printf_i+0x220>
 80186c8:	0801c4dc 	.word	0x0801c4dc
 80186cc:	0801c4ed 	.word	0x0801c4ed

080186d0 <__sflush_r>:
 80186d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80186d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d8:	0716      	lsls	r6, r2, #28
 80186da:	4605      	mov	r5, r0
 80186dc:	460c      	mov	r4, r1
 80186de:	d454      	bmi.n	801878a <__sflush_r+0xba>
 80186e0:	684b      	ldr	r3, [r1, #4]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	dc02      	bgt.n	80186ec <__sflush_r+0x1c>
 80186e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	dd48      	ble.n	801877e <__sflush_r+0xae>
 80186ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80186ee:	2e00      	cmp	r6, #0
 80186f0:	d045      	beq.n	801877e <__sflush_r+0xae>
 80186f2:	2300      	movs	r3, #0
 80186f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80186f8:	682f      	ldr	r7, [r5, #0]
 80186fa:	6a21      	ldr	r1, [r4, #32]
 80186fc:	602b      	str	r3, [r5, #0]
 80186fe:	d030      	beq.n	8018762 <__sflush_r+0x92>
 8018700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018702:	89a3      	ldrh	r3, [r4, #12]
 8018704:	0759      	lsls	r1, r3, #29
 8018706:	d505      	bpl.n	8018714 <__sflush_r+0x44>
 8018708:	6863      	ldr	r3, [r4, #4]
 801870a:	1ad2      	subs	r2, r2, r3
 801870c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801870e:	b10b      	cbz	r3, 8018714 <__sflush_r+0x44>
 8018710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018712:	1ad2      	subs	r2, r2, r3
 8018714:	2300      	movs	r3, #0
 8018716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018718:	6a21      	ldr	r1, [r4, #32]
 801871a:	4628      	mov	r0, r5
 801871c:	47b0      	blx	r6
 801871e:	1c43      	adds	r3, r0, #1
 8018720:	89a3      	ldrh	r3, [r4, #12]
 8018722:	d106      	bne.n	8018732 <__sflush_r+0x62>
 8018724:	6829      	ldr	r1, [r5, #0]
 8018726:	291d      	cmp	r1, #29
 8018728:	d82b      	bhi.n	8018782 <__sflush_r+0xb2>
 801872a:	4a2a      	ldr	r2, [pc, #168]	@ (80187d4 <__sflush_r+0x104>)
 801872c:	40ca      	lsrs	r2, r1
 801872e:	07d6      	lsls	r6, r2, #31
 8018730:	d527      	bpl.n	8018782 <__sflush_r+0xb2>
 8018732:	2200      	movs	r2, #0
 8018734:	6062      	str	r2, [r4, #4]
 8018736:	04d9      	lsls	r1, r3, #19
 8018738:	6922      	ldr	r2, [r4, #16]
 801873a:	6022      	str	r2, [r4, #0]
 801873c:	d504      	bpl.n	8018748 <__sflush_r+0x78>
 801873e:	1c42      	adds	r2, r0, #1
 8018740:	d101      	bne.n	8018746 <__sflush_r+0x76>
 8018742:	682b      	ldr	r3, [r5, #0]
 8018744:	b903      	cbnz	r3, 8018748 <__sflush_r+0x78>
 8018746:	6560      	str	r0, [r4, #84]	@ 0x54
 8018748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801874a:	602f      	str	r7, [r5, #0]
 801874c:	b1b9      	cbz	r1, 801877e <__sflush_r+0xae>
 801874e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018752:	4299      	cmp	r1, r3
 8018754:	d002      	beq.n	801875c <__sflush_r+0x8c>
 8018756:	4628      	mov	r0, r5
 8018758:	f7ff fbec 	bl	8017f34 <_free_r>
 801875c:	2300      	movs	r3, #0
 801875e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018760:	e00d      	b.n	801877e <__sflush_r+0xae>
 8018762:	2301      	movs	r3, #1
 8018764:	4628      	mov	r0, r5
 8018766:	47b0      	blx	r6
 8018768:	4602      	mov	r2, r0
 801876a:	1c50      	adds	r0, r2, #1
 801876c:	d1c9      	bne.n	8018702 <__sflush_r+0x32>
 801876e:	682b      	ldr	r3, [r5, #0]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d0c6      	beq.n	8018702 <__sflush_r+0x32>
 8018774:	2b1d      	cmp	r3, #29
 8018776:	d001      	beq.n	801877c <__sflush_r+0xac>
 8018778:	2b16      	cmp	r3, #22
 801877a:	d11e      	bne.n	80187ba <__sflush_r+0xea>
 801877c:	602f      	str	r7, [r5, #0]
 801877e:	2000      	movs	r0, #0
 8018780:	e022      	b.n	80187c8 <__sflush_r+0xf8>
 8018782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018786:	b21b      	sxth	r3, r3
 8018788:	e01b      	b.n	80187c2 <__sflush_r+0xf2>
 801878a:	690f      	ldr	r7, [r1, #16]
 801878c:	2f00      	cmp	r7, #0
 801878e:	d0f6      	beq.n	801877e <__sflush_r+0xae>
 8018790:	0793      	lsls	r3, r2, #30
 8018792:	680e      	ldr	r6, [r1, #0]
 8018794:	bf08      	it	eq
 8018796:	694b      	ldreq	r3, [r1, #20]
 8018798:	600f      	str	r7, [r1, #0]
 801879a:	bf18      	it	ne
 801879c:	2300      	movne	r3, #0
 801879e:	eba6 0807 	sub.w	r8, r6, r7
 80187a2:	608b      	str	r3, [r1, #8]
 80187a4:	f1b8 0f00 	cmp.w	r8, #0
 80187a8:	dde9      	ble.n	801877e <__sflush_r+0xae>
 80187aa:	6a21      	ldr	r1, [r4, #32]
 80187ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80187ae:	4643      	mov	r3, r8
 80187b0:	463a      	mov	r2, r7
 80187b2:	4628      	mov	r0, r5
 80187b4:	47b0      	blx	r6
 80187b6:	2800      	cmp	r0, #0
 80187b8:	dc08      	bgt.n	80187cc <__sflush_r+0xfc>
 80187ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187c2:	81a3      	strh	r3, [r4, #12]
 80187c4:	f04f 30ff 	mov.w	r0, #4294967295
 80187c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187cc:	4407      	add	r7, r0
 80187ce:	eba8 0800 	sub.w	r8, r8, r0
 80187d2:	e7e7      	b.n	80187a4 <__sflush_r+0xd4>
 80187d4:	20400001 	.word	0x20400001

080187d8 <_fflush_r>:
 80187d8:	b538      	push	{r3, r4, r5, lr}
 80187da:	690b      	ldr	r3, [r1, #16]
 80187dc:	4605      	mov	r5, r0
 80187de:	460c      	mov	r4, r1
 80187e0:	b913      	cbnz	r3, 80187e8 <_fflush_r+0x10>
 80187e2:	2500      	movs	r5, #0
 80187e4:	4628      	mov	r0, r5
 80187e6:	bd38      	pop	{r3, r4, r5, pc}
 80187e8:	b118      	cbz	r0, 80187f2 <_fflush_r+0x1a>
 80187ea:	6a03      	ldr	r3, [r0, #32]
 80187ec:	b90b      	cbnz	r3, 80187f2 <_fflush_r+0x1a>
 80187ee:	f7ff fa05 	bl	8017bfc <__sinit>
 80187f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d0f3      	beq.n	80187e2 <_fflush_r+0xa>
 80187fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80187fc:	07d0      	lsls	r0, r2, #31
 80187fe:	d404      	bmi.n	801880a <_fflush_r+0x32>
 8018800:	0599      	lsls	r1, r3, #22
 8018802:	d402      	bmi.n	801880a <_fflush_r+0x32>
 8018804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018806:	f7ff fb66 	bl	8017ed6 <__retarget_lock_acquire_recursive>
 801880a:	4628      	mov	r0, r5
 801880c:	4621      	mov	r1, r4
 801880e:	f7ff ff5f 	bl	80186d0 <__sflush_r>
 8018812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018814:	07da      	lsls	r2, r3, #31
 8018816:	4605      	mov	r5, r0
 8018818:	d4e4      	bmi.n	80187e4 <_fflush_r+0xc>
 801881a:	89a3      	ldrh	r3, [r4, #12]
 801881c:	059b      	lsls	r3, r3, #22
 801881e:	d4e1      	bmi.n	80187e4 <_fflush_r+0xc>
 8018820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018822:	f7ff fb59 	bl	8017ed8 <__retarget_lock_release_recursive>
 8018826:	e7dd      	b.n	80187e4 <_fflush_r+0xc>

08018828 <fiprintf>:
 8018828:	b40e      	push	{r1, r2, r3}
 801882a:	b503      	push	{r0, r1, lr}
 801882c:	4601      	mov	r1, r0
 801882e:	ab03      	add	r3, sp, #12
 8018830:	4805      	ldr	r0, [pc, #20]	@ (8018848 <fiprintf+0x20>)
 8018832:	f853 2b04 	ldr.w	r2, [r3], #4
 8018836:	6800      	ldr	r0, [r0, #0]
 8018838:	9301      	str	r3, [sp, #4]
 801883a:	f7ff fca5 	bl	8018188 <_vfiprintf_r>
 801883e:	b002      	add	sp, #8
 8018840:	f85d eb04 	ldr.w	lr, [sp], #4
 8018844:	b003      	add	sp, #12
 8018846:	4770      	bx	lr
 8018848:	20000040 	.word	0x20000040

0801884c <__swbuf_r>:
 801884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801884e:	460e      	mov	r6, r1
 8018850:	4614      	mov	r4, r2
 8018852:	4605      	mov	r5, r0
 8018854:	b118      	cbz	r0, 801885e <__swbuf_r+0x12>
 8018856:	6a03      	ldr	r3, [r0, #32]
 8018858:	b90b      	cbnz	r3, 801885e <__swbuf_r+0x12>
 801885a:	f7ff f9cf 	bl	8017bfc <__sinit>
 801885e:	69a3      	ldr	r3, [r4, #24]
 8018860:	60a3      	str	r3, [r4, #8]
 8018862:	89a3      	ldrh	r3, [r4, #12]
 8018864:	071a      	lsls	r2, r3, #28
 8018866:	d501      	bpl.n	801886c <__swbuf_r+0x20>
 8018868:	6923      	ldr	r3, [r4, #16]
 801886a:	b943      	cbnz	r3, 801887e <__swbuf_r+0x32>
 801886c:	4621      	mov	r1, r4
 801886e:	4628      	mov	r0, r5
 8018870:	f000 f82a 	bl	80188c8 <__swsetup_r>
 8018874:	b118      	cbz	r0, 801887e <__swbuf_r+0x32>
 8018876:	f04f 37ff 	mov.w	r7, #4294967295
 801887a:	4638      	mov	r0, r7
 801887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	6922      	ldr	r2, [r4, #16]
 8018882:	1a98      	subs	r0, r3, r2
 8018884:	6963      	ldr	r3, [r4, #20]
 8018886:	b2f6      	uxtb	r6, r6
 8018888:	4283      	cmp	r3, r0
 801888a:	4637      	mov	r7, r6
 801888c:	dc05      	bgt.n	801889a <__swbuf_r+0x4e>
 801888e:	4621      	mov	r1, r4
 8018890:	4628      	mov	r0, r5
 8018892:	f7ff ffa1 	bl	80187d8 <_fflush_r>
 8018896:	2800      	cmp	r0, #0
 8018898:	d1ed      	bne.n	8018876 <__swbuf_r+0x2a>
 801889a:	68a3      	ldr	r3, [r4, #8]
 801889c:	3b01      	subs	r3, #1
 801889e:	60a3      	str	r3, [r4, #8]
 80188a0:	6823      	ldr	r3, [r4, #0]
 80188a2:	1c5a      	adds	r2, r3, #1
 80188a4:	6022      	str	r2, [r4, #0]
 80188a6:	701e      	strb	r6, [r3, #0]
 80188a8:	6962      	ldr	r2, [r4, #20]
 80188aa:	1c43      	adds	r3, r0, #1
 80188ac:	429a      	cmp	r2, r3
 80188ae:	d004      	beq.n	80188ba <__swbuf_r+0x6e>
 80188b0:	89a3      	ldrh	r3, [r4, #12]
 80188b2:	07db      	lsls	r3, r3, #31
 80188b4:	d5e1      	bpl.n	801887a <__swbuf_r+0x2e>
 80188b6:	2e0a      	cmp	r6, #10
 80188b8:	d1df      	bne.n	801887a <__swbuf_r+0x2e>
 80188ba:	4621      	mov	r1, r4
 80188bc:	4628      	mov	r0, r5
 80188be:	f7ff ff8b 	bl	80187d8 <_fflush_r>
 80188c2:	2800      	cmp	r0, #0
 80188c4:	d0d9      	beq.n	801887a <__swbuf_r+0x2e>
 80188c6:	e7d6      	b.n	8018876 <__swbuf_r+0x2a>

080188c8 <__swsetup_r>:
 80188c8:	b538      	push	{r3, r4, r5, lr}
 80188ca:	4b29      	ldr	r3, [pc, #164]	@ (8018970 <__swsetup_r+0xa8>)
 80188cc:	4605      	mov	r5, r0
 80188ce:	6818      	ldr	r0, [r3, #0]
 80188d0:	460c      	mov	r4, r1
 80188d2:	b118      	cbz	r0, 80188dc <__swsetup_r+0x14>
 80188d4:	6a03      	ldr	r3, [r0, #32]
 80188d6:	b90b      	cbnz	r3, 80188dc <__swsetup_r+0x14>
 80188d8:	f7ff f990 	bl	8017bfc <__sinit>
 80188dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e0:	0719      	lsls	r1, r3, #28
 80188e2:	d422      	bmi.n	801892a <__swsetup_r+0x62>
 80188e4:	06da      	lsls	r2, r3, #27
 80188e6:	d407      	bmi.n	80188f8 <__swsetup_r+0x30>
 80188e8:	2209      	movs	r2, #9
 80188ea:	602a      	str	r2, [r5, #0]
 80188ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188f0:	81a3      	strh	r3, [r4, #12]
 80188f2:	f04f 30ff 	mov.w	r0, #4294967295
 80188f6:	e033      	b.n	8018960 <__swsetup_r+0x98>
 80188f8:	0758      	lsls	r0, r3, #29
 80188fa:	d512      	bpl.n	8018922 <__swsetup_r+0x5a>
 80188fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188fe:	b141      	cbz	r1, 8018912 <__swsetup_r+0x4a>
 8018900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018904:	4299      	cmp	r1, r3
 8018906:	d002      	beq.n	801890e <__swsetup_r+0x46>
 8018908:	4628      	mov	r0, r5
 801890a:	f7ff fb13 	bl	8017f34 <_free_r>
 801890e:	2300      	movs	r3, #0
 8018910:	6363      	str	r3, [r4, #52]	@ 0x34
 8018912:	89a3      	ldrh	r3, [r4, #12]
 8018914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018918:	81a3      	strh	r3, [r4, #12]
 801891a:	2300      	movs	r3, #0
 801891c:	6063      	str	r3, [r4, #4]
 801891e:	6923      	ldr	r3, [r4, #16]
 8018920:	6023      	str	r3, [r4, #0]
 8018922:	89a3      	ldrh	r3, [r4, #12]
 8018924:	f043 0308 	orr.w	r3, r3, #8
 8018928:	81a3      	strh	r3, [r4, #12]
 801892a:	6923      	ldr	r3, [r4, #16]
 801892c:	b94b      	cbnz	r3, 8018942 <__swsetup_r+0x7a>
 801892e:	89a3      	ldrh	r3, [r4, #12]
 8018930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018938:	d003      	beq.n	8018942 <__swsetup_r+0x7a>
 801893a:	4621      	mov	r1, r4
 801893c:	4628      	mov	r0, r5
 801893e:	f000 f856 	bl	80189ee <__smakebuf_r>
 8018942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018946:	f013 0201 	ands.w	r2, r3, #1
 801894a:	d00a      	beq.n	8018962 <__swsetup_r+0x9a>
 801894c:	2200      	movs	r2, #0
 801894e:	60a2      	str	r2, [r4, #8]
 8018950:	6962      	ldr	r2, [r4, #20]
 8018952:	4252      	negs	r2, r2
 8018954:	61a2      	str	r2, [r4, #24]
 8018956:	6922      	ldr	r2, [r4, #16]
 8018958:	b942      	cbnz	r2, 801896c <__swsetup_r+0xa4>
 801895a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801895e:	d1c5      	bne.n	80188ec <__swsetup_r+0x24>
 8018960:	bd38      	pop	{r3, r4, r5, pc}
 8018962:	0799      	lsls	r1, r3, #30
 8018964:	bf58      	it	pl
 8018966:	6962      	ldrpl	r2, [r4, #20]
 8018968:	60a2      	str	r2, [r4, #8]
 801896a:	e7f4      	b.n	8018956 <__swsetup_r+0x8e>
 801896c:	2000      	movs	r0, #0
 801896e:	e7f7      	b.n	8018960 <__swsetup_r+0x98>
 8018970:	20000040 	.word	0x20000040

08018974 <_sbrk_r>:
 8018974:	b538      	push	{r3, r4, r5, lr}
 8018976:	4d06      	ldr	r5, [pc, #24]	@ (8018990 <_sbrk_r+0x1c>)
 8018978:	2300      	movs	r3, #0
 801897a:	4604      	mov	r4, r0
 801897c:	4608      	mov	r0, r1
 801897e:	602b      	str	r3, [r5, #0]
 8018980:	f7e8 ffbe 	bl	8001900 <_sbrk>
 8018984:	1c43      	adds	r3, r0, #1
 8018986:	d102      	bne.n	801898e <_sbrk_r+0x1a>
 8018988:	682b      	ldr	r3, [r5, #0]
 801898a:	b103      	cbz	r3, 801898e <_sbrk_r+0x1a>
 801898c:	6023      	str	r3, [r4, #0]
 801898e:	bd38      	pop	{r3, r4, r5, pc}
 8018990:	2001dfc4 	.word	0x2001dfc4

08018994 <abort>:
 8018994:	b508      	push	{r3, lr}
 8018996:	2006      	movs	r0, #6
 8018998:	f000 f88e 	bl	8018ab8 <raise>
 801899c:	2001      	movs	r0, #1
 801899e:	f7e8 ff37 	bl	8001810 <_exit>

080189a2 <__swhatbuf_r>:
 80189a2:	b570      	push	{r4, r5, r6, lr}
 80189a4:	460c      	mov	r4, r1
 80189a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189aa:	2900      	cmp	r1, #0
 80189ac:	b096      	sub	sp, #88	@ 0x58
 80189ae:	4615      	mov	r5, r2
 80189b0:	461e      	mov	r6, r3
 80189b2:	da0d      	bge.n	80189d0 <__swhatbuf_r+0x2e>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80189ba:	f04f 0100 	mov.w	r1, #0
 80189be:	bf14      	ite	ne
 80189c0:	2340      	movne	r3, #64	@ 0x40
 80189c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80189c6:	2000      	movs	r0, #0
 80189c8:	6031      	str	r1, [r6, #0]
 80189ca:	602b      	str	r3, [r5, #0]
 80189cc:	b016      	add	sp, #88	@ 0x58
 80189ce:	bd70      	pop	{r4, r5, r6, pc}
 80189d0:	466a      	mov	r2, sp
 80189d2:	f000 f879 	bl	8018ac8 <_fstat_r>
 80189d6:	2800      	cmp	r0, #0
 80189d8:	dbec      	blt.n	80189b4 <__swhatbuf_r+0x12>
 80189da:	9901      	ldr	r1, [sp, #4]
 80189dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80189e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80189e4:	4259      	negs	r1, r3
 80189e6:	4159      	adcs	r1, r3
 80189e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80189ec:	e7eb      	b.n	80189c6 <__swhatbuf_r+0x24>

080189ee <__smakebuf_r>:
 80189ee:	898b      	ldrh	r3, [r1, #12]
 80189f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189f2:	079d      	lsls	r5, r3, #30
 80189f4:	4606      	mov	r6, r0
 80189f6:	460c      	mov	r4, r1
 80189f8:	d507      	bpl.n	8018a0a <__smakebuf_r+0x1c>
 80189fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80189fe:	6023      	str	r3, [r4, #0]
 8018a00:	6123      	str	r3, [r4, #16]
 8018a02:	2301      	movs	r3, #1
 8018a04:	6163      	str	r3, [r4, #20]
 8018a06:	b003      	add	sp, #12
 8018a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a0a:	ab01      	add	r3, sp, #4
 8018a0c:	466a      	mov	r2, sp
 8018a0e:	f7ff ffc8 	bl	80189a2 <__swhatbuf_r>
 8018a12:	9f00      	ldr	r7, [sp, #0]
 8018a14:	4605      	mov	r5, r0
 8018a16:	4639      	mov	r1, r7
 8018a18:	4630      	mov	r0, r6
 8018a1a:	f7ff faff 	bl	801801c <_malloc_r>
 8018a1e:	b948      	cbnz	r0, 8018a34 <__smakebuf_r+0x46>
 8018a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a24:	059a      	lsls	r2, r3, #22
 8018a26:	d4ee      	bmi.n	8018a06 <__smakebuf_r+0x18>
 8018a28:	f023 0303 	bic.w	r3, r3, #3
 8018a2c:	f043 0302 	orr.w	r3, r3, #2
 8018a30:	81a3      	strh	r3, [r4, #12]
 8018a32:	e7e2      	b.n	80189fa <__smakebuf_r+0xc>
 8018a34:	89a3      	ldrh	r3, [r4, #12]
 8018a36:	6020      	str	r0, [r4, #0]
 8018a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a3c:	81a3      	strh	r3, [r4, #12]
 8018a3e:	9b01      	ldr	r3, [sp, #4]
 8018a40:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018a44:	b15b      	cbz	r3, 8018a5e <__smakebuf_r+0x70>
 8018a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a4a:	4630      	mov	r0, r6
 8018a4c:	f000 f84e 	bl	8018aec <_isatty_r>
 8018a50:	b128      	cbz	r0, 8018a5e <__smakebuf_r+0x70>
 8018a52:	89a3      	ldrh	r3, [r4, #12]
 8018a54:	f023 0303 	bic.w	r3, r3, #3
 8018a58:	f043 0301 	orr.w	r3, r3, #1
 8018a5c:	81a3      	strh	r3, [r4, #12]
 8018a5e:	89a3      	ldrh	r3, [r4, #12]
 8018a60:	431d      	orrs	r5, r3
 8018a62:	81a5      	strh	r5, [r4, #12]
 8018a64:	e7cf      	b.n	8018a06 <__smakebuf_r+0x18>

08018a66 <_raise_r>:
 8018a66:	291f      	cmp	r1, #31
 8018a68:	b538      	push	{r3, r4, r5, lr}
 8018a6a:	4605      	mov	r5, r0
 8018a6c:	460c      	mov	r4, r1
 8018a6e:	d904      	bls.n	8018a7a <_raise_r+0x14>
 8018a70:	2316      	movs	r3, #22
 8018a72:	6003      	str	r3, [r0, #0]
 8018a74:	f04f 30ff 	mov.w	r0, #4294967295
 8018a78:	bd38      	pop	{r3, r4, r5, pc}
 8018a7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018a7c:	b112      	cbz	r2, 8018a84 <_raise_r+0x1e>
 8018a7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a82:	b94b      	cbnz	r3, 8018a98 <_raise_r+0x32>
 8018a84:	4628      	mov	r0, r5
 8018a86:	f000 f853 	bl	8018b30 <_getpid_r>
 8018a8a:	4622      	mov	r2, r4
 8018a8c:	4601      	mov	r1, r0
 8018a8e:	4628      	mov	r0, r5
 8018a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a94:	f000 b83a 	b.w	8018b0c <_kill_r>
 8018a98:	2b01      	cmp	r3, #1
 8018a9a:	d00a      	beq.n	8018ab2 <_raise_r+0x4c>
 8018a9c:	1c59      	adds	r1, r3, #1
 8018a9e:	d103      	bne.n	8018aa8 <_raise_r+0x42>
 8018aa0:	2316      	movs	r3, #22
 8018aa2:	6003      	str	r3, [r0, #0]
 8018aa4:	2001      	movs	r0, #1
 8018aa6:	e7e7      	b.n	8018a78 <_raise_r+0x12>
 8018aa8:	2100      	movs	r1, #0
 8018aaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018aae:	4620      	mov	r0, r4
 8018ab0:	4798      	blx	r3
 8018ab2:	2000      	movs	r0, #0
 8018ab4:	e7e0      	b.n	8018a78 <_raise_r+0x12>
	...

08018ab8 <raise>:
 8018ab8:	4b02      	ldr	r3, [pc, #8]	@ (8018ac4 <raise+0xc>)
 8018aba:	4601      	mov	r1, r0
 8018abc:	6818      	ldr	r0, [r3, #0]
 8018abe:	f7ff bfd2 	b.w	8018a66 <_raise_r>
 8018ac2:	bf00      	nop
 8018ac4:	20000040 	.word	0x20000040

08018ac8 <_fstat_r>:
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4d07      	ldr	r5, [pc, #28]	@ (8018ae8 <_fstat_r+0x20>)
 8018acc:	2300      	movs	r3, #0
 8018ace:	4604      	mov	r4, r0
 8018ad0:	4608      	mov	r0, r1
 8018ad2:	4611      	mov	r1, r2
 8018ad4:	602b      	str	r3, [r5, #0]
 8018ad6:	f7e8 feeb 	bl	80018b0 <_fstat>
 8018ada:	1c43      	adds	r3, r0, #1
 8018adc:	d102      	bne.n	8018ae4 <_fstat_r+0x1c>
 8018ade:	682b      	ldr	r3, [r5, #0]
 8018ae0:	b103      	cbz	r3, 8018ae4 <_fstat_r+0x1c>
 8018ae2:	6023      	str	r3, [r4, #0]
 8018ae4:	bd38      	pop	{r3, r4, r5, pc}
 8018ae6:	bf00      	nop
 8018ae8:	2001dfc4 	.word	0x2001dfc4

08018aec <_isatty_r>:
 8018aec:	b538      	push	{r3, r4, r5, lr}
 8018aee:	4d06      	ldr	r5, [pc, #24]	@ (8018b08 <_isatty_r+0x1c>)
 8018af0:	2300      	movs	r3, #0
 8018af2:	4604      	mov	r4, r0
 8018af4:	4608      	mov	r0, r1
 8018af6:	602b      	str	r3, [r5, #0]
 8018af8:	f7e8 feea 	bl	80018d0 <_isatty>
 8018afc:	1c43      	adds	r3, r0, #1
 8018afe:	d102      	bne.n	8018b06 <_isatty_r+0x1a>
 8018b00:	682b      	ldr	r3, [r5, #0]
 8018b02:	b103      	cbz	r3, 8018b06 <_isatty_r+0x1a>
 8018b04:	6023      	str	r3, [r4, #0]
 8018b06:	bd38      	pop	{r3, r4, r5, pc}
 8018b08:	2001dfc4 	.word	0x2001dfc4

08018b0c <_kill_r>:
 8018b0c:	b538      	push	{r3, r4, r5, lr}
 8018b0e:	4d07      	ldr	r5, [pc, #28]	@ (8018b2c <_kill_r+0x20>)
 8018b10:	2300      	movs	r3, #0
 8018b12:	4604      	mov	r4, r0
 8018b14:	4608      	mov	r0, r1
 8018b16:	4611      	mov	r1, r2
 8018b18:	602b      	str	r3, [r5, #0]
 8018b1a:	f7e8 fe67 	bl	80017ec <_kill>
 8018b1e:	1c43      	adds	r3, r0, #1
 8018b20:	d102      	bne.n	8018b28 <_kill_r+0x1c>
 8018b22:	682b      	ldr	r3, [r5, #0]
 8018b24:	b103      	cbz	r3, 8018b28 <_kill_r+0x1c>
 8018b26:	6023      	str	r3, [r4, #0]
 8018b28:	bd38      	pop	{r3, r4, r5, pc}
 8018b2a:	bf00      	nop
 8018b2c:	2001dfc4 	.word	0x2001dfc4

08018b30 <_getpid_r>:
 8018b30:	f7e8 be54 	b.w	80017dc <_getpid>

08018b34 <_init>:
 8018b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b36:	bf00      	nop
 8018b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b3a:	bc08      	pop	{r3}
 8018b3c:	469e      	mov	lr, r3
 8018b3e:	4770      	bx	lr

08018b40 <_fini>:
 8018b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b42:	bf00      	nop
 8018b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b46:	bc08      	pop	{r3}
 8018b48:	469e      	mov	lr, r3
 8018b4a:	4770      	bx	lr
